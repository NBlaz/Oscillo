ARM GAS  /tmp/ccSV4HHU.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"event_groups.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.xEventGroupCreateStatic,"ax",%progbits
  18              		.align	1
  19              		.global	xEventGroupCreateStatic
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	xEventGroupCreateStatic:
  26              	.LFB4:
  27              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * FreeRTOS Kernel V10.0.1
   3:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  31:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
ARM GAS  /tmp/ccSV4HHU.s 			page 2


  32:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** all the API functions to use the MPU wrappers.  That should only be done when
  33:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** task.h is included from an application file. */
  34:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* FreeRTOS includes. */
  37:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "FreeRTOS.h"
  38:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "task.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "timers.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "event_groups.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  42:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  43:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  44:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** header files above, but not in this file, in order to generate the correct
  45:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** privileged Vs unprivileged linkage and placement. */
  46:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  47:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  48:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* The following bit fields convey control information in a task's event list
  49:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** item value.  It is important they don't clash with the
  50:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** taskEVENT_LIST_ITEM_VALUE_IN_USE definition. */
  51:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if configUSE_16_BIT_TICKS == 1
  52:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x0100U
  53:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x0200U
  54:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x0400U
  55:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff00U
  56:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #else
  57:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x01000000UL
  58:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x02000000UL
  59:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x04000000UL
  60:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff000000UL
  61:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif
  62:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** typedef struct xEventGroupDefinition
  64:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
  65:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventBits_t uxEventBits;
  66:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	List_t xTasksWaitingForBits;		/*< List of tasks waiting for a bit to be set. */
  67:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  68:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
  69:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		UBaseType_t uxEventGroupNumber;
  70:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
  71:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
  73:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the event group is statically allocated to en
  74:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
  75:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** } EventGroup_t;
  76:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  77:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
  78:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  79:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*
  80:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * Test the bits set in uxCurrentEventBits to see if the wait condition is met.
  81:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * The wait condition is defined by xWaitForAllBits.  If xWaitForAllBits is
  82:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * pdTRUE then the wait condition is met if all the bits set in uxBitsToWaitFor
  83:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * are also set in uxCurrentEventBits.  If xWaitForAllBits is pdFALSE then the
  84:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * wait condition is met if any of the bits set in uxBitsToWait for are also set
  85:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * in uxCurrentEventBits.
  86:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  */
  87:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
  88:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccSV4HHU.s 			page 3


  89:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
  90:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  91:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
  92:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  93:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
  94:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
  28              		.loc 1 94 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  95:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
  96:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  97:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* A StaticEventGroup_t object must be provided. */
  98:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( pxEventGroupBuffer );
  33              		.loc 1 98 0
  34 0000 40B9     		cbnz	r0, .L2
  35              	.LBB36:
  36              	.LBB37:
  37              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
ARM GAS  /tmp/ccSV4HHU.s 			page 4


  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccSV4HHU.s 			page 5


  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
ARM GAS  /tmp/ccSV4HHU.s 			page 6


 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
  38              		.loc 2 195 0
  39              		.syntax unified
  40              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  41 0002 4FF05003 			mov r3, #80												
  42 0006 83F31188 		msr basepri, r3											
  43 000a BFF36F8F 		isb														
  44 000e BFF34F8F 		dsb														
  45              	
  46              	@ 0 "" 2
  47              	.LVL1:
  48              		.thumb
  49              		.syntax unified
  50              	.L3:
ARM GAS  /tmp/ccSV4HHU.s 			page 7


  51 0012 FEE7     		b	.L3
  52              	.L2:
  53              	.LBE37:
  54              	.LBE36:
  94:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
  55              		.loc 1 94 0
  56 0014 10B5     		push	{r4, lr}
  57              	.LCFI0:
  58              		.cfi_def_cfa_offset 8
  59              		.cfi_offset 4, -8
  60              		.cfi_offset 14, -4
  61 0016 82B0     		sub	sp, sp, #8
  62              	.LCFI1:
  63              		.cfi_def_cfa_offset 16
  64 0018 0446     		mov	r4, r0
  65              	.LBB38:
  99:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 100:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#if( configASSERT_DEFINED == 1 )
 101:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 102:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Sanity check that the size of the structure used to declare a
 103:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			variable of type StaticEventGroup_t equals the size of the real
 104:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			event group structure. */
 105:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			volatile size_t xSize = sizeof( StaticEventGroup_t );
  66              		.loc 1 105 0
  67 001a 2023     		movs	r3, #32
  68 001c 0193     		str	r3, [sp, #4]
 106:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			configASSERT( xSize == sizeof( EventGroup_t ) );
  69              		.loc 1 106 0
  70 001e 019B     		ldr	r3, [sp, #4]
  71 0020 202B     		cmp	r3, #32
  72 0022 08D0     		beq	.L4
  73              	.LBB39:
  74              	.LBB40:
  75              		.loc 2 195 0
  76              		.syntax unified
  77              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  78 0024 4FF05003 			mov r3, #80												
  79 0028 83F31188 		msr basepri, r3											
  80 002c BFF36F8F 		isb														
  81 0030 BFF34F8F 		dsb														
  82              	
  83              	@ 0 "" 2
  84              	.LVL2:
  85              		.thumb
  86              		.syntax unified
  87              	.L5:
  88 0034 FEE7     		b	.L5
  89              	.L4:
  90              	.LVL3:
  91              	.LBE40:
  92              	.LBE39:
  93              	.LBE38:
 107:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 108:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#endif /* configASSERT_DEFINED */
 109:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 110:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The user has provided a statically allocated event group - use it. */
 111:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGro
ARM GAS  /tmp/ccSV4HHU.s 			page 8


 112:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 113:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( pxEventBits != NULL )
 114:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 115:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
  94              		.loc 1 115 0
  95 0036 0023     		movs	r3, #0
  96 0038 40F8043B 		str	r3, [r0], #4
  97              	.LVL4:
 116:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
  98              		.loc 1 116 0
  99 003c FFF7FEFF 		bl	vListInitialise
 100              	.LVL5:
 117:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 118:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 119:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 120:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note that
 121:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				this event group was created statically in case the event group
 122:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				is later deleted. */
 123:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdTRUE;
 101              		.loc 1 123 0
 102 0040 0123     		movs	r3, #1
 103 0042 2377     		strb	r3, [r4, #28]
 124:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 125:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 126:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 128:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 129:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 130:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 131:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 132:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 133:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return ( EventGroupHandle_t ) pxEventBits;
 135:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 104              		.loc 1 135 0
 105 0044 2046     		mov	r0, r4
 106 0046 02B0     		add	sp, sp, #8
 107              	.LCFI2:
 108              		.cfi_def_cfa_offset 8
 109              		@ sp needed
 110 0048 10BD     		pop	{r4, pc}
 111              		.cfi_endproc
 112              	.LFE4:
 114              		.section	.text.xEventGroupCreate,"ax",%progbits
 115              		.align	1
 116              		.global	xEventGroupCreate
 117              		.syntax unified
 118              		.thumb
 119              		.thumb_func
 120              		.fpu fpv4-sp-d16
 122              	xEventGroupCreate:
 123              	.LFB5:
 136:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 137:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 138:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 139:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 140:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
ARM GAS  /tmp/ccSV4HHU.s 			page 9


 141:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 142:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreate( void )
 143:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 124              		.loc 1 143 0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 0
 127              		@ frame_needed = 0, uses_anonymous_args = 0
 128 0000 38B5     		push	{r3, r4, r5, lr}
 129              	.LCFI3:
 130              		.cfi_def_cfa_offset 16
 131              		.cfi_offset 3, -16
 132              		.cfi_offset 4, -12
 133              		.cfi_offset 5, -8
 134              		.cfi_offset 14, -4
 144:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
 145:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 146:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Allocate the event group. */
 147:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 135              		.loc 1 147 0
 136 0002 2020     		movs	r0, #32
 137 0004 FFF7FEFF 		bl	pvPortMalloc
 138              	.LVL6:
 148:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( pxEventBits != NULL )
 139              		.loc 1 149 0
 140 0008 0446     		mov	r4, r0
 141 000a 28B1     		cbz	r0, .L8
 150:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 151:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 142              		.loc 1 151 0
 143 000c 0025     		movs	r5, #0
 144 000e 40F8045B 		str	r5, [r0], #4
 145              	.LVL7:
 152:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 146              		.loc 1 152 0
 147 0012 FFF7FEFF 		bl	vListInitialise
 148              	.LVL8:
 153:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 154:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 155:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 156:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note this
 157:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				event group was allocated statically in case the event group is
 158:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				later deleted. */
 159:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdFALSE;
 149              		.loc 1 159 0
 150 0016 2577     		strb	r5, [r4, #28]
 151              	.L8:
 160:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 161:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 162:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 164:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 165:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 166:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 167:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 168:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 169:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccSV4HHU.s 			page 10


 170:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return ( EventGroupHandle_t ) pxEventBits;
 171:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 152              		.loc 1 171 0
 153 0018 2046     		mov	r0, r4
 154 001a 38BD     		pop	{r3, r4, r5, pc}
 155              		.cfi_endproc
 156              	.LFE5:
 158              		.section	.text.xEventGroupWaitBits,"ax",%progbits
 159              		.align	1
 160              		.global	xEventGroupWaitBits
 161              		.syntax unified
 162              		.thumb
 163              		.thumb_func
 164              		.fpu fpv4-sp-d16
 166              	xEventGroupWaitBits:
 167              	.LFB7:
 172:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 173:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 174:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 175:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 176:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const E
 177:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 178:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 179:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 180:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xAlreadyYielded;
 181:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 182:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 183:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 184:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 185:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 186:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 187:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 188:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 189:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 190:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 192:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 193:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxOriginalBitValue = pxEventBits->uxEventBits;
 194:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 196:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 197:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 198:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 199:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* All the rendezvous bits are now set - no need to block. */
 200:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 201:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 202:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Rendezvous always clear the bits.  They will have been cleared
 203:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			already unless this is the only task in the rendezvous. */
 204:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 205:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 206:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = 0;
 207:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 208:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 209:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 210:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xTicksToWait != ( TickType_t ) 0 )
 211:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 212:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
ARM GAS  /tmp/ccSV4HHU.s 			page 11


 213:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 214:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Store the bits that the calling task is waiting for in the
 215:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				task's event list item so the kernel knows when a match is
 216:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				found.  Then enter the blocked state. */
 217:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eve
 218:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 219:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* This assignment is obsolete as uxReturn will get set after
 220:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				the task unblocks, but some compilers mistakenly generate a
 221:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				warning about uxReturn being returned without being set if the
 222:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				assignment is omitted. */
 223:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = 0;
 224:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 225:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 226:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 227:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The rendezvous bits were not set, but no block time was
 228:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				specified - just return the current event bit value. */
 229:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 230:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 231:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 232:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 233:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 234:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 235:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 236:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 237:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 238:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 239:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 240:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 241:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 242:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 243:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 244:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 245:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 246:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 248:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 249:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 250:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 251:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 252:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 253:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 254:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 255:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task timed out, just return the current event bit value. */
 256:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 257:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 258:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 259:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 260:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Although the task got here because it timed out before the
 261:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				bits it was waiting for were set, it is possible that since it
 262:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				unblocked another task has set the bits.  If this is the case
 263:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				then it needs to clear the bits before exiting. */
 264:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 265:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 266:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 267:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 268:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 269:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
ARM GAS  /tmp/ccSV4HHU.s 			page 12


 270:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 271:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 272:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 273:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 274:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 275:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 276:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 277:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 278:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 279:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 280:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 281:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 282:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Control bits might be set as the task had blocked should not be
 283:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		returned. */
 284:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 285:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 286:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 287:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
 288:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 289:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Prevent compiler warnings when trace macros are not used. */
 290:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTimeoutOccurred;
 291:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 292:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 293:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 294:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 295:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor,
 297:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 168              		.loc 1 297 0
 169              		.cfi_startproc
 170              		@ args = 4, pretend = 0, frame = 0
 171              		@ frame_needed = 0, uses_anonymous_args = 0
 172              	.LVL9:
 173 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 174              	.LCFI4:
 175              		.cfi_def_cfa_offset 32
 176              		.cfi_offset 3, -32
 177              		.cfi_offset 4, -28
 178              		.cfi_offset 5, -24
 179              		.cfi_offset 6, -20
 180              		.cfi_offset 7, -16
 181              		.cfi_offset 8, -12
 182              		.cfi_offset 9, -8
 183              		.cfi_offset 14, -4
 184 0004 DDF82090 		ldr	r9, [sp, #32]
 185              	.LVL10:
 298:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 299:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn, uxControlBits = 0;
 300:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 301:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 302:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 303:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to wait on the bits used by the kernel
 304:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself, and that at least one bit is being requested. */
 305:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 186              		.loc 1 305 0
 187 0008 60B1     		cbz	r0, .L34
 188 000a 0646     		mov	r6, r0
ARM GAS  /tmp/ccSV4HHU.s 			page 13


 306:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 189              		.loc 1 306 0
 190 000c 11F07F4F 		tst	r1, #-16777216
 191 0010 11D0     		beq	.L14
 192              	.LBB54:
 193              	.LBB55:
 194              		.loc 2 195 0
 195              		.syntax unified
 196              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 197 0012 4FF05003 			mov r3, #80												
 198 0016 83F31188 		msr basepri, r3											
 199 001a BFF36F8F 		isb														
 200 001e BFF34F8F 		dsb														
 201              	
 202              	@ 0 "" 2
 203              	.LVL11:
 204              		.thumb
 205              		.syntax unified
 206              	.L15:
 207 0022 FEE7     		b	.L15
 208              	.LVL12:
 209              	.L34:
 210              	.LBE55:
 211              	.LBE54:
 212              	.LBB56:
 213              	.LBB57:
 214              		.syntax unified
 215              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 216 0024 4FF05003 			mov r3, #80												
 217 0028 83F31188 		msr basepri, r3											
 218 002c BFF36F8F 		isb														
 219 0030 BFF34F8F 		dsb														
 220              	
 221              	@ 0 "" 2
 222              	.LVL13:
 223              		.thumb
 224              		.syntax unified
 225              	.L13:
 226 0034 FEE7     		b	.L13
 227              	.LVL14:
 228              	.L14:
 229              	.LBE57:
 230              	.LBE56:
 307:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 231              		.loc 1 307 0
 232 0036 41B9     		cbnz	r1, .L16
 233              	.LBB58:
 234              	.LBB59:
 235              		.loc 2 195 0
 236              		.syntax unified
 237              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 238 0038 4FF05003 			mov r3, #80												
 239 003c 83F31188 		msr basepri, r3											
 240 0040 BFF36F8F 		isb														
 241 0044 BFF34F8F 		dsb														
 242              	
 243              	@ 0 "" 2
ARM GAS  /tmp/ccSV4HHU.s 			page 14


 244              	.LVL15:
 245              		.thumb
 246              		.syntax unified
 247              	.L17:
 248 0048 FEE7     		b	.L17
 249              	.LVL16:
 250              	.L16:
 251 004a 9846     		mov	r8, r3
 252 004c 1746     		mov	r7, r2
 253 004e 0C46     		mov	r4, r1
 254              	.LBE59:
 255              	.LBE58:
 308:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 309:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 310:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 256              		.loc 1 310 0
 257 0050 FFF7FEFF 		bl	xTaskGetSchedulerState
 258              	.LVL17:
 259 0054 58B9     		cbnz	r0, .L18
 260              		.loc 1 310 0 is_stmt 0 discriminator 2
 261 0056 B9F1000F 		cmp	r9, #0
 262 005a 08D0     		beq	.L18
 263              	.LBB60:
 264              	.LBB61:
 265              		.loc 2 195 0 is_stmt 1
 266              		.syntax unified
 267              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 268 005c 4FF05003 			mov r3, #80												
 269 0060 83F31188 		msr basepri, r3											
 270 0064 BFF36F8F 		isb														
 271 0068 BFF34F8F 		dsb														
 272              	
 273              	@ 0 "" 2
 274              	.LVL18:
 275              		.thumb
 276              		.syntax unified
 277              	.L19:
 278 006c FEE7     		b	.L19
 279              	.L18:
 280              	.LBE61:
 281              	.LBE60:
 311:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 312:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 313:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 314:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 282              		.loc 1 314 0
 283 006e FFF7FEFF 		bl	vTaskSuspendAll
 284              	.LVL19:
 285              	.LBB62:
 315:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 316:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 286              		.loc 1 316 0
 287 0072 3568     		ldr	r5, [r6]
 288              	.LVL20:
 289              	.LBB63:
 290              	.LBB64:
 317:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccSV4HHU.s 			page 15


 318:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Check to see if the wait condition is already met or not. */
 319:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 320:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 321:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xWaitConditionMet != pdFALSE )
 322:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 323:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The wait condition has already been met so there is no need to
 324:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			block. */
 325:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 326:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = ( TickType_t ) 0;
 327:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 328:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Clear the wait bits if requested to do so. */
 329:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 330:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 331:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 332:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 333:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 334:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 335:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 336:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 337:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 338:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else if( xTicksToWait == ( TickType_t ) 0 )
 339:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 340:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The wait condition has not been met, but no block time was
 341:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			specified, so just return the current value. */
 342:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 343:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 344:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 345:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 346:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 347:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task is going to block to wait for its required bits to be
 348:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			set.  uxControlBits are used to remember the specified behaviour of
 349:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			this call to xEventGroupWaitBits() - for use when the event bits
 350:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			unblock the task. */
 351:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 352:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 353:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 354:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 355:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 356:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 357:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 358:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 359:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 360:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xWaitForAllBits != pdFALSE )
 361:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 362:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 363:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 364:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 365:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 366:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 367:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 368:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Store the bits that the calling task is waiting for in the
 370:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			task's event list item so the kernel knows when a match is
 371:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			found.  Then enter the blocked state. */
 372:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxCo
 373:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 374:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* This is obsolete as it will get set after the task unblocks, but
ARM GAS  /tmp/ccSV4HHU.s 			page 16


 375:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			some compilers mistakenly generate a warning about the variable
 376:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			being returned without being set if it is not done. */
 377:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = 0;
 378:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 379:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 380:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 381:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 382:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 383:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 384:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 385:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 386:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 387:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 388:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 389:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 390:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 391:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 392:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 393:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 394:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 396:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 397:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 398:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 399:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 400:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 401:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 402:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 403:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 404:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 405:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The task timed out, just return the current event bit value. */
 406:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 407:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 408:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* It is possible that the event bits were updated between this
 409:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				task leaving the Blocked state and running again. */
 410:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 411:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 412:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					if( xClearOnExit != pdFALSE )
 413:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 414:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 415:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 416:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					else
 417:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 418:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 						mtCOVERAGE_TEST_MARKER();
 419:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 420:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 421:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 422:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 423:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 424:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 425:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 426:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 427:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 428:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 429:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 430:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 431:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
ARM GAS  /tmp/ccSV4HHU.s 			page 17


 432:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 433:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 434:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked so control bits may have been set. */
 435:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 436:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 437:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 438:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 439:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Prevent compiler warnings when trace macros are not used. */
 440:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTimeoutOccurred;
 441:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 442:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 443:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 444:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 445:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 446:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
 447:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 448:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 449:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 450:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 451:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to clear the bits used by the kernel
 452:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself. */
 453:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 454:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 455:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 456:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	taskENTER_CRITICAL();
 457:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 458:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
 459:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 460:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The value returned is the event group value prior to the bits being
 461:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		cleared. */
 462:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 463:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 464:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Clear the bits. */
 465:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 466:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 467:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	taskEXIT_CRITICAL();
 468:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 469:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 470:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 471:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 472:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 473:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 474:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsTo
 476:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 477:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		BaseType_t xReturn;
 478:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 479:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
 480:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( 
 481:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 482:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return xReturn;
 483:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 484:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 485:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif
 486:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 487:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 488:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
ARM GAS  /tmp/ccSV4HHU.s 			page 18


 489:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 490:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 491:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 492:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 493:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 494:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 495:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 496:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 497:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 498:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 499:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 500:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 501:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 502:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 503:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 504:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
 505:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 506:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 507:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t const *pxListEnd;
 508:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** List_t *pxList;
 509:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 510:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 511:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xMatchFound = pdFALSE;
 512:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 513:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to set the bits used by the kernel
 514:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself. */
 515:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 516:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 517:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 518:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	pxList = &( pxEventBits->xTasksWaitingForBits );
 519:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as th
 520:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 521:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 522:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 523:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 524:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxListItem = listGET_HEAD_ENTRY( pxList );
 525:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 526:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Set the bits. */
 527:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits |= uxBitsToSet;
 528:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 529:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* See if the new bit value should unblock any tasks. */
 530:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		while( pxListItem != pxListEnd )
 531:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 532:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxNext = listGET_NEXT( pxListItem );
 533:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 534:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xMatchFound = pdFALSE;
 535:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 536:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Split the bits waited for from the control bits. */
 537:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 538:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 539:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 540:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 541:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 542:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Just looking for single bit being set. */
 543:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 544:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 545:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					xMatchFound = pdTRUE;
ARM GAS  /tmp/ccSV4HHU.s 			page 19


 546:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 547:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 548:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 549:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 550:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 551:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 552:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 553:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 554:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* All bits are set. */
 555:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xMatchFound = pdTRUE;
 556:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 557:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 558:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 559:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Need all bits to be set, but not all the bits were set. */
 560:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 561:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 562:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xMatchFound != pdFALSE )
 563:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 564:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The bits match.  Should the bits be cleared on exit? */
 565:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 566:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 567:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					uxBitsToClear |= uxBitsWaitedFor;
 568:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 569:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 570:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 571:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 572:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 573:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 574:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Store the actual event flag value in the task's event list
 575:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				item before removing the task from the event list.  The
 576:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
 577:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				that is was unblocked due to its required bits matching, rather
 578:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				than because it timed out. */
 579:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO
 580:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 581:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 582:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Move onto the next list item.  Note pxListItem->pxNext is not
 583:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			used here as the list item may have been removed from the event list
 584:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			and inserted into the ready/pending reading list. */
 585:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxListItem = pxNext;
 586:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 587:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 588:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
 589:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		bit was set in the control word. */
 590:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 591:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 592:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 593:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 594:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return pxEventBits->uxEventBits;
 595:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 596:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 597:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 598:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupDelete( EventGroupHandle_t xEventGroup )
 599:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 600:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 601:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 602:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccSV4HHU.s 			page 20


 603:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 604:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 605:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_DELETE( xEventGroup );
 606:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 608:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 609:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Unblock the task, returning 0 as the event list is being deleted
 610:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			and cannot therefore have any bits set. */
 611:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaiting
 612:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO
 613:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 614:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 615:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
 616:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 617:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The event group can only have been allocated dynamically - free
 618:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			it again. */
 619:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vPortFree( pxEventBits );
 620:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 621:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 622:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 623:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The event group could have been allocated statically or
 624:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			dynamically, so check before attempting to free the memory. */
 625:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 626:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 627:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vPortFree( pxEventBits );
 628:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 629:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 630:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 631:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 632:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 633:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 634:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 635:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 636:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 637:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 638:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 639:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 640:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'set bits' command that was pended from
 641:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** an interrupt. */
 642:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
 643:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 644:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 645:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 646:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 647:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 648:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'clear bits' command that was pended from
 649:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** an interrupt. */
 650:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
 651:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 652:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 653:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 654:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 655:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 656:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
 657:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 658:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet = pdFALSE;
 659:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccSV4HHU.s 			page 21


 660:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xWaitForAllBits == pdFALSE )
 291              		.loc 1 660 0
 292 0074 B8F1000F 		cmp	r8, #0
 293 0078 0BD1     		bne	.L20
 661:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 662:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Task only has to wait for one bit within uxBitsToWaitFor to be
 663:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		set.  Is one already set? */
 664:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 294              		.loc 1 664 0
 295 007a 2C42     		tst	r4, r5
 296 007c 14BF     		ite	ne
 297 007e 0123     		movne	r3, #1
 298 0080 0023     		moveq	r3, #0
 299              	.L21:
 300              	.LVL21:
 301              	.LBE64:
 302              	.LBE63:
 321:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 303              		.loc 1 321 0
 304 0082 63B1     		cbz	r3, .L22
 305              	.LVL22:
 329:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 306              		.loc 1 329 0
 307 0084 17B1     		cbz	r7, .L23
 331:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 308              		.loc 1 331 0
 309 0086 25EA0404 		bic	r4, r5, r4
 310              	.LVL23:
 311 008a 3460     		str	r4, [r6]
 312              	.LVL24:
 313              	.L23:
 314              	.LBE62:
 382:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 315              		.loc 1 382 0
 316 008c FFF7FEFF 		bl	xTaskResumeAll
 317              	.LVL25:
 318 0090 3BE0     		b	.L11
 319              	.LVL26:
 320              	.L20:
 321              	.LBB67:
 322              	.LBB66:
 323              	.LBB65:
 665:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 666:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
 667:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 668:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 669:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 670:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 671:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 672:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 673:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	else
 674:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 675:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
 676:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		Are they set already? */
 677:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 324              		.loc 1 677 0
 325 0092 34EA0503 		bics	r3, r4, r5
ARM GAS  /tmp/ccSV4HHU.s 			page 22


 326 0096 0CBF     		ite	eq
 327 0098 0123     		moveq	r3, #1
 328 009a 0023     		movne	r3, #0
 329 009c F1E7     		b	.L21
 330              	.LVL27:
 331              	.L22:
 332              	.LBE65:
 333              	.LBE66:
 338:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 334              		.loc 1 338 0
 335 009e B9F1000F 		cmp	r9, #0
 336 00a2 F3D0     		beq	.L23
 353:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 337              		.loc 1 353 0
 338 00a4 002F     		cmp	r7, #0
 339 00a6 0CBF     		ite	eq
 340 00a8 0021     		moveq	r1, #0
 341 00aa 4FF08071 		movne	r1, #16777216
 342              	.LVL28:
 360:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 343              		.loc 1 360 0
 344 00ae B8F1000F 		cmp	r8, #0
 345 00b2 01D0     		beq	.L25
 362:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 346              		.loc 1 362 0
 347 00b4 41F08061 		orr	r1, r1, #67108864
 348              	.LVL29:
 349              	.L25:
 372:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 350              		.loc 1 372 0
 351 00b8 4A46     		mov	r2, r9
 352 00ba 2143     		orrs	r1, r1, r4
 353              	.LVL30:
 354 00bc 301D     		adds	r0, r6, #4
 355 00be FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 356              	.LVL31:
 357              	.LBE67:
 382:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 358              		.loc 1 382 0
 359 00c2 FFF7FEFF 		bl	xTaskResumeAll
 360              	.LVL32:
 386:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 361              		.loc 1 386 0
 362 00c6 38B9     		cbnz	r0, .L26
 388:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 363              		.loc 1 388 0
 364 00c8 144B     		ldr	r3, .L35
 365 00ca 4FF08052 		mov	r2, #268435456
 366 00ce 1A60     		str	r2, [r3]
 367              		.syntax unified
 368              	@ 388 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 369 00d0 BFF34F8F 		dsb
 370              	@ 0 "" 2
 371              	@ 388 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 372 00d4 BFF36F8F 		isb
 373              	@ 0 "" 2
 374              		.thumb
ARM GAS  /tmp/ccSV4HHU.s 			page 23


 375              		.syntax unified
 376              	.L26:
 399:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 377              		.loc 1 399 0
 378 00d8 FFF7FEFF 		bl	uxTaskResetEventItemValue
 379              	.LVL33:
 380 00dc 0546     		mov	r5, r0
 381              	.LVL34:
 401:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 382              		.loc 1 401 0
 383 00de 10F0007F 		tst	r0, #33554432
 384 00e2 10D1     		bne	.L27
 403:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 385              		.loc 1 403 0
 386 00e4 FFF7FEFF 		bl	vPortEnterCritical
 387              	.LVL35:
 406:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 388              		.loc 1 406 0
 389 00e8 3568     		ldr	r5, [r6]
 390              	.LVL36:
 391              	.LBB68:
 392              	.LBB69:
 660:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 393              		.loc 1 660 0
 394 00ea B8F1000F 		cmp	r8, #0
 395 00ee 0FD1     		bne	.L28
 664:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 396              		.loc 1 664 0
 397 00f0 2C42     		tst	r4, r5
 398 00f2 14BF     		ite	ne
 399 00f4 0123     		movne	r3, #1
 400 00f6 0023     		moveq	r3, #0
 401              	.L29:
 402              	.LVL37:
 403              	.LBE69:
 404              	.LBE68:
 410:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 405              		.loc 1 410 0
 406 00f8 1BB1     		cbz	r3, .L30
 412:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 407              		.loc 1 412 0
 408 00fa 17B1     		cbz	r7, .L30
 414:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 409              		.loc 1 414 0
 410 00fc 25EA0404 		bic	r4, r5, r4
 411              	.LVL38:
 412 0100 3460     		str	r4, [r6]
 413              	.L30:
 414              	.LVL39:
 427:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 415              		.loc 1 427 0
 416 0102 FFF7FEFF 		bl	vPortExitCritical
 417              	.LVL40:
 418              	.L27:
 435:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 419              		.loc 1 435 0
 420 0106 25F07F45 		bic	r5, r5, #-16777216
ARM GAS  /tmp/ccSV4HHU.s 			page 24


 421              	.LVL41:
 422              	.L11:
 443:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 423              		.loc 1 443 0
 424 010a 2846     		mov	r0, r5
 425 010c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 426              	.LVL42:
 427              	.L28:
 428              	.LBB71:
 429              	.LBB70:
 430              		.loc 1 677 0
 431 0110 34EA0503 		bics	r3, r4, r5
 432 0114 0CBF     		ite	eq
 433 0116 0123     		moveq	r3, #1
 434 0118 0023     		movne	r3, #0
 435 011a EDE7     		b	.L29
 436              	.L36:
 437              		.align	2
 438              	.L35:
 439 011c 04ED00E0 		.word	-536810236
 440              	.LBE70:
 441              	.LBE71:
 442              		.cfi_endproc
 443              	.LFE7:
 445              		.section	.text.xEventGroupClearBits,"ax",%progbits
 446              		.align	1
 447              		.global	xEventGroupClearBits
 448              		.syntax unified
 449              		.thumb
 450              		.thumb_func
 451              		.fpu fpv4-sp-d16
 453              	xEventGroupClearBits:
 454              	.LFB8:
 447:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 455              		.loc 1 447 0
 456              		.cfi_startproc
 457              		@ args = 0, pretend = 0, frame = 0
 458              		@ frame_needed = 0, uses_anonymous_args = 0
 459              	.LVL43:
 453:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 460              		.loc 1 453 0
 461 0000 40B9     		cbnz	r0, .L38
 462              	.LBB72:
 463              	.LBB73:
 464              		.loc 2 195 0
 465              		.syntax unified
 466              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 467 0002 4FF05003 			mov r3, #80												
 468 0006 83F31188 		msr basepri, r3											
 469 000a BFF36F8F 		isb														
 470 000e BFF34F8F 		dsb														
 471              	
 472              	@ 0 "" 2
 473              	.LVL44:
 474              		.thumb
 475              		.syntax unified
 476              	.L39:
ARM GAS  /tmp/ccSV4HHU.s 			page 25


 477 0012 FEE7     		b	.L39
 478              	.L38:
 479              	.LBE73:
 480              	.LBE72:
 447:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 481              		.loc 1 447 0
 482 0014 70B5     		push	{r4, r5, r6, lr}
 483              	.LCFI5:
 484              		.cfi_def_cfa_offset 16
 485              		.cfi_offset 4, -16
 486              		.cfi_offset 5, -12
 487              		.cfi_offset 6, -8
 488              		.cfi_offset 14, -4
 489 0016 0546     		mov	r5, r0
 454:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 490              		.loc 1 454 0
 491 0018 11F07F4F 		tst	r1, #-16777216
 492 001c 08D0     		beq	.L40
 493              	.LBB74:
 494              	.LBB75:
 495              		.loc 2 195 0
 496              		.syntax unified
 497              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 498 001e 4FF05003 			mov r3, #80												
 499 0022 83F31188 		msr basepri, r3											
 500 0026 BFF36F8F 		isb														
 501 002a BFF34F8F 		dsb														
 502              	
 503              	@ 0 "" 2
 504              	.LVL45:
 505              		.thumb
 506              		.syntax unified
 507              	.L41:
 508 002e FEE7     		b	.L41
 509              	.L40:
 510 0030 0C46     		mov	r4, r1
 511              	.LBE75:
 512              	.LBE74:
 456:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 513              		.loc 1 456 0
 514 0032 FFF7FEFF 		bl	vPortEnterCritical
 515              	.LVL46:
 462:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 516              		.loc 1 462 0
 517 0036 2E68     		ldr	r6, [r5]
 518              	.LVL47:
 465:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 519              		.loc 1 465 0
 520 0038 26EA0404 		bic	r4, r6, r4
 521              	.LVL48:
 522 003c 2C60     		str	r4, [r5]
 467:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 523              		.loc 1 467 0
 524 003e FFF7FEFF 		bl	vPortExitCritical
 525              	.LVL49:
 470:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 526              		.loc 1 470 0
ARM GAS  /tmp/ccSV4HHU.s 			page 26


 527 0042 3046     		mov	r0, r6
 528 0044 70BD     		pop	{r4, r5, r6, pc}
 529              		.cfi_endproc
 530              	.LFE8:
 532              		.section	.text.vEventGroupClearBitsCallback,"ax",%progbits
 533              		.align	1
 534              		.global	vEventGroupClearBitsCallback
 535              		.syntax unified
 536              		.thumb
 537              		.thumb_func
 538              		.fpu fpv4-sp-d16
 540              	vEventGroupClearBitsCallback:
 541              	.LFB14:
 651:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 542              		.loc 1 651 0
 543              		.cfi_startproc
 544              		@ args = 0, pretend = 0, frame = 0
 545              		@ frame_needed = 0, uses_anonymous_args = 0
 546              	.LVL50:
 547 0000 08B5     		push	{r3, lr}
 548              	.LCFI6:
 549              		.cfi_def_cfa_offset 8
 550              		.cfi_offset 3, -8
 551              		.cfi_offset 14, -4
 652:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 552              		.loc 1 652 0
 553 0002 FFF7FEFF 		bl	xEventGroupClearBits
 554              	.LVL51:
 653:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 555              		.loc 1 653 0
 556 0006 08BD     		pop	{r3, pc}
 557              		.cfi_endproc
 558              	.LFE14:
 560              		.section	.text.xEventGroupClearBitsFromISR,"ax",%progbits
 561              		.align	1
 562              		.global	xEventGroupClearBitsFromISR
 563              		.syntax unified
 564              		.thumb
 565              		.thumb_func
 566              		.fpu fpv4-sp-d16
 568              	xEventGroupClearBitsFromISR:
 569              	.LFB9:
 476:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		BaseType_t xReturn;
 570              		.loc 1 476 0
 571              		.cfi_startproc
 572              		@ args = 0, pretend = 0, frame = 0
 573              		@ frame_needed = 0, uses_anonymous_args = 0
 574              	.LVL52:
 575 0000 08B5     		push	{r3, lr}
 576              	.LCFI7:
 577              		.cfi_def_cfa_offset 8
 578              		.cfi_offset 3, -8
 579              		.cfi_offset 14, -4
 480:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 580              		.loc 1 480 0
 581 0002 0023     		movs	r3, #0
 582 0004 0A46     		mov	r2, r1
ARM GAS  /tmp/ccSV4HHU.s 			page 27


 583 0006 0146     		mov	r1, r0
 584              	.LVL53:
 585 0008 0148     		ldr	r0, .L48
 586              	.LVL54:
 587 000a FFF7FEFF 		bl	xTimerPendFunctionCallFromISR
 588              	.LVL55:
 483:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 589              		.loc 1 483 0
 590 000e 08BD     		pop	{r3, pc}
 591              	.L49:
 592              		.align	2
 593              	.L48:
 594 0010 00000000 		.word	vEventGroupClearBitsCallback
 595              		.cfi_endproc
 596              	.LFE9:
 598              		.section	.text.xEventGroupGetBitsFromISR,"ax",%progbits
 599              		.align	1
 600              		.global	xEventGroupGetBitsFromISR
 601              		.syntax unified
 602              		.thumb
 603              		.thumb_func
 604              		.fpu fpv4-sp-d16
 606              	xEventGroupGetBitsFromISR:
 607              	.LFB10:
 489:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 608              		.loc 1 489 0
 609              		.cfi_startproc
 610              		@ args = 0, pretend = 0, frame = 0
 611              		@ frame_needed = 0, uses_anonymous_args = 0
 612              		@ link register save eliminated.
 613              	.LVL56:
 614              	.LBB76:
 615              	.LBB77:
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 616              		.loc 2 211 0
 617              		.syntax unified
 618              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 619 0000 EFF31183 			mrs r3, basepri											
 620 0004 4FF05002 		mov r2, #80												
 621 0008 82F31188 		msr basepri, r2											
 622 000c BFF36F8F 		isb														
 623 0010 BFF34F8F 		dsb														
ARM GAS  /tmp/ccSV4HHU.s 			page 28


 624              	
 625              	@ 0 "" 2
 626              		.thumb
 627              		.syntax unified
 628              	.LBE77:
 629              	.LBE76:
 496:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 630              		.loc 1 496 0
 631 0014 0068     		ldr	r0, [r0]
 632              	.LVL57:
 633              	.LBB78:
 634              	.LBB79:
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 635              		.loc 2 229 0
 636              		.syntax unified
 637              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 638 0016 83F31188 			msr basepri, r3	
 639              	@ 0 "" 2
 640              		.thumb
 641              		.syntax unified
 642              	.LBE79:
 643              	.LBE78:
 501:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 644              		.loc 1 501 0
 645 001a 7047     		bx	lr
 646              		.cfi_endproc
 647              	.LFE10:
 649              		.section	.text.xEventGroupSetBits,"ax",%progbits
 650              		.align	1
 651              		.global	xEventGroupSetBits
 652              		.syntax unified
 653              		.thumb
 654              		.thumb_func
 655              		.fpu fpv4-sp-d16
 657              	xEventGroupSetBits:
 658              	.LFB11:
 505:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 659              		.loc 1 505 0
 660              		.cfi_startproc
 661              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccSV4HHU.s 			page 29


 662              		@ frame_needed = 0, uses_anonymous_args = 0
 663              	.LVL58:
 664 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 665              	.LCFI8:
 666              		.cfi_def_cfa_offset 24
 667              		.cfi_offset 3, -24
 668              		.cfi_offset 4, -20
 669              		.cfi_offset 5, -16
 670              		.cfi_offset 6, -12
 671              		.cfi_offset 7, -8
 672              		.cfi_offset 14, -4
 673              	.LVL59:
 515:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 674              		.loc 1 515 0
 675 0002 40B9     		cbnz	r0, .L52
 676              	.LBB80:
 677              	.LBB81:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 678              		.loc 2 195 0
 679              		.syntax unified
 680              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 681 0004 4FF05003 			mov r3, #80												
 682 0008 83F31188 		msr basepri, r3											
 683 000c BFF36F8F 		isb														
 684 0010 BFF34F8F 		dsb														
 685              	
 686              	@ 0 "" 2
 687              	.LVL60:
 688              		.thumb
 689              		.syntax unified
 690              	.L53:
 691 0014 FEE7     		b	.L53
 692              	.L52:
 693 0016 0446     		mov	r4, r0
 694              	.LBE81:
 695              	.LBE80:
 516:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 696              		.loc 1 516 0
 697 0018 11F07F4F 		tst	r1, #-16777216
 698 001c 08D0     		beq	.L54
 699              	.LBB82:
 700              	.LBB83:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 701              		.loc 2 195 0
 702              		.syntax unified
 703              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 704 001e 4FF05003 			mov r3, #80												
 705 0022 83F31188 		msr basepri, r3											
 706 0026 BFF36F8F 		isb														
 707 002a BFF34F8F 		dsb														
 708              	
 709              	@ 0 "" 2
 710              	.LVL61:
 711              		.thumb
 712              		.syntax unified
 713              	.L55:
 714 002e FEE7     		b	.L55
ARM GAS  /tmp/ccSV4HHU.s 			page 30


 715              	.L54:
 716 0030 0D46     		mov	r5, r1
 717              	.LVL62:
 718              	.LBE83:
 719              	.LBE82:
 519:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 720              		.loc 1 519 0
 721 0032 00F10C06 		add	r6, r0, #12
 722              	.LVL63:
 520:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 723              		.loc 1 520 0
 724 0036 FFF7FEFF 		bl	vTaskSuspendAll
 725              	.LVL64:
 524:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 726              		.loc 1 524 0
 727 003a 2069     		ldr	r0, [r4, #16]
 728              	.LVL65:
 527:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 729              		.loc 1 527 0
 730 003c 2368     		ldr	r3, [r4]
 731 003e 2B43     		orrs	r3, r3, r5
 732 0040 2360     		str	r3, [r4]
 530:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 733              		.loc 1 530 0
 734 0042 8642     		cmp	r6, r0
 735 0044 1CD0     		beq	.L62
 509:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 736              		.loc 1 509 0
 737 0046 0025     		movs	r5, #0
 738              	.LVL66:
 739 0048 06E0     		b	.L61
 740              	.LVL67:
 741              	.L57:
 552:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 742              		.loc 1 552 0
 743 004a 2168     		ldr	r1, [r4]
 744 004c 33EA0101 		bics	r1, r3, r1
 745 0050 0CD0     		beq	.L58
 746              	.LVL68:
 747              	.L59:
 748 0052 3846     		mov	r0, r7
 530:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 749              		.loc 1 530 0
 750 0054 BE42     		cmp	r6, r7
 751 0056 14D0     		beq	.L56
 752              	.LVL69:
 753              	.L61:
 532:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 754              		.loc 1 532 0
 755 0058 4768     		ldr	r7, [r0, #4]
 756              	.LVL70:
 533:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xMatchFound = pdFALSE;
 757              		.loc 1 533 0
 758 005a 0268     		ldr	r2, [r0]
 759              	.LVL71:
 538:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 760              		.loc 1 538 0
ARM GAS  /tmp/ccSV4HHU.s 			page 31


 761 005c 22F07F43 		bic	r3, r2, #-16777216
 762              	.LVL72:
 540:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 763              		.loc 1 540 0
 764 0060 12F0806F 		tst	r2, #67108864
 765 0064 F1D1     		bne	.L57
 543:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 766              		.loc 1 543 0
 767 0066 2168     		ldr	r1, [r4]
 768 0068 0B42     		tst	r3, r1
 769 006a F2D0     		beq	.L59
 770              	.L58:
 565:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 771              		.loc 1 565 0
 772 006c 12F0807F 		tst	r2, #16777216
 567:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 773              		.loc 1 567 0
 774 0070 18BF     		it	ne
 775 0072 1D43     		orrne	r5, r5, r3
 776              	.LVL73:
 579:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 777              		.loc 1 579 0
 778 0074 2168     		ldr	r1, [r4]
 779 0076 41F00071 		orr	r1, r1, #33554432
 780 007a FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 781              	.LVL74:
 782 007e E8E7     		b	.L59
 783              	.LVL75:
 784              	.L62:
 509:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 785              		.loc 1 509 0
 786 0080 0025     		movs	r5, #0
 787              	.LVL76:
 788              	.L56:
 590:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 789              		.loc 1 590 0
 790 0082 2368     		ldr	r3, [r4]
 791 0084 23EA0503 		bic	r3, r3, r5
 792 0088 2360     		str	r3, [r4]
 592:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 793              		.loc 1 592 0
 794 008a FFF7FEFF 		bl	xTaskResumeAll
 795              	.LVL77:
 595:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 796              		.loc 1 595 0
 797 008e 2068     		ldr	r0, [r4]
 798 0090 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 799              		.cfi_endproc
 800              	.LFE11:
 802              		.section	.text.xEventGroupSync,"ax",%progbits
 803              		.align	1
 804              		.global	xEventGroupSync
 805              		.syntax unified
 806              		.thumb
 807              		.thumb_func
 808              		.fpu fpv4-sp-d16
 810              	xEventGroupSync:
ARM GAS  /tmp/ccSV4HHU.s 			page 32


 811              	.LFB6:
 177:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 812              		.loc 1 177 0
 813              		.cfi_startproc
 814              		@ args = 0, pretend = 0, frame = 0
 815              		@ frame_needed = 0, uses_anonymous_args = 0
 816              	.LVL78:
 183:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 817              		.loc 1 183 0
 818 0000 12F07F4F 		tst	r2, #-16777216
 819 0004 08D0     		beq	.L66
 820              	.LBB84:
 821              	.LBB85:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 822              		.loc 2 195 0
 823              		.syntax unified
 824              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 825 0006 4FF05003 			mov r3, #80												
 826 000a 83F31188 		msr basepri, r3											
 827 000e BFF36F8F 		isb														
 828 0012 BFF34F8F 		dsb														
 829              	
 830              	@ 0 "" 2
 831              	.LVL79:
 832              		.thumb
 833              		.syntax unified
 834              	.L67:
 835 0016 FEE7     		b	.L67
 836              	.LVL80:
 837              	.L66:
 838              	.LBE85:
 839              	.LBE84:
 177:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 840              		.loc 1 177 0
 841 0018 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 842              	.LCFI9:
 843              		.cfi_def_cfa_offset 24
 844              		.cfi_offset 4, -24
 845              		.cfi_offset 5, -20
 846              		.cfi_offset 6, -16
 847              		.cfi_offset 7, -12
 848              		.cfi_offset 8, -8
 849              		.cfi_offset 14, -4
 850 001c 0646     		mov	r6, r0
 851 001e 0C46     		mov	r4, r1
 852 0020 1546     		mov	r5, r2
 853 0022 1F46     		mov	r7, r3
 184:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 854              		.loc 1 184 0
 855 0024 42B9     		cbnz	r2, .L68
 856              	.LBB86:
 857              	.LBB87:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 858              		.loc 2 195 0
 859              		.syntax unified
 860              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 861 0026 4FF05003 			mov r3, #80												
ARM GAS  /tmp/ccSV4HHU.s 			page 33


 862 002a 83F31188 		msr basepri, r3											
 863 002e BFF36F8F 		isb														
 864 0032 BFF34F8F 		dsb														
 865              	
 866              	@ 0 "" 2
 867              	.LVL81:
 868              		.thumb
 869              		.syntax unified
 870              	.L69:
 871 0036 FEE7     		b	.L69
 872              	.LVL82:
 873              	.L68:
 874              	.LBE87:
 875              	.LBE86:
 187:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 876              		.loc 1 187 0
 877 0038 FFF7FEFF 		bl	xTaskGetSchedulerState
 878              	.LVL83:
 879 003c 50B9     		cbnz	r0, .L70
 187:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 880              		.loc 1 187 0 is_stmt 0 discriminator 2
 881 003e 002F     		cmp	r7, #0
 882 0040 47D0     		beq	.L71
 883              	.LBB88:
 884              	.LBB89:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 885              		.loc 2 195 0 is_stmt 1
 886              		.syntax unified
 887              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 888 0042 4FF05003 			mov r3, #80												
 889 0046 83F31188 		msr basepri, r3											
 890 004a BFF36F8F 		isb														
 891 004e BFF34F8F 		dsb														
 892              	
 893              	@ 0 "" 2
 894              	.LVL84:
 895              		.thumb
 896              		.syntax unified
 897              	.L72:
 898 0052 FEE7     		b	.L72
 899              	.L70:
 900              	.LBE89:
 901              	.LBE88:
 191:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 902              		.loc 1 191 0
 903 0054 FFF7FEFF 		bl	vTaskSuspendAll
 904              	.LVL85:
 193:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 905              		.loc 1 193 0
 906 0058 D6F80080 		ldr	r8, [r6]
 907              	.LVL86:
 195:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 908              		.loc 1 195 0
 909 005c 2146     		mov	r1, r4
 910 005e 3046     		mov	r0, r6
 911 0060 FFF7FEFF 		bl	xEventGroupSetBits
 912              	.LVL87:
ARM GAS  /tmp/ccSV4HHU.s 			page 34


 197:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 913              		.loc 1 197 0
 914 0064 48EA0404 		orr	r4, r8, r4
 915              	.LVL88:
 916 0068 35EA0403 		bics	r3, r5, r4
 917 006c 06D1     		bne	.L73
 918              	.LVL89:
 919              	.L80:
 204:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 920              		.loc 1 204 0
 921 006e 3368     		ldr	r3, [r6]
 922 0070 23EA0503 		bic	r3, r3, r5
 923 0074 3360     		str	r3, [r6]
 924              	.LVL90:
 925              	.L74:
 234:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 926              		.loc 1 234 0
 927 0076 FFF7FEFF 		bl	xTaskResumeAll
 928              	.LVL91:
 929 007a 1CE0     		b	.L65
 930              	.LVL92:
 931              	.L73:
 210:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 932              		.loc 1 210 0
 933 007c F7B1     		cbz	r7, .L75
 217:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 934              		.loc 1 217 0
 935 007e 3A46     		mov	r2, r7
 936 0080 45F0A061 		orr	r1, r5, #83886080
 937 0084 301D     		adds	r0, r6, #4
 938 0086 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 939              	.LVL93:
 234:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 940              		.loc 1 234 0
 941 008a FFF7FEFF 		bl	xTaskResumeAll
 942              	.LVL94:
 238:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 943              		.loc 1 238 0
 944 008e B8B1     		cbz	r0, .L76
 945              	.L77:
 251:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 946              		.loc 1 251 0
 947 0090 FFF7FEFF 		bl	uxTaskResetEventItemValue
 948              	.LVL95:
 949 0094 0446     		mov	r4, r0
 950              	.LVL96:
 253:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 951              		.loc 1 253 0
 952 0096 10F0007F 		tst	r0, #33554432
 953 009a 0AD1     		bne	.L78
 256:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 954              		.loc 1 256 0
 955 009c FFF7FEFF 		bl	vPortEnterCritical
 956              	.LVL97:
 258:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 957              		.loc 1 258 0
 958 00a0 3468     		ldr	r4, [r6]
ARM GAS  /tmp/ccSV4HHU.s 			page 35


 959              	.LVL98:
 264:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 960              		.loc 1 264 0
 961 00a2 35EA0403 		bics	r3, r5, r4
 266:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 962              		.loc 1 266 0
 963 00a6 04BF     		itt	eq
 964 00a8 24EA0505 		biceq	r5, r4, r5
 965              	.LVL99:
 966 00ac 3560     		streq	r5, [r6]
 273:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 967              		.loc 1 273 0
 968 00ae FFF7FEFF 		bl	vPortExitCritical
 969              	.LVL100:
 970              	.L78:
 284:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 971              		.loc 1 284 0
 972 00b2 24F07F44 		bic	r4, r4, #-16777216
 973              	.LVL101:
 974              	.L65:
 293:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 975              		.loc 1 293 0
 976 00b6 2046     		mov	r0, r4
 977 00b8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 978              	.LVL102:
 979              	.L75:
 229:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 980              		.loc 1 229 0
 981 00bc 3468     		ldr	r4, [r6]
 982              	.LVL103:
 983 00be DAE7     		b	.L74
 984              	.LVL104:
 985              	.L76:
 240:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 986              		.loc 1 240 0
 987 00c0 0B4B     		ldr	r3, .L85
 988 00c2 4FF08052 		mov	r2, #268435456
 989 00c6 1A60     		str	r2, [r3]
 990              		.syntax unified
 991              	@ 240 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 992 00c8 BFF34F8F 		dsb
 993              	@ 0 "" 2
 994              	@ 240 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 995 00cc BFF36F8F 		isb
 996              	@ 0 "" 2
 997              		.thumb
 998              		.syntax unified
 999 00d0 DEE7     		b	.L77
 1000              	.LVL105:
 1001              	.L71:
 191:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 1002              		.loc 1 191 0
 1003 00d2 FFF7FEFF 		bl	vTaskSuspendAll
 1004              	.LVL106:
 193:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 1005              		.loc 1 193 0
 1006 00d6 3768     		ldr	r7, [r6]
ARM GAS  /tmp/ccSV4HHU.s 			page 36


 1007              	.LVL107:
 195:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 1008              		.loc 1 195 0
 1009 00d8 2146     		mov	r1, r4
 1010 00da 3046     		mov	r0, r6
 1011 00dc FFF7FEFF 		bl	xEventGroupSetBits
 1012              	.LVL108:
 197:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 1013              		.loc 1 197 0
 1014 00e0 3C43     		orrs	r4, r4, r7
 1015              	.LVL109:
 1016 00e2 05EA0403 		and	r3, r5, r4
 1017 00e6 9D42     		cmp	r5, r3
 1018 00e8 E8D1     		bne	.L75
 1019 00ea 1D46     		mov	r5, r3
 1020              	.LVL110:
 1021 00ec BFE7     		b	.L80
 1022              	.L86:
 1023 00ee 00BF     		.align	2
 1024              	.L85:
 1025 00f0 04ED00E0 		.word	-536810236
 1026              		.cfi_endproc
 1027              	.LFE6:
 1029              		.section	.text.vEventGroupSetBitsCallback,"ax",%progbits
 1030              		.align	1
 1031              		.global	vEventGroupSetBitsCallback
 1032              		.syntax unified
 1033              		.thumb
 1034              		.thumb_func
 1035              		.fpu fpv4-sp-d16
 1037              	vEventGroupSetBitsCallback:
 1038              	.LFB13:
 643:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 1039              		.loc 1 643 0
 1040              		.cfi_startproc
 1041              		@ args = 0, pretend = 0, frame = 0
 1042              		@ frame_needed = 0, uses_anonymous_args = 0
 1043              	.LVL111:
 1044 0000 08B5     		push	{r3, lr}
 1045              	.LCFI10:
 1046              		.cfi_def_cfa_offset 8
 1047              		.cfi_offset 3, -8
 1048              		.cfi_offset 14, -4
 644:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 1049              		.loc 1 644 0
 1050 0002 FFF7FEFF 		bl	xEventGroupSetBits
 1051              	.LVL112:
 645:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 1052              		.loc 1 645 0
 1053 0006 08BD     		pop	{r3, pc}
 1054              		.cfi_endproc
 1055              	.LFE13:
 1057              		.section	.text.vEventGroupDelete,"ax",%progbits
 1058              		.align	1
 1059              		.global	vEventGroupDelete
 1060              		.syntax unified
 1061              		.thumb
ARM GAS  /tmp/ccSV4HHU.s 			page 37


 1062              		.thumb_func
 1063              		.fpu fpv4-sp-d16
 1065              	vEventGroupDelete:
 1066              	.LFB12:
 599:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 1067              		.loc 1 599 0
 1068              		.cfi_startproc
 1069              		@ args = 0, pretend = 0, frame = 0
 1070              		@ frame_needed = 0, uses_anonymous_args = 0
 1071              	.LVL113:
 1072 0000 70B5     		push	{r4, r5, r6, lr}
 1073              	.LCFI11:
 1074              		.cfi_def_cfa_offset 16
 1075              		.cfi_offset 4, -16
 1076              		.cfi_offset 5, -12
 1077              		.cfi_offset 6, -8
 1078              		.cfi_offset 14, -4
 1079 0002 0446     		mov	r4, r0
 1080              	.LVL114:
 603:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 1081              		.loc 1 603 0
 1082 0004 FFF7FEFF 		bl	vTaskSuspendAll
 1083              	.LVL115:
 607:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 1084              		.loc 1 607 0
 1085 0008 6368     		ldr	r3, [r4, #4]
 1086 000a BBB1     		cbz	r3, .L90
 611:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO
 1087              		.loc 1 611 0
 1088 000c 2069     		ldr	r0, [r4, #16]
 1089 000e 04F10C05 		add	r5, r4, #12
 1090 0012 A842     		cmp	r0, r5
 1091 0014 09D0     		beq	.L91
 612:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 1092              		.loc 1 612 0
 1093 0016 4FF00076 		mov	r6, #33554432
 1094              	.L92:
 1095 001a 3146     		mov	r1, r6
 1096 001c FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 1097              	.LVL116:
 607:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 1098              		.loc 1 607 0
 1099 0020 6368     		ldr	r3, [r4, #4]
 1100 0022 5BB1     		cbz	r3, .L90
 611:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO
 1101              		.loc 1 611 0
 1102 0024 2069     		ldr	r0, [r4, #16]
 1103 0026 A842     		cmp	r0, r5
 1104 0028 F7D1     		bne	.L92
 1105              	.L91:
 1106              	.LBB90:
 1107              	.LBB91:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1108              		.loc 2 195 0
 1109              		.syntax unified
 1110              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1111 002a 4FF05003 			mov r3, #80												
ARM GAS  /tmp/ccSV4HHU.s 			page 38


 1112 002e 83F31188 		msr basepri, r3											
 1113 0032 BFF36F8F 		isb														
 1114 0036 BFF34F8F 		dsb														
 1115              	
 1116              	@ 0 "" 2
 1117              	.LVL117:
 1118              		.thumb
 1119              		.syntax unified
 1120              	.L93:
 1121 003a FEE7     		b	.L93
 1122              	.L90:
 1123              	.LBE91:
 1124              	.LBE90:
 625:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 1125              		.loc 1 625 0
 1126 003c 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 1127 003e 13B1     		cbz	r3, .L98
 1128              	.L95:
 636:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 1129              		.loc 1 636 0
 1130 0040 FFF7FEFF 		bl	xTaskResumeAll
 1131              	.LVL118:
 637:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 1132              		.loc 1 637 0
 1133 0044 70BD     		pop	{r4, r5, r6, pc}
 1134              	.LVL119:
 1135              	.L98:
 627:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 1136              		.loc 1 627 0
 1137 0046 2046     		mov	r0, r4
 1138 0048 FFF7FEFF 		bl	vPortFree
 1139              	.LVL120:
 1140 004c F8E7     		b	.L95
 1141              		.cfi_endproc
 1142              	.LFE12:
 1144              		.section	.text.xEventGroupSetBitsFromISR,"ax",%progbits
 1145              		.align	1
 1146              		.global	xEventGroupSetBitsFromISR
 1147              		.syntax unified
 1148              		.thumb
 1149              		.thumb_func
 1150              		.fpu fpv4-sp-d16
 1152              	xEventGroupSetBitsFromISR:
 1153              	.LFB16:
 678:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 679:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
 680:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 681:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 682:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 683:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 684:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 685:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 686:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 687:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return xWaitConditionMet;
 688:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 689:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 690:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccSV4HHU.s 			page 39


 691:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 692:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 693:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSe
 694:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 1154              		.loc 1 694 0
 1155              		.cfi_startproc
 1156              		@ args = 0, pretend = 0, frame = 0
 1157              		@ frame_needed = 0, uses_anonymous_args = 0
 1158              	.LVL121:
 1159 0000 08B5     		push	{r3, lr}
 1160              	.LCFI12:
 1161              		.cfi_def_cfa_offset 8
 1162              		.cfi_offset 3, -8
 1163              		.cfi_offset 14, -4
 695:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	BaseType_t xReturn;
 696:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 697:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
 698:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( ui
 1164              		.loc 1 698 0
 1165 0002 1346     		mov	r3, r2
 1166 0004 0A46     		mov	r2, r1
 1167              	.LVL122:
 1168 0006 0146     		mov	r1, r0
 1169              	.LVL123:
 1170 0008 0148     		ldr	r0, .L101
 1171              	.LVL124:
 1172 000a FFF7FEFF 		bl	xTimerPendFunctionCallFromISR
 1173              	.LVL125:
 699:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 700:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return xReturn;
 701:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 1174              		.loc 1 701 0
 1175 000e 08BD     		pop	{r3, pc}
 1176              	.L102:
 1177              		.align	2
 1178              	.L101:
 1179 0010 00000000 		.word	vEventGroupSetBitsCallback
 1180              		.cfi_endproc
 1181              	.LFE16:
 1183              		.section	.text.uxEventGroupGetNumber,"ax",%progbits
 1184              		.align	1
 1185              		.global	uxEventGroupGetNumber
 1186              		.syntax unified
 1187              		.thumb
 1188              		.thumb_func
 1189              		.fpu fpv4-sp-d16
 1191              	uxEventGroupGetNumber:
 1192              	.LFB17:
 702:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif
 704:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 705:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 706:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if (configUSE_TRACE_FACILITY == 1)
 707:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 708:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	UBaseType_t uxEventGroupGetNumber( void* xEventGroup )
 709:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 1193              		.loc 1 709 0
ARM GAS  /tmp/ccSV4HHU.s 			page 40


 1194              		.cfi_startproc
 1195              		@ args = 0, pretend = 0, frame = 0
 1196              		@ frame_needed = 0, uses_anonymous_args = 0
 1197              		@ link register save eliminated.
 1198              	.LVL126:
 710:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	UBaseType_t xReturn;
 711:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 712:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 713:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xEventGroup == NULL )
 1199              		.loc 1 713 0
 1200 0000 08B1     		cbz	r0, .L105
 714:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 715:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xReturn = 0;
 716:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 717:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 718:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 719:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xReturn = pxEventBits->uxEventGroupNumber;
 1201              		.loc 1 719 0
 1202 0002 8069     		ldr	r0, [r0, #24]
 1203              	.LVL127:
 1204 0004 7047     		bx	lr
 1205              	.LVL128:
 1206              	.L105:
 715:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 1207              		.loc 1 715 0
 1208 0006 0020     		movs	r0, #0
 1209              	.LVL129:
 720:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 721:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 722:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return xReturn;
 723:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 1210              		.loc 1 723 0
 1211 0008 7047     		bx	lr
 1212              		.cfi_endproc
 1213              	.LFE17:
 1215              		.section	.text.vEventGroupSetNumber,"ax",%progbits
 1216              		.align	1
 1217              		.global	vEventGroupSetNumber
 1218              		.syntax unified
 1219              		.thumb
 1220              		.thumb_func
 1221              		.fpu fpv4-sp-d16
 1223              	vEventGroupSetNumber:
 1224              	.LFB18:
 724:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif /* configUSE_TRACE_FACILITY */
 726:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 727:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 729:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 730:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	void vEventGroupSetNumber( void * xEventGroup, UBaseType_t uxEventGroupNumber )
 731:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 1225              		.loc 1 731 0
 1226              		.cfi_startproc
 1227              		@ args = 0, pretend = 0, frame = 0
 1228              		@ frame_needed = 0, uses_anonymous_args = 0
 1229              		@ link register save eliminated.
ARM GAS  /tmp/ccSV4HHU.s 			page 41


 1230              	.LVL130:
 732:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		( ( EventGroup_t * ) xEventGroup )->uxEventGroupNumber = uxEventGroupNumber;
 1231              		.loc 1 732 0
 1232 0000 8161     		str	r1, [r0, #24]
 733:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 1233              		.loc 1 733 0
 1234 0002 7047     		bx	lr
 1235              		.cfi_endproc
 1236              	.LFE18:
 1238              		.text
 1239              	.Letext0:
 1240              		.file 3 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 1241              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 1242              		.file 5 "/usr/include/newlib/sys/lock.h"
 1243              		.file 6 "/usr/include/newlib/sys/_types.h"
 1244              		.file 7 "/usr/include/newlib/sys/reent.h"
 1245              		.file 8 "/usr/include/newlib/stdlib.h"
 1246              		.file 9 "/usr/include/newlib/sys/_stdint.h"
 1247              		.file 10 "Inc/FreeRTOSConfig.h"
 1248              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 1249              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 1250              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h"
 1251              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/timers.h"
 1252              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 1253              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
ARM GAS  /tmp/ccSV4HHU.s 			page 42


DEFINED SYMBOLS
                            *ABS*:0000000000000000 event_groups.c
     /tmp/ccSV4HHU.s:18     .text.xEventGroupCreateStatic:0000000000000000 $t
     /tmp/ccSV4HHU.s:25     .text.xEventGroupCreateStatic:0000000000000000 xEventGroupCreateStatic
     /tmp/ccSV4HHU.s:115    .text.xEventGroupCreate:0000000000000000 $t
     /tmp/ccSV4HHU.s:122    .text.xEventGroupCreate:0000000000000000 xEventGroupCreate
     /tmp/ccSV4HHU.s:159    .text.xEventGroupWaitBits:0000000000000000 $t
     /tmp/ccSV4HHU.s:166    .text.xEventGroupWaitBits:0000000000000000 xEventGroupWaitBits
     /tmp/ccSV4HHU.s:439    .text.xEventGroupWaitBits:000000000000011c $d
     /tmp/ccSV4HHU.s:446    .text.xEventGroupClearBits:0000000000000000 $t
     /tmp/ccSV4HHU.s:453    .text.xEventGroupClearBits:0000000000000000 xEventGroupClearBits
     /tmp/ccSV4HHU.s:533    .text.vEventGroupClearBitsCallback:0000000000000000 $t
     /tmp/ccSV4HHU.s:540    .text.vEventGroupClearBitsCallback:0000000000000000 vEventGroupClearBitsCallback
     /tmp/ccSV4HHU.s:561    .text.xEventGroupClearBitsFromISR:0000000000000000 $t
     /tmp/ccSV4HHU.s:568    .text.xEventGroupClearBitsFromISR:0000000000000000 xEventGroupClearBitsFromISR
     /tmp/ccSV4HHU.s:594    .text.xEventGroupClearBitsFromISR:0000000000000010 $d
     /tmp/ccSV4HHU.s:599    .text.xEventGroupGetBitsFromISR:0000000000000000 $t
     /tmp/ccSV4HHU.s:606    .text.xEventGroupGetBitsFromISR:0000000000000000 xEventGroupGetBitsFromISR
     /tmp/ccSV4HHU.s:650    .text.xEventGroupSetBits:0000000000000000 $t
     /tmp/ccSV4HHU.s:657    .text.xEventGroupSetBits:0000000000000000 xEventGroupSetBits
     /tmp/ccSV4HHU.s:803    .text.xEventGroupSync:0000000000000000 $t
     /tmp/ccSV4HHU.s:810    .text.xEventGroupSync:0000000000000000 xEventGroupSync
     /tmp/ccSV4HHU.s:1025   .text.xEventGroupSync:00000000000000f0 $d
     /tmp/ccSV4HHU.s:1030   .text.vEventGroupSetBitsCallback:0000000000000000 $t
     /tmp/ccSV4HHU.s:1037   .text.vEventGroupSetBitsCallback:0000000000000000 vEventGroupSetBitsCallback
     /tmp/ccSV4HHU.s:1058   .text.vEventGroupDelete:0000000000000000 $t
     /tmp/ccSV4HHU.s:1065   .text.vEventGroupDelete:0000000000000000 vEventGroupDelete
     /tmp/ccSV4HHU.s:1145   .text.xEventGroupSetBitsFromISR:0000000000000000 $t
     /tmp/ccSV4HHU.s:1152   .text.xEventGroupSetBitsFromISR:0000000000000000 xEventGroupSetBitsFromISR
     /tmp/ccSV4HHU.s:1179   .text.xEventGroupSetBitsFromISR:0000000000000010 $d
     /tmp/ccSV4HHU.s:1184   .text.uxEventGroupGetNumber:0000000000000000 $t
     /tmp/ccSV4HHU.s:1191   .text.uxEventGroupGetNumber:0000000000000000 uxEventGroupGetNumber
     /tmp/ccSV4HHU.s:1216   .text.vEventGroupSetNumber:0000000000000000 $t
     /tmp/ccSV4HHU.s:1223   .text.vEventGroupSetNumber:0000000000000000 vEventGroupSetNumber

UNDEFINED SYMBOLS
vListInitialise
pvPortMalloc
xTaskGetSchedulerState
vTaskSuspendAll
xTaskResumeAll
vTaskPlaceOnUnorderedEventList
uxTaskResetEventItemValue
vPortEnterCritical
vPortExitCritical
xTimerPendFunctionCallFromISR
vTaskRemoveFromUnorderedEventList
vPortFree
