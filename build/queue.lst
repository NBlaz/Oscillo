ARM GAS  /tmp/ccMGA4O7.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"queue.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvIsQueueEmpty,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	prvIsQueueEmpty:
  25              	.LFB36:
  26              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/queue.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * FreeRTOS Kernel V10.0.1
   3:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include <stdlib.h>
  29:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include <string.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  31:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
ARM GAS  /tmp/ccMGA4O7.s 			page 2


  33:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** task.h is included from an application file. */
  34:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include "FreeRTOS.h"
  37:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include "task.h"
  38:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include "queue.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  40:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  41:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#include "croutine.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
  43:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  44:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  45:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  46:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** header files above, but not in this file, in order to generate the correct
  47:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** privileged Vs unprivileged linkage and placement. */
  48:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  49:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  50:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  51:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  52:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  53:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  54:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  56:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  57:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  58:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
  59:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** pcTail pointer actually points to the mutex holder (if any).  Map alternative
  60:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** names to the pcHead and pcTail structure members to ensure the readability of
  61:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** the code is maintained despite this dual use of two structure members.  An
  62:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** alternative implementation would be to use a union, but use of a union is
  63:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** against the coding standard (although an exception to the standard has been
  64:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** permitted where the dual use also significantly changes the type of the
  65:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** structure member). */
  66:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define pxMutexHolder					pcTail
  67:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define uxQueueType						pcHead
  68:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
  69:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  71:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** zero. */
  72:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
  73:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
  74:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  75:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_PREEMPTION == 0 )
  76:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  77:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	performed just because a higher priority task has been woken. */
  78:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
  79:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #else
  80:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  81:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
  82:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  83:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
  84:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Definition of the queue used by the scheduler.
  85:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
  86:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * rationale: http://www.freertos.org/Embedded-RTOS-Queues.html
  87:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
  88:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** typedef struct QueueDefinition
  89:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
ARM GAS  /tmp/ccMGA4O7.s 			page 3


  90:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
  91:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
  92:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
  93:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  94:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	union							/* Use of a union is an exception to the coding standard to ensure two mutually exclus
  95:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
  96:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		int8_t *pcReadFrom;			/*< Points to the last place that a queued item was read from when the stru
  97:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex h
  98:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} u;
  99:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 100:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 101:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 102:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 103:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 104:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 105:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 106:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 107:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 108:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 109:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 110:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 111:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 112:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 113:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 115:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 116:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 117:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 118:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 119:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		UBaseType_t uxQueueNumber;
 120:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uint8_t ucQueueType;
 121:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 122:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 123:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } xQUEUE;
 124:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 125:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 126:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** name below to enable the use of older kernel aware debuggers. */
 127:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** typedef xQUEUE Queue_t;
 128:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 130:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 132:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 133:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 134:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 135:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 136:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 137:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 138:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 139:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	more user friendly. */
 140:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 141:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 142:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 143:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		QueueHandle_t xHandle;
 144:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} xQueueRegistryItem;
 145:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 146:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
ARM GAS  /tmp/ccMGA4O7.s 			page 4


 147:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 148:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	debuggers. */
 149:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 150:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 152:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 153:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	array position being vacant. */
 154:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 155:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 156:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 157:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 159:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 160:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 161:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 162:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 163:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 164:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 165:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 166:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 167:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 168:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 169:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 170:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
 171:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 172:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 173:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 174:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 175:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 176:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 177:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
 178:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 179:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 180:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 181:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 182:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 183:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 184:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * back of the queue.
 185:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 186:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 187:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 188:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 189:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Copies an item out of a queue.
 190:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 191:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 192:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 194:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/*
 195:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 196:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * the queue set that the queue contains data.
 197:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 */
 198:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCop
 199:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 200:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 201:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 202:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 203:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * dynamically to fill in the structure's members.
ARM GAS  /tmp/ccMGA4O7.s 			page 5


 204:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 205:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 206:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 208:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 209:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 210:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * as a mutex.
 211:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 212:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 213:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue ) PRIVILEGED_FUNCTION;
 214:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 215:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 216:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 217:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/*
 218:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * If a task waiting for a mutex causes the mutex holder to inherit a
 219:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * priority, but the waiting task times out, then the holder should
 220:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * disinherit the priority - but only down to the highest priority of any
 221:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * other tasks that are waiting for the same mutex.  This function returns
 222:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * that priority.
 223:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 */
 224:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVILEGE
 225:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 226:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 227:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 228:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 229:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 230:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * accessing the queue event lists.
 231:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 232:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define prvLockQueue( pxQueue )								\
 233:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();									\
 234:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{														\
 235:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 236:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{													\
 237:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 238:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}													\
 239:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 240:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{													\
 241:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 242:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}													\
 243:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}														\
 244:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL()
 245:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 246:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 248:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 249:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 250:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 251:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 252:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 253:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 254:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 255:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 256:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 257:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 258:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 260:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
ARM GAS  /tmp/ccMGA4O7.s 			page 6


 261:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 262:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xNewQueue == pdFALSE )
 263:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 265:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 266:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 267:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the queue, then one should be unblocked as after this function exits
 268:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			it will be possible to write to it. */
 269:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 270:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 271:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 272:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 273:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 274:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 275:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
 276:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 277:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 278:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 279:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 280:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 282:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 283:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 285:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 286:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 287:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Ensure the event queues start in the correct state. */
 288:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 290:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 291:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 292:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 293:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 294:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 295:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	versions. */
 296:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return pdPASS;
 297:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 298:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 299:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 300:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 301:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 302:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 303:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 304:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 306:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 307:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 308:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 309:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		supplied. */
 310:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( pxStaticQueue != NULL );
 311:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 312:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 313:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		should not be provided if the item size is 0. */
 314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 315:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 316:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 317:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#if( configASSERT_DEFINED == 1 )
ARM GAS  /tmp/ccMGA4O7.s 			page 7


 318:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 319:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 320:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 321:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the real queue and semaphore structures. */
 322:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 323:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 324:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 325:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#endif /* configASSERT_DEFINED */
 326:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 327:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 328:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		The address of a statically allocated storage area was also passed in
 329:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		but is already set. */
 330:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are d
 331:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 332:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 333:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 334:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 335:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 336:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 337:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				note this queue was allocated statically in case the queue is
 338:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				later deleted. */
 339:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 340:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 341:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 342:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 343:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 344:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 345:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 346:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 347:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 348:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 349:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 350:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 351:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 352:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 353:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 354:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 355:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 356:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 357:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 358:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 359:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 360:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 361:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	size_t xQueueSizeInBytes;
 362:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uint8_t *pucQueueStorage;
 363:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 365:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 366:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 367:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 368:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* There is not going to be a queue storage area. */
 369:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) 0;
 370:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 371:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 372:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 373:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Allocate enough space to hold the maximum number of items that
 374:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			can be in the queue at any time. */
ARM GAS  /tmp/ccMGA4O7.s 			page 8


 375:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as t
 376:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 377:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 378:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 379:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 380:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 381:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 382:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 383:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			storage area. */
 384:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 385:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 386:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 387:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 388:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Queues can be created either statically or dynamically, so
 389:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				note this task was created dynamically in case it is later
 390:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				deleted. */
 391:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 392:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 393:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 394:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 396:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 397:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 398:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 399:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 400:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 401:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 402:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 403:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 404:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 405:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 406:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 407:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 408:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 409:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 410:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 411:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 412:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	( void ) ucQueueType;
 413:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 414:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 415:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 416:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 417:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 418:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 419:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		value that is known to be within the memory map. */
 420:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 421:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 422:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
 423:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 424:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Set the head to the start of the queue storage area. */
 425:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 426:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 427:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 428:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Initialise the queue members as described where the queue type is
 429:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	defined. */
 430:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 431:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
ARM GAS  /tmp/ccMGA4O7.s 			page 9


 432:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 433:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 434:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 435:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 436:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 437:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 438:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 439:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 440:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 441:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 442:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 443:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 444:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 445:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 446:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 447:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 448:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 449:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 450:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 451:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 452:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 453:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 454:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 455:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 456:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The queue create function will set all the queue structure members
 457:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			correctly for a generic queue, but this function is creating a
 458:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 459:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			in particular the information required for priority inheritance. */
 460:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 461:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 462:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 463:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* In case this is a recursive mutex. */
 464:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->u.uxRecursiveCallCount = 0;
 465:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 466:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 467:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 468:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Start with the semaphore in the expected state. */
 469:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 470:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 471:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 472:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 473:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_MUTEX_FAILED();
 474:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 475:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 476:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 477:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 478:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 479:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 480:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 481:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 482:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 483:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 484:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 485:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 486:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 487:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 488:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
ARM GAS  /tmp/ccMGA4O7.s 			page 10


 489:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 490:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 491:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 492:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 493:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 494:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 495:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 496:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 497:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 498:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 499:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 500:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 501:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 502:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 503:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 504:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 505:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) ucQueueType;
 506:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 507:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQ
 508:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 509:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 510:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 511:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 512:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 513:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 514:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 515:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 516:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 517:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 518:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void* xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 519:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 520:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void *pxReturn;
 521:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 522:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 523:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 524:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 525:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		identity of the mutex holder, as the holder may change between the
 526:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		following critical section exiting and the function returning. */
 527:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 528:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 529:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 530:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 531:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 532:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 533:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 534:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxReturn = NULL;
 536:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 537:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 538:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 539:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 540:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxReturn;
 541:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 542:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 543:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 544:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 545:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccMGA4O7.s 			page 11


 546:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 547:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 548:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void* xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 549:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 550:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void *pxReturn;
 551:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 552:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( xSemaphore );
 553:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 554:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Mutexes cannot be used in interrupt service routines, so the mutex
 555:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		holder should not change in an ISR, and therefore a critical section is
 556:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		not required here. */
 557:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 558:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 559:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 560:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 561:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 562:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 563:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxReturn = NULL;
 564:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 565:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 566:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxReturn;
 567:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 568:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 569:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 570:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 571:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 572:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 573:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 574:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 575:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 576:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 577:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 578:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 579:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( pxMutex );
 580:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 581:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 582:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 583:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 584:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		this is the only condition we are interested in it does not matter if
 585:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 586:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 587:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redunda
 588:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 589:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 590:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 591:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 592:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 593:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 594:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 595:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			uxRecursiveCallCount member. */
 596:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )--;
 597:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 598:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Has the recursive call count unwound to 0? */
 599:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 600:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 601:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 602:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				task that might be waiting to access the mutex. */
ARM GAS  /tmp/ccMGA4O7.s 			page 12


 603:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 604:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 605:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 606:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 607:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 608:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 609:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 610:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 611:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 612:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 613:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 614:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 615:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			holder. */
 616:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
 617:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 618:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 619:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 620:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 621:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
 622:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 623:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 624:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 625:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 626:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 627:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 628:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 629:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 630:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 631:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 632:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 633:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 634:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( pxMutex );
 635:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 637:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xQueueGiveMutexRecursive(). */
 638:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 639:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 640:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 641:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not r
 642:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 643:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )++;
 644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 645:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 646:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 647:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 648:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 649:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 650:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 651:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 652:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			before reaching here. */
 653:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xReturn != pdFAIL )
 654:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 655:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( pxMutex->u.uxRecursiveCallCount )++;
 656:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 657:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 658:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 659:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
ARM GAS  /tmp/ccMGA4O7.s 			page 13


 660:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 661:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 662:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 663:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
 664:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 665:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 666:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 667:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 668:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 669:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 670:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 671:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 672:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 673:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 674:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 675:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 676:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 677:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 678:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 679:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 680:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xHandle != NULL )
 681:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 682:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 683:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 684:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 685:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 686:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 687:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 688:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 689:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 690:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 691:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xHandle;
 692:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 693:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 694:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 695:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 696:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 697:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 698:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 699:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 700:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 701:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 702:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 704:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 705:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 706:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 707:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 708:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xHandle != NULL )
 709:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 710:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 711:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 712:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 713:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 714:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 715:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 716:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
ARM GAS  /tmp/ccMGA4O7.s 			page 14


 717:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 718:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 719:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xHandle;
 720:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 721:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 722:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 723:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 724:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 726:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 727:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 728:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
 729:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 730:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 732:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 733:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 734:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 735:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 736:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 737:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 738:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 739:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 740:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 741:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 742:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
 743:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
 744:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	for( ;; )
 745:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 746:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 747:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 748:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 749:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 750:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 751:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			queue is full. */
 752:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 753:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 754:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_SEND( pxQueue );
 755:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 756:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 757:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 758:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 759:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 760:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 761:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 762:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 763:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 764:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							to the queue set caused a higher priority task to
 765:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							unblock. A context switch is required. */
 766:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 767:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 768:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 769:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 770:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 771:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 772:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 773:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
ARM GAS  /tmp/ccMGA4O7.s 			page 15


 774:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 775:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* If there was a task waiting for data to arrive on the
 776:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queue then unblock it now. */
 777:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 778:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 779:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 780:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 781:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								/* The unblocked task has a priority higher than
 782:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								our own so yield immediately.  Yes it is ok to
 783:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								do this from within the critical section - the
 784:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								kernel takes care of that. */
 785:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 786:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 787:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
 788:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 789:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 790:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 791:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 792:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else if( xYieldRequired != pdFALSE )
 793:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 794:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* This path is a special case that will only get
 795:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							executed if the task was holding multiple mutexes
 796:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							and the mutexes were given back in an order that is
 797:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							different to that in which they were taken. */
 798:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 799:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 800:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 801:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 802:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 803:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 804:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 805:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 806:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 807:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 808:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* If there was a task waiting for data to arrive on the
 809:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					queue then unblock it now. */
 810:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 811:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 812:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 813:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 814:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The unblocked task has a priority higher than
 815:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 816:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							this from within the critical section - the kernel
 817:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							takes care of that. */
 818:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 819:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 820:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 821:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 822:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 823:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 824:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 825:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else if( xYieldRequired != pdFALSE )
 826:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 827:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* This path is a special case that will only get
 828:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						executed if the task was holding multiple mutexes and
 829:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						the mutexes were given back in an order that is
 830:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						different to that in which they were taken. */
ARM GAS  /tmp/ccMGA4O7.s 			page 16


 831:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 832:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 833:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
 834:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 835:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 836:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 837:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 838:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 839:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 840:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
 841:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 842:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 843:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 844:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 845:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 846:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 847:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was full and no block time is specified (or
 848:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
 849:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 850:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 851:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Return to the original privilege level before exiting
 852:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the function. */
 853:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 854:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
 855:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 856:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 857:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 858:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was full and a block time was specified so
 859:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					configure the timeout structure. */
 860:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
 861:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 862:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 863:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
 864:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 865:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
 866:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 867:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 868:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 869:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 870:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 871:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 872:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 873:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
 874:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 875:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
 876:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 877:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 878:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 879:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 880:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 881:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 882:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 883:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 884:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 885:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 886:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Unlocking the queue means queue events can effect the
 887:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				event list.  It is possible that interrupts occurring now
ARM GAS  /tmp/ccMGA4O7.s 			page 17


 888:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				remove this task from the event list again - but as the
 889:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				scheduler is suspended the task will go onto the pending
 890:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				ready last instead of the actual ready list. */
 891:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 892:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 893:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 894:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				ready list into the ready list - so it is feasible that this
 895:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				task is already in a ready list before it yields - in which
 896:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				case the yield will not cause a context switch unless there
 897:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				is also a higher priority task in the pending ready list. */
 898:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 899:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 900:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 901:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 902:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 903:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 904:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 905:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Try again. */
 906:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 907:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 908:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 909:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 910:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 911:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 912:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The timeout has expired. */
 913:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
 914:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 915:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 916:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 917:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			return errQUEUE_FULL;
 918:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 919:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 920:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 921:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 922:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 923:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 924:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 925:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 926:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
 927:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 928:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 929:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 930:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 931:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 932:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 933:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 934:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 935:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 936:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 937:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 938:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 939:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 940:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
 941:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 942:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 943:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 944:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
ARM GAS  /tmp/ccMGA4O7.s 			page 18


 945:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 946:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
 947:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 948:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 949:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 950:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 951:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 952:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 953:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	post). */
 954:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 955:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 956:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 957:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 958:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 959:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 960:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 961:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 962:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 963:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 964:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 965:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			called here even though the disinherit function does not check if
 966:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
 967:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 968:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 969:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
 970:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			be done when the queue is unlocked later. */
 971:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
 972:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 973:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 974:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 975:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 976:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 977:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 978:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 979:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 980:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							to the queue set caused a higher priority task to
 981:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							unblock.  A context switch is required. */
 982:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 983:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 984:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 985:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 986:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
 987:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 988:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 989:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 990:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 991:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 992:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 993:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 994:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 995:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 996:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
 997:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 998:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 999:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1000:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1001:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
ARM GAS  /tmp/ccMGA4O7.s 			page 19


1002:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority so
1003:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								record that a context switch is required. */
1004:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1005:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1006:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1007:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1008:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								else
1009:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1010:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1011:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1012:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1013:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1014:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1015:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1016:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1017:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1018:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1019:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1020:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1021:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1022:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1023:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1024:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1025:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1026:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1027:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1028:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1029:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1030:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1031:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							context	switch is required. */
1032:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1033:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1034:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1035:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1036:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1037:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1038:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1039:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1040:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1041:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1042:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1043:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1044:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1045:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1046:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1047:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1048:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1049:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1050:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1051:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1052:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1053:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1054:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1055:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1056:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				knows that data was posted while it was locked. */
1057:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1058:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
ARM GAS  /tmp/ccMGA4O7.s 			page 20


1059:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1060:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1061:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1062:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1063:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1064:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1065:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = errQUEUE_FULL;
1066:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1067:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1068:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1069:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1070:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1071:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1072:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1073:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1074:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1075:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1076:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1077:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1078:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1079:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1080:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1081:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1082:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1083:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1084:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	post). */
1085:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1086:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1087:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1088:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1089:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if the item size is not 0. */
1090:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1091:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1092:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1093:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1094:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	interrupts, only tasks. */
1095:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NU
1096:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1097:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1098:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1099:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1100:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1101:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1102:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1103:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1104:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1105:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1106:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1107:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1108:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1109:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1110:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1111:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1112:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1113:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1114:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1115:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
ARM GAS  /tmp/ccMGA4O7.s 			page 21


1116:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1117:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1118:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1119:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		space'. */
1120:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
1121:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1122:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
1123:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1124:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1125:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1126:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1127:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1128:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1129:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1130:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1131:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			messages (semaphores) available. */
1132:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1133:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1134:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1135:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			be done when the queue is unlocked later. */
1136:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
1137:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1138:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1139:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1140:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1141:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1142:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1143:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1144:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The semaphore is a member of a queue set, and
1145:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							posting	to the queue set caused a higher priority
1146:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							task to	unblock.  A context switch is required. */
1147:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1148:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1149:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1150:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1151:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1152:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1153:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1154:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1155:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1156:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1157:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1158:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1159:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1160:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1161:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1162:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1163:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1164:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1165:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1166:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1167:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority so
1168:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								record that a context switch is required. */
1169:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1170:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1171:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1172:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
ARM GAS  /tmp/ccMGA4O7.s 			page 22


1173:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								else
1174:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1175:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1176:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1177:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1178:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1179:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1180:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1181:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1182:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1183:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1184:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1185:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1186:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1187:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1188:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1189:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1190:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1191:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1192:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1193:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1194:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1195:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1196:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							context	switch is required. */
1197:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1198:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1199:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1200:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1201:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1202:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1203:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1204:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1205:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1206:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1207:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1208:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1209:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1210:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1211:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1212:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1213:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1214:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1215:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1216:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1217:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1218:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1219:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1220:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1221:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				knows that data was posted while it was locked. */
1222:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1223:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1224:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1225:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1226:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1227:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1228:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1229:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
ARM GAS  /tmp/ccMGA4O7.s 			page 23


1230:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = errQUEUE_FULL;
1231:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1232:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1233:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1234:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1235:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1236:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1237:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1238:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1239:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1240:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1241:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1242:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
1243:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1244:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1245:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Check the pointer is not NULL. */
1246:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( ( pxQueue ) );
1247:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1248:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1249:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	is zero (so no data is copied into the buffer. */
1250:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1251:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1252:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1253:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1254:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1255:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1256:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1257:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
1258:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1260:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
1261:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
1262:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1263:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	for( ;; )
1264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1265:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
1266:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1267:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1268:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1269:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1270:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1271:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1272:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1273:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Data available, remove one item. */
1274:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1275:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1276:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1277:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1278:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There is now space in the queue, were any tasks waiting to
1279:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				post to the queue?  If so, unblock the highest priority waiting
1280:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				task. */
1281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1282:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1283:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1285:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1286:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
ARM GAS  /tmp/ccMGA4O7.s 			page 24


1287:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1288:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1290:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1291:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1292:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1293:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1294:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1295:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1296:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1297:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
1298:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
1299:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1300:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1301:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1302:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1303:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1304:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
1306:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
1307:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1308:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
1309:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1310:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1311:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1312:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was empty and a block time was specified so
1313:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					configure the timeout structure. */
1314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1315:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
1316:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1317:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1318:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1319:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
1320:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1321:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1322:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1323:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1324:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
1325:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1326:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1327:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
1328:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1329:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
1330:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
1331:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1332:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1333:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1334:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1335:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The timeout has not expired.  If the queue is still empty place
1336:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the task on the list of tasks waiting to receive from the queue. */
1337:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1338:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1339:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1340:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1341:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1342:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1343:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
ARM GAS  /tmp/ccMGA4O7.s 			page 25


1344:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
1345:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1346:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1347:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1348:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1349:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1350:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1351:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1352:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1353:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The queue contains data again.  Loop back to try and read the
1354:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				data. */
1355:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1356:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
1357:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1358:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1359:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1360:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1361:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Timed out.  If there is no data in the queue exit, otherwise loop
1362:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			back and attempt to read the data. */
1363:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
1364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
1365:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1366:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1367:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1368:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1369:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return errQUEUE_EMPTY;
1370:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1371:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1372:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1373:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1374:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1375:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1376:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1377:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1378:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1379:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1380:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
1381:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1382:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1383:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
1384:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1385:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1386:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
1387:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xInheritanceOccurred = pdFALSE;
1388:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
1389:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1390:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Check the queue pointer is not NULL. */
1391:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( ( pxQueue ) );
1392:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1393:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Check this really is a semaphore, in which case the item size will be
1394:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	0. */
1395:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1396:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1397:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1398:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1399:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1400:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
ARM GAS  /tmp/ccMGA4O7.s 			page 26


1401:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1402:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
1403:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1404:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1405:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1406:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
1407:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
1408:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1409:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	for( ;; )
1410:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1411:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
1412:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1413:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Semaphores are queues with an item size of 0, and where the
1414:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			number of messages in the queue is the semaphore's count value. */
1415:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1416:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1417:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1418:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1419:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1420:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1421:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1422:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1423:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Semaphores are queues with a data size of zero and where the
1424:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				messages waiting is the semaphore's count.  Reduce the count. */
1425:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1426:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1427:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1428:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1429:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1430:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1431:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* Record the information required to implement
1432:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						priority inheritance should it become necessary. */
1433:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is n
1434:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1435:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1436:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1437:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1438:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1439:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1440:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_MUTEXES */
1441:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1442:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Check to see if other tasks are blocked waiting to give the
1443:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				semaphore, and if so, unblock the highest priority such task. */
1444:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1445:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1446:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1447:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1448:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1449:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1450:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1451:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1452:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1453:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1454:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1455:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1456:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1457:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccMGA4O7.s 			page 27


1458:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1459:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1460:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
1461:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
1462:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1463:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1464:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1465:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1466:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1467:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* For inheritance to have occurred there must have been an
1468:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					initial timeout, and an adjusted timeout cannot become 0, as
1469:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if it were 0 the function would have exited. */
1470:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					#if( configUSE_MUTEXES == 1 )
1471:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1472:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						configASSERT( xInheritanceOccurred == pdFALSE );
1473:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1474:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					#endif /* configUSE_MUTEXES */
1475:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1476:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The semaphore count was 0 and no block time is specified
1477:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					(or the block time has expired) so exit now. */
1478:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
1479:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1480:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
1481:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1482:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1483:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1484:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The semaphore count was 0 and a block time was specified
1485:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					so configure the timeout structure ready to block. */
1486:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1487:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
1488:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1489:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1490:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1491:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
1492:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1493:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1494:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1495:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1496:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
1497:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1498:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can give to and take from the semaphore
1499:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
1500:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1501:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
1502:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
1503:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1504:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1505:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1506:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1507:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* A block time is specified and not expired.  If the semaphore
1508:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			count is 0 then enter the Blocked state to wait for a semaphore to
1509:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			become available.  As semaphores are implemented with queues the
1510:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1511:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1512:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1513:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1514:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccMGA4O7.s 			page 28


1515:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1516:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1517:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1518:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1519:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						taskENTER_CRITICAL();
1520:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1521:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1522:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1523:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						taskEXIT_CRITICAL();
1524:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1525:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1526:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1527:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1528:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1529:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1530:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif
1531:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1532:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1533:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1534:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1536:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
1537:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1538:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1539:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1540:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1541:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1542:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1543:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1544:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1545:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There was no timeout and the semaphore count was not 0, so
1546:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				attempt to take the semaphore again. */
1547:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1548:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
1549:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1550:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1551:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1552:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1553:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Timed out. */
1554:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
1555:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
1556:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1557:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* If the semaphore count is 0 exit now as the timeout has
1558:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			expired.  Otherwise return to attempt to take the semaphore that is
1559:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			known to be available.  As semaphores are implemented by queues the
1560:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1561:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1562:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1563:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1564:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1565:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* xInheritanceOccurred could only have be set if
1566:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1567:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					test the mutex type again to check it is actually a mutex. */
1568:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xInheritanceOccurred != pdFALSE )
1569:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1570:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						taskENTER_CRITICAL();
1571:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
ARM GAS  /tmp/ccMGA4O7.s 			page 29


1572:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							UBaseType_t uxHighestWaitingPriority;
1573:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1574:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* This task blocking on the mutex caused another
1575:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							task to inherit this task's priority.  Now this task
1576:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							has timed out the priority should be disinherited
1577:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							again, but only as low as the next highest priority
1578:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							task that is waiting for the same mutex. */
1579:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1580:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPrio
1581:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1582:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						taskEXIT_CRITICAL();
1583:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1584:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1585:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_MUTEXES */
1586:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1587:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1588:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return errQUEUE_EMPTY;
1589:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1590:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1591:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1592:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1593:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1594:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1595:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1596:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1597:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1598:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1599:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1600:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1601:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1602:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
1603:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** int8_t *pcOriginalReadPosition;
1604:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1605:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1606:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Check the pointer is not NULL. */
1607:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( ( pxQueue ) );
1608:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1609:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1610:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	is zero (so no data is copied into the buffer. */
1611:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1612:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1613:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1614:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1615:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1616:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1617:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1618:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
1619:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1620:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1621:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1622:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
1623:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
1624:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1625:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	for( ;; )
1626:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1627:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
1628:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
ARM GAS  /tmp/ccMGA4O7.s 			page 30


1629:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1630:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1631:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1632:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1633:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1634:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1635:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Remember the read position so it can be reset after the data
1636:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				is read from the queue as this function is only peeking the
1637:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				data, not removing it. */
1638:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1639:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1640:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1641:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_PEEK( pxQueue );
1642:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1643:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The data is not being removed, so reset the read pointer. */
1644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1645:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1646:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The data is being left in the queue, so see if there are
1647:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				any other tasks waiting for the data. */
1648:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1649:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1650:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1651:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1652:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority than this task. */
1653:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1654:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1655:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1656:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1657:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1658:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1659:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1660:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1661:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1662:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1663:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1664:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1665:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
1666:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
1667:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1668:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1669:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1670:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1671:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1672:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1673:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
1674:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
1675:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
1676:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
1677:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1678:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1679:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1680:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was empty and a block time was specified so
1681:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					configure the timeout structure ready to enter the blocked
1682:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					state. */
1683:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1684:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
1685:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
ARM GAS  /tmp/ccMGA4O7.s 			page 31


1686:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1687:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1688:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
1689:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1690:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1691:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1692:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1693:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
1694:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1695:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1696:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
1697:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1698:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
1699:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
1700:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1701:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1702:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1703:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1704:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Timeout has not expired yet, check to see if there is data in the
1705:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			queue now, and if not enter the Blocked state to wait for data. */
1706:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1707:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1708:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1709:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1710:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1711:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1712:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1713:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
1714:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1715:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1716:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1717:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1718:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1719:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1720:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1721:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1722:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There is data in the queue now, so don't enter the blocked
1723:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				state, instead return to try and obtain the data. */
1724:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1725:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
1726:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1727:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1728:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1729:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1730:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The timeout has expired.  If there is still no data in the queue
1731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			exit, otherwise go back and try to read the data again. */
1732:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
1733:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
1734:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1735:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1736:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1737:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_PEEK_FAILED( pxQueue );
1738:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return errQUEUE_EMPTY;
1739:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1740:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1741:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1742:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccMGA4O7.s 			page 32


1743:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1744:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1745:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1746:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1747:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1748:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1749:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1750:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1751:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1752:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1753:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1754:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1755:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1756:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1757:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1758:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1759:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1760:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1761:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1762:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1763:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1764:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1765:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1766:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1767:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1768:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1769:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1770:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1771:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1772:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1773:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1774:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1775:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1776:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1777:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1778:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1779:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1780:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1781:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
1782:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1783:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1784:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1785:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1786:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1787:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1788:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* If the queue is locked the event list will not be modified.
1789:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1790:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			will know that an ISR has removed data while the queue was
1791:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			locked. */
1792:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( cRxLock == queueUNLOCKED )
1793:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1794:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1795:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1796:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1797:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1798:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority than us so
1799:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						force a context switch. */
ARM GAS  /tmp/ccMGA4O7.s 			page 33


1800:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1801:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1802:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1803:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1804:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1805:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1806:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1807:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1808:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1809:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1810:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1811:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1812:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1813:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1814:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1815:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1816:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1817:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1818:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1819:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1820:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1821:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1822:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				knows that data was removed while it was locked. */
1823:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1824:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1825:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1826:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1827:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1828:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1829:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1830:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
1831:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1832:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1833:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1834:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1835:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1836:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1837:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1838:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1839:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1840:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1841:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1842:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1843:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1844:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** int8_t *pcOriginalReadPosition;
1845:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1846:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1847:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1848:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1849:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1850:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1851:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1852:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1853:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1854:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1855:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1856:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
ARM GAS  /tmp/ccMGA4O7.s 			page 34


1857:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1858:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1859:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1860:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1861:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1862:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1863:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1864:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1865:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1866:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1867:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1868:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1869:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1870:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1871:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1872:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1873:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1874:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1875:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			actually being removed from the queue. */
1876:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1877:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1878:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1879:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1880:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1881:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1882:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1883:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1884:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
1885:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1886:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1887:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1888:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1889:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1890:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1891:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1892:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1893:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1894:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1895:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1896:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1897:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1898:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
1899:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1900:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1901:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1902:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1903:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1904:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1905:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1906:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return uxReturn;
1907:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1908:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1909:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1910:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1911:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1912:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1913:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t *pxQueue;
ARM GAS  /tmp/ccMGA4O7.s 			page 35


1914:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1915:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxQueue = ( Queue_t * ) xQueue;
1916:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1917:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1918:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1919:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1920:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1921:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1922:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1923:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1924:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return uxReturn;
1925:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1926:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1927:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1928:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1929:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1930:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1931:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1932:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
1933:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1934:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1935:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1936:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return uxReturn;
1937:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1938:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1939:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1940:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1941:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1942:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1943:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1944:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1945:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1946:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1947:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1948:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1949:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vQueueUnregisterQueue( pxQueue );
1950:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1951:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
1952:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1953:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1954:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1955:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1956:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		again. */
1957:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vPortFree( pxQueue );
1958:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1959:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1960:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1961:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1962:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		check before attempting to free the memory. */
1963:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1964:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1965:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vPortFree( pxQueue );
1966:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1967:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1968:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1969:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1970:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
ARM GAS  /tmp/ccMGA4O7.s 			page 36


1971:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1972:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#else
1973:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1974:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
1975:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
1976:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) pxQueue;
1977:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1978:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
1979:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1980:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1981:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1982:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1983:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1984:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
1985:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1986:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
1987:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1988:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1989:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1990:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1991:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1992:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1993:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1994:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
1995:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1996:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
1997:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1998:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1999:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2000:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2001:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2002:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2003:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2004:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2005:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2006:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
2007:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2008:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2009:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2010:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2011:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2012:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
2013:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2014:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2015:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2016:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxHighestPriorityOfWaitingTasks;
2017:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2018:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* If a task waiting for a mutex causes the mutex holder to inherit a
2019:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		priority, but the waiting task times out, then the holder should
2020:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		disinherit the priority - but only down to the highest priority of any
2021:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		other tasks that are waiting for the same mutex.  For this purpose,
2022:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return the priority of the highest priority task that is waiting for the
2023:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		mutex. */
2024:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
2025:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2026:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( px
2027:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
ARM GAS  /tmp/ccMGA4O7.s 			page 37


2028:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2029:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2030:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
2031:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2032:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2033:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return uxHighestPriorityOfWaitingTasks;
2034:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2035:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2036:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
2037:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2038:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2039:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
2040:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
2041:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn = pdFALSE;
2042:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
2043:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2044:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* This function is called from a critical section. */
2045:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2046:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
2047:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2048:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
2049:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2050:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
2051:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2052:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
2053:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2054:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The mutex is no longer being held. */
2055:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
2056:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
2057:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2058:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2059:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2060:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2061:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2062:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2063:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#endif /* configUSE_MUTEXES */
2064:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2065:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
2066:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2067:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
2068:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
2069:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
2070:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2071:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
2072:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2073:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2074:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2075:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2076:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2077:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2078:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
2079:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2080:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize 
2081:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
2082:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
2083:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2084:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
ARM GAS  /tmp/ccMGA4O7.s 			page 38


2085:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2086:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2087:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2088:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2089:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2090:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2091:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xPosition == queueOVERWRITE )
2092:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2093:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2094:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2095:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* An item is not being added but overwritten, so subtract
2096:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				one from the recorded number of items in the queue so when
2097:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				one is added again below the number of recorded items remains
2098:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				correct. */
2099:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				--uxMessagesWaiting;
2100:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2101:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2102:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2103:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2104:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2105:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2106:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2107:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2108:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2109:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2110:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2111:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2112:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
2113:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2114:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
2115:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
2116:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2117:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2118:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
2119:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
2120:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
2121:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2122:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2123:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
2124:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2125:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = pxQueue->pcHead;
2126:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2127:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2128:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2129:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2130:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2131:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxIte
2132:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2133:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
2134:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2135:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2136:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
2137:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
2138:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2139:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2140:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The lock counts contains the number of extra data items placed or
2141:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
ARM GAS  /tmp/ccMGA4O7.s 			page 39


2142:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	locked items can be added or removed, but the event lists cannot be
2143:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	updated. */
2144:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
2145:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2146:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
2147:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2148:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* See if data was added to the queue while it was locked. */
2149:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
2150:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2151:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
2152:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			blocked waiting for data to become available? */
2153:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
2154:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2155:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
2156:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2157:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
2158:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2159:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The queue is a member of a queue set, and posting to
2160:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						the queue set caused a higher priority task to unblock.
2161:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						A context switch is required. */
2162:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						vTaskMissedYield();
2163:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2164:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2165:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2166:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2167:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2168:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2169:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2170:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2171:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Tasks that are removed from the event list will get
2172:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					added to the pending ready list as the scheduler is still
2173:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					suspended. */
2174:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2175:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2176:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2177:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
2178:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
2179:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							context	switch is required. */
2180:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							vTaskMissedYield();
2181:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
2182:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
2183:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
2184:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
2185:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
2186:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2187:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2188:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2189:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						break;
2190:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2191:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2192:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2193:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#else /* configUSE_QUEUE_SETS */
2194:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2195:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Tasks that are removed from the event list will get added to
2196:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				the pending ready list as the scheduler is still suspended. */
2197:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2198:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
ARM GAS  /tmp/ccMGA4O7.s 			page 40


2199:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2200:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2201:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority so record that
2202:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						a context switch is required. */
2203:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						vTaskMissedYield();
2204:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2205:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2206:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2207:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2208:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2209:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2210:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2211:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2212:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					break;
2213:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2214:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2215:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
2216:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2217:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			--cTxLock;
2218:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2219:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2220:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
2221:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2222:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
2223:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2224:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Do the same for the Rx lock. */
2225:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
2226:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2227:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
2228:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2229:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
2230:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2231:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2232:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2233:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2234:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2235:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskMissedYield();
2236:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2237:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2238:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2239:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2240:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2241:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2242:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				--cRxLock;
2243:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2244:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2245:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2246:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
2247:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2248:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2249:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2250:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
2251:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2252:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
2253:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
2254:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2255:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccMGA4O7.s 			page 41


2256:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
2257:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
  27              		.loc 1 2257 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 10B5     		push	{r4, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
  37 0002 0446     		mov	r4, r0
2258:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
2259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2260:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
  38              		.loc 1 2260 0
  39 0004 FFF7FEFF 		bl	vPortEnterCritical
  40              	.LVL1:
2261:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2262:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  41              		.loc 1 2262 0
  42 0008 A46B     		ldr	r4, [r4, #56]
  43              	.LVL2:
2263:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdTRUE;
2265:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2266:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2267:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2268:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFALSE;
2269:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2270:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2271:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
  44              		.loc 1 2271 0
  45 000a FFF7FEFF 		bl	vPortExitCritical
  46              	.LVL3:
2272:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2273:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
2274:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
  47              		.loc 1 2274 0
  48 000e B4FA84F0 		clz	r0, r4
  49 0012 4009     		lsrs	r0, r0, #5
  50 0014 10BD     		pop	{r4, pc}
  51              		.cfi_endproc
  52              	.LFE36:
  54              		.section	.text.prvCopyDataToQueue,"ax",%progbits
  55              		.align	1
  56              		.syntax unified
  57              		.thumb
  58              		.thumb_func
  59              		.fpu fpv4-sp-d16
  61              	prvCopyDataToQueue:
  62              	.LFB33:
2040:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn = pdFALSE;
  63              		.loc 1 2040 0
  64              		.cfi_startproc
  65              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccMGA4O7.s 			page 42


  66              		@ frame_needed = 0, uses_anonymous_args = 0
  67              	.LVL4:
  68 0000 70B5     		push	{r4, r5, r6, lr}
  69              	.LCFI1:
  70              		.cfi_def_cfa_offset 16
  71              		.cfi_offset 4, -16
  72              		.cfi_offset 5, -12
  73              		.cfi_offset 6, -8
  74              		.cfi_offset 14, -4
  75 0002 0446     		mov	r4, r0
  76 0004 1646     		mov	r6, r2
  77              	.LVL5:
2046:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  78              		.loc 1 2046 0
  79 0006 856B     		ldr	r5, [r0, #56]
  80              	.LVL6:
2048:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
  81              		.loc 1 2048 0
  82 0008 026C     		ldr	r2, [r0, #64]
  83              	.LVL7:
  84 000a 5AB9     		cbnz	r2, .L4
2052:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
  85              		.loc 1 2052 0
  86 000c 0368     		ldr	r3, [r0]
  87 000e 1BB1     		cbz	r3, .L13
2041:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
  88              		.loc 1 2041 0
  89 0010 0020     		movs	r0, #0
  90              	.LVL8:
  91              	.L5:
2112:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  92              		.loc 1 2112 0
  93 0012 0135     		adds	r5, r5, #1
  94              	.LVL9:
  95 0014 A563     		str	r5, [r4, #56]
2115:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
  96              		.loc 1 2115 0
  97 0016 70BD     		pop	{r4, r5, r6, pc}
  98              	.LVL10:
  99              	.L13:
2055:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
 100              		.loc 1 2055 0
 101 0018 4068     		ldr	r0, [r0, #4]
 102              	.LVL11:
 103 001a FFF7FEFF 		bl	xTaskPriorityDisinherit
 104              	.LVL12:
2056:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 105              		.loc 1 2056 0
 106 001e 0023     		movs	r3, #0
 107 0020 6360     		str	r3, [r4, #4]
 108 0022 F6E7     		b	.L5
 109              	.LVL13:
 110              	.L4:
2065:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 111              		.loc 1 2065 0
 112 0024 6EB9     		cbnz	r6, .L6
2067:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
ARM GAS  /tmp/ccMGA4O7.s 			page 43


 113              		.loc 1 2067 0
 114 0026 8068     		ldr	r0, [r0, #8]
 115              	.LVL14:
 116 0028 FFF7FEFF 		bl	memcpy
 117              	.LVL15:
2068:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
 118              		.loc 1 2068 0
 119 002c A368     		ldr	r3, [r4, #8]
 120 002e 226C     		ldr	r2, [r4, #64]
 121 0030 1344     		add	r3, r3, r2
 122 0032 A360     		str	r3, [r4, #8]
2069:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 123              		.loc 1 2069 0
 124 0034 6268     		ldr	r2, [r4, #4]
 125 0036 9342     		cmp	r3, r2
 126 0038 19D3     		bcc	.L9
2071:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 127              		.loc 1 2071 0
 128 003a 2368     		ldr	r3, [r4]
 129 003c A360     		str	r3, [r4, #8]
2041:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
 130              		.loc 1 2041 0
 131 003e 0020     		movs	r0, #0
 132 0040 E7E7     		b	.L5
 133              	.LVL16:
 134              	.L6:
2080:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 135              		.loc 1 2080 0
 136 0042 C068     		ldr	r0, [r0, #12]
 137              	.LVL17:
 138 0044 FFF7FEFF 		bl	memcpy
 139              	.LVL18:
2081:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 140              		.loc 1 2081 0
 141 0048 226C     		ldr	r2, [r4, #64]
 142 004a 5242     		negs	r2, r2
 143 004c E368     		ldr	r3, [r4, #12]
 144 004e 1344     		add	r3, r3, r2
 145 0050 E360     		str	r3, [r4, #12]
2082:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 146              		.loc 1 2082 0
 147 0052 2168     		ldr	r1, [r4]
 148 0054 8B42     		cmp	r3, r1
 149 0056 02D2     		bcs	.L7
2084:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 150              		.loc 1 2084 0
 151 0058 6368     		ldr	r3, [r4, #4]
 152 005a 1A44     		add	r2, r2, r3
 153 005c E260     		str	r2, [r4, #12]
 154              	.L7:
2091:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 155              		.loc 1 2091 0
 156 005e 022E     		cmp	r6, #2
 157 0060 01D0     		beq	.L14
2041:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
 158              		.loc 1 2041 0
 159 0062 0020     		movs	r0, #0
ARM GAS  /tmp/ccMGA4O7.s 			page 44


 160 0064 D5E7     		b	.L5
 161              	.L14:
2093:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 162              		.loc 1 2093 0
 163 0066 25B1     		cbz	r5, .L11
2099:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 164              		.loc 1 2099 0
 165 0068 013D     		subs	r5, r5, #1
 166              	.LVL19:
2041:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
 167              		.loc 1 2041 0
 168 006a 0020     		movs	r0, #0
 169 006c D1E7     		b	.L5
 170              	.L9:
 171 006e 0020     		movs	r0, #0
 172 0070 CFE7     		b	.L5
 173              	.L11:
 174 0072 0020     		movs	r0, #0
 175 0074 CDE7     		b	.L5
 176              		.cfi_endproc
 177              	.LFE33:
 179              		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 180              		.align	1
 181              		.syntax unified
 182              		.thumb
 183              		.thumb_func
 184              		.fpu fpv4-sp-d16
 186              	prvCopyDataFromQueue:
 187              	.LFB34:
2119:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 188              		.loc 1 2119 0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 0
 191              		@ frame_needed = 0, uses_anonymous_args = 0
 192              	.LVL20:
2120:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 193              		.loc 1 2120 0
 194 0000 026C     		ldr	r2, [r0, #64]
 195 0002 72B1     		cbz	r2, .L19
2119:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 196              		.loc 1 2119 0
 197 0004 10B5     		push	{r4, lr}
 198              	.LCFI2:
 199              		.cfi_def_cfa_offset 8
 200              		.cfi_offset 4, -8
 201              		.cfi_offset 14, -4
2122:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 202              		.loc 1 2122 0
 203 0006 C368     		ldr	r3, [r0, #12]
 204 0008 1344     		add	r3, r3, r2
 205 000a C360     		str	r3, [r0, #12]
2123:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 206              		.loc 1 2123 0
 207 000c 4468     		ldr	r4, [r0, #4]
 208 000e A342     		cmp	r3, r4
2125:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 209              		.loc 1 2125 0
ARM GAS  /tmp/ccMGA4O7.s 			page 45


 210 0010 24BF     		itt	cs
 211 0012 0368     		ldrcs	r3, [r0]
 212 0014 C360     		strcs	r3, [r0, #12]
 213 0016 0C46     		mov	r4, r1
2131:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 214              		.loc 1 2131 0
 215 0018 C168     		ldr	r1, [r0, #12]
 216              	.LVL21:
 217 001a 2046     		mov	r0, r4
 218              	.LVL22:
 219 001c FFF7FEFF 		bl	memcpy
 220              	.LVL23:
2133:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 221              		.loc 1 2133 0
 222 0020 10BD     		pop	{r4, pc}
 223              	.LVL24:
 224              	.L19:
 225              	.LCFI3:
 226              		.cfi_def_cfa_offset 0
 227              		.cfi_restore 4
 228              		.cfi_restore 14
 229 0022 7047     		bx	lr
 230              		.cfi_endproc
 231              	.LFE34:
 233              		.section	.text.prvUnlockQueue,"ax",%progbits
 234              		.align	1
 235              		.syntax unified
 236              		.thumb
 237              		.thumb_func
 238              		.fpu fpv4-sp-d16
 240              	prvUnlockQueue:
 241              	.LFB35:
2137:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 242              		.loc 1 2137 0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 0
 245              		@ frame_needed = 0, uses_anonymous_args = 0
 246              	.LVL25:
 247 0000 70B5     		push	{r4, r5, r6, lr}
 248              	.LCFI4:
 249              		.cfi_def_cfa_offset 16
 250              		.cfi_offset 4, -16
 251              		.cfi_offset 5, -12
 252              		.cfi_offset 6, -8
 253              		.cfi_offset 14, -4
 254 0002 0546     		mov	r5, r0
2144:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 255              		.loc 1 2144 0
 256 0004 FFF7FEFF 		bl	vPortEnterCritical
 257              	.LVL26:
 258              	.LBB118:
2146:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 259              		.loc 1 2146 0
 260 0008 95F84540 		ldrb	r4, [r5, #69]	@ zero_extendqisi2
 261 000c 64B2     		sxtb	r4, r4
 262              	.LVL27:
2149:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
ARM GAS  /tmp/ccMGA4O7.s 			page 46


 263              		.loc 1 2149 0
 264 000e 002C     		cmp	r4, #0
 265 0010 11DD     		ble	.L23
2197:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 266              		.loc 1 2197 0
 267 0012 6B6A     		ldr	r3, [r5, #36]
 268 0014 7BB1     		cbz	r3, .L23
2199:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 269              		.loc 1 2199 0
 270 0016 05F12406 		add	r6, r5, #36
 271 001a 06E0     		b	.L24
 272              	.L34:
2203:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 273              		.loc 1 2203 0
 274 001c FFF7FEFF 		bl	vTaskMissedYield
 275              	.LVL28:
 276              	.L25:
 277 0020 013C     		subs	r4, r4, #1
 278              	.LVL29:
 279 0022 64B2     		sxtb	r4, r4
 280              	.LVL30:
2149:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 281              		.loc 1 2149 0
 282 0024 3CB1     		cbz	r4, .L23
2197:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 283              		.loc 1 2197 0
 284 0026 6B6A     		ldr	r3, [r5, #36]
 285 0028 2BB1     		cbz	r3, .L23
 286              	.L24:
2199:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 287              		.loc 1 2199 0
 288 002a 3046     		mov	r0, r6
 289 002c FFF7FEFF 		bl	xTaskRemoveFromEventList
 290              	.LVL31:
 291 0030 0028     		cmp	r0, #0
 292 0032 F5D0     		beq	.L25
 293 0034 F2E7     		b	.L34
 294              	.L23:
2220:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 295              		.loc 1 2220 0
 296 0036 FF23     		movs	r3, #255
 297 0038 85F84530 		strb	r3, [r5, #69]
 298              	.LBE118:
2222:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 299              		.loc 1 2222 0
 300 003c FFF7FEFF 		bl	vPortExitCritical
 301              	.LVL32:
2225:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 302              		.loc 1 2225 0
 303 0040 FFF7FEFF 		bl	vPortEnterCritical
 304              	.LVL33:
 305              	.LBB119:
2227:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 306              		.loc 1 2227 0
 307 0044 95F84440 		ldrb	r4, [r5, #68]	@ zero_extendqisi2
 308              	.LVL34:
 309 0048 64B2     		sxtb	r4, r4
ARM GAS  /tmp/ccMGA4O7.s 			page 47


 310              	.LVL35:
2229:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 311              		.loc 1 2229 0
 312 004a 002C     		cmp	r4, #0
 313 004c 11DD     		ble	.L27
2231:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 314              		.loc 1 2231 0
 315 004e 2B69     		ldr	r3, [r5, #16]
 316 0050 7BB1     		cbz	r3, .L27
2233:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 317              		.loc 1 2233 0
 318 0052 05F11006 		add	r6, r5, #16
 319 0056 06E0     		b	.L28
 320              	.L35:
2235:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 321              		.loc 1 2235 0
 322 0058 FFF7FEFF 		bl	vTaskMissedYield
 323              	.LVL36:
 324              	.L29:
 325 005c 013C     		subs	r4, r4, #1
 326              	.LVL37:
 327 005e 64B2     		sxtb	r4, r4
 328              	.LVL38:
2229:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 329              		.loc 1 2229 0
 330 0060 3CB1     		cbz	r4, .L27
2231:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 331              		.loc 1 2231 0
 332 0062 2B69     		ldr	r3, [r5, #16]
 333 0064 2BB1     		cbz	r3, .L27
 334              	.L28:
2233:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 335              		.loc 1 2233 0
 336 0066 3046     		mov	r0, r6
 337 0068 FFF7FEFF 		bl	xTaskRemoveFromEventList
 338              	.LVL39:
 339 006c 0028     		cmp	r0, #0
 340 006e F5D0     		beq	.L29
 341 0070 F2E7     		b	.L35
 342              	.L27:
2250:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 343              		.loc 1 2250 0
 344 0072 FF23     		movs	r3, #255
 345 0074 85F84430 		strb	r3, [r5, #68]
 346              	.LBE119:
2252:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 347              		.loc 1 2252 0
 348 0078 FFF7FEFF 		bl	vPortExitCritical
 349              	.LVL40:
2253:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 350              		.loc 1 2253 0
 351 007c 70BD     		pop	{r4, r5, r6, pc}
 352              		.cfi_endproc
 353              	.LFE35:
 355              		.section	.text.xQueueGenericReset,"ax",%progbits
 356              		.align	1
 357              		.global	xQueueGenericReset
ARM GAS  /tmp/ccMGA4O7.s 			page 48


 358              		.syntax unified
 359              		.thumb
 360              		.thumb_func
 361              		.fpu fpv4-sp-d16
 363              	xQueueGenericReset:
 364              	.LFB4:
 248:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 365              		.loc 1 248 0
 366              		.cfi_startproc
 367              		@ args = 0, pretend = 0, frame = 0
 368              		@ frame_needed = 0, uses_anonymous_args = 0
 369              	.LVL41:
 370 0000 38B5     		push	{r3, r4, r5, lr}
 371              	.LCFI5:
 372              		.cfi_def_cfa_offset 16
 373              		.cfi_offset 3, -16
 374              		.cfi_offset 4, -12
 375              		.cfi_offset 5, -8
 376              		.cfi_offset 14, -4
 377              	.LVL42:
 251:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 378              		.loc 1 251 0
 379 0002 40B9     		cbnz	r0, .L37
 380              	.LBB120:
 381              	.LBB121:
 382              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/ccMGA4O7.s 			page 49


  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
ARM GAS  /tmp/ccMGA4O7.s 			page 50


  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
ARM GAS  /tmp/ccMGA4O7.s 			page 51


 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 383              		.loc 2 195 0
 384              		.syntax unified
 385              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 386 0004 4FF05003 			mov r3, #80												
 387 0008 83F31188 		msr basepri, r3											
 388 000c BFF36F8F 		isb														
 389 0010 BFF34F8F 		dsb														
ARM GAS  /tmp/ccMGA4O7.s 			page 52


 390              	
 391              	@ 0 "" 2
 392              	.LVL43:
 393              		.thumb
 394              		.syntax unified
 395              	.L38:
 396 0014 FEE7     		b	.L38
 397              	.L37:
 398 0016 0446     		mov	r4, r0
 399 0018 0D46     		mov	r5, r1
 400              	.LBE121:
 401              	.LBE120:
 253:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 402              		.loc 1 253 0
 403 001a FFF7FEFF 		bl	vPortEnterCritical
 404              	.LVL44:
 255:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 405              		.loc 1 255 0
 406 001e 2268     		ldr	r2, [r4]
 407 0020 216C     		ldr	r1, [r4, #64]
 408 0022 E36B     		ldr	r3, [r4, #60]
 409 0024 03FB01F3 		mul	r3, r3, r1
 410 0028 D018     		adds	r0, r2, r3
 411 002a 6060     		str	r0, [r4, #4]
 256:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 412              		.loc 1 256 0
 413 002c 0020     		movs	r0, #0
 414 002e A063     		str	r0, [r4, #56]
 257:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 415              		.loc 1 257 0
 416 0030 A260     		str	r2, [r4, #8]
 258:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 417              		.loc 1 258 0
 418 0032 5B1A     		subs	r3, r3, r1
 419 0034 1344     		add	r3, r3, r2
 420 0036 E360     		str	r3, [r4, #12]
 259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 421              		.loc 1 259 0
 422 0038 FF23     		movs	r3, #255
 423 003a 84F84430 		strb	r3, [r4, #68]
 260:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 424              		.loc 1 260 0
 425 003e 84F84530 		strb	r3, [r4, #69]
 262:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 426              		.loc 1 262 0
 427 0042 A5B9     		cbnz	r5, .L39
 269:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 428              		.loc 1 269 0
 429 0044 2369     		ldr	r3, [r4, #16]
 430 0046 1BB9     		cbnz	r3, .L42
 431              	.L40:
 292:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 432              		.loc 1 292 0
 433 0048 FFF7FEFF 		bl	vPortExitCritical
 434              	.LVL45:
 297:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 435              		.loc 1 297 0
ARM GAS  /tmp/ccMGA4O7.s 			page 53


 436 004c 0120     		movs	r0, #1
 437 004e 38BD     		pop	{r3, r4, r5, pc}
 438              	.LVL46:
 439              	.L42:
 271:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 440              		.loc 1 271 0
 441 0050 04F11000 		add	r0, r4, #16
 442 0054 FFF7FEFF 		bl	xTaskRemoveFromEventList
 443              	.LVL47:
 444 0058 0028     		cmp	r0, #0
 445 005a F5D0     		beq	.L40
 273:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 446              		.loc 1 273 0
 447 005c 084B     		ldr	r3, .L43
 448 005e 4FF08052 		mov	r2, #268435456
 449 0062 1A60     		str	r2, [r3]
 450              		.syntax unified
 451              	@ 273 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 452 0064 BFF34F8F 		dsb
 453              	@ 0 "" 2
 454              	@ 273 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 455 0068 BFF36F8F 		isb
 456              	@ 0 "" 2
 457              		.thumb
 458              		.syntax unified
 459 006c ECE7     		b	.L40
 460              	.L39:
 288:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 461              		.loc 1 288 0
 462 006e 04F11000 		add	r0, r4, #16
 463 0072 FFF7FEFF 		bl	vListInitialise
 464              	.LVL48:
 289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 465              		.loc 1 289 0
 466 0076 04F12400 		add	r0, r4, #36
 467 007a FFF7FEFF 		bl	vListInitialise
 468              	.LVL49:
 469 007e E3E7     		b	.L40
 470              	.L44:
 471              		.align	2
 472              	.L43:
 473 0080 04ED00E0 		.word	-536810236
 474              		.cfi_endproc
 475              	.LFE4:
 477              		.section	.text.xQueueGenericCreateStatic,"ax",%progbits
 478              		.align	1
 479              		.global	xQueueGenericCreateStatic
 480              		.syntax unified
 481              		.thumb
 482              		.thumb_func
 483              		.fpu fpv4-sp-d16
 485              	xQueueGenericCreateStatic:
 486              	.LFB5:
 303:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 487              		.loc 1 303 0
 488              		.cfi_startproc
 489              		@ args = 4, pretend = 0, frame = 8
ARM GAS  /tmp/ccMGA4O7.s 			page 54


 490              		@ frame_needed = 0, uses_anonymous_args = 0
 491              	.LVL50:
 306:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 492              		.loc 1 306 0
 493 0000 40B9     		cbnz	r0, .L46
 494              	.LBB135:
 495              	.LBB136:
 496              		.loc 2 195 0
 497              		.syntax unified
 498              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 499 0002 4FF05003 			mov r3, #80												
 500 0006 83F31188 		msr basepri, r3											
 501 000a BFF36F8F 		isb														
 502 000e BFF34F8F 		dsb														
 503              	
 504              	@ 0 "" 2
 505              	.LVL51:
 506              		.thumb
 507              		.syntax unified
 508              	.L47:
 509 0012 FEE7     		b	.L47
 510              	.LVL52:
 511              	.L46:
 512              	.LBE136:
 513              	.LBE135:
 303:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 514              		.loc 1 303 0
 515 0014 10B5     		push	{r4, lr}
 516              	.LCFI6:
 517              		.cfi_def_cfa_offset 8
 518              		.cfi_offset 4, -8
 519              		.cfi_offset 14, -4
 520 0016 82B0     		sub	sp, sp, #8
 521              	.LCFI7:
 522              		.cfi_def_cfa_offset 16
 523 0018 0446     		mov	r4, r0
 310:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 524              		.loc 1 310 0
 525 001a 53B1     		cbz	r3, .L64
 314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 526              		.loc 1 314 0
 527 001c 92B1     		cbz	r2, .L50
 314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 528              		.loc 1 314 0 is_stmt 0 discriminator 2
 529 001e D9B9     		cbnz	r1, .L51
 530              	.LBB137:
 531              	.LBB138:
 532              		.loc 2 195 0 is_stmt 1
 533              		.syntax unified
 534              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 535 0020 4FF05003 			mov r3, #80												
 536 0024 83F31188 		msr basepri, r3											
 537 0028 BFF36F8F 		isb														
 538 002c BFF34F8F 		dsb														
 539              	
 540              	@ 0 "" 2
 541              	.LVL53:
ARM GAS  /tmp/ccMGA4O7.s 			page 55


 542              		.thumb
 543              		.syntax unified
 544              	.L52:
 545 0030 FEE7     		b	.L52
 546              	.LVL54:
 547              	.L64:
 548              	.LBE138:
 549              	.LBE137:
 550              	.LBB139:
 551              	.LBB140:
 552              		.syntax unified
 553              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 554 0032 4FF05003 			mov r3, #80												
 555 0036 83F31188 		msr basepri, r3											
 556 003a BFF36F8F 		isb														
 557 003e BFF34F8F 		dsb														
 558              	
 559              	@ 0 "" 2
 560              	.LVL55:
 561              		.thumb
 562              		.syntax unified
 563              	.L49:
 564 0042 FEE7     		b	.L49
 565              	.LVL56:
 566              	.L50:
 567              	.LBE140:
 568              	.LBE139:
 315:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 569              		.loc 1 315 0 discriminator 2
 570 0044 49B3     		cbz	r1, .L53
 571              	.LBB141:
 572              	.LBB142:
 573              		.loc 2 195 0
 574              		.syntax unified
 575              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 576 0046 4FF05003 			mov r3, #80												
 577 004a 83F31188 		msr basepri, r3											
 578 004e BFF36F8F 		isb														
 579 0052 BFF34F8F 		dsb														
 580              	
 581              	@ 0 "" 2
 582              	.LVL57:
 583              		.thumb
 584              		.syntax unified
 585              	.L54:
 586 0056 FEE7     		b	.L54
 587              	.LVL58:
 588              	.L51:
 589              	.LBE142:
 590              	.LBE141:
 591              	.LBB143:
 322:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 592              		.loc 1 322 0
 593 0058 5020     		movs	r0, #80
 594              	.LVL59:
 595 005a 0190     		str	r0, [sp, #4]
 323:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
ARM GAS  /tmp/ccMGA4O7.s 			page 56


 596              		.loc 1 323 0
 597 005c 0198     		ldr	r0, [sp, #4]
 598 005e 5028     		cmp	r0, #80
 599 0060 08D0     		beq	.L55
 600              	.LVL60:
 601              	.L58:
 602              	.LBB144:
 603              	.LBB145:
 604              		.loc 2 195 0
 605              		.syntax unified
 606              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 607 0062 4FF05003 			mov r3, #80												
 608 0066 83F31188 		msr basepri, r3											
 609 006a BFF36F8F 		isb														
 610 006e BFF34F8F 		dsb														
 611              	
 612              	@ 0 "" 2
 613              	.LVL61:
 614              		.thumb
 615              		.syntax unified
 616              	.L56:
 617 0072 FEE7     		b	.L56
 618              	.LVL62:
 619              	.L55:
 620              	.LBE145:
 621              	.LBE144:
 622              	.LBE143:
 339:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 623              		.loc 1 339 0
 624 0074 0120     		movs	r0, #1
 625 0076 83F84600 		strb	r0, [r3, #70]
 626              	.LVL63:
 627              	.LBB146:
 628              	.LBB147:
 425:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 629              		.loc 1 425 0
 630 007a 1A60     		str	r2, [r3]
 631              	.LVL64:
 632              	.L57:
 633 007c 2246     		mov	r2, r4
 634 007e 1C46     		mov	r4, r3
 635              	.LVL65:
 430:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 636              		.loc 1 430 0
 637 0080 DA63     		str	r2, [r3, #60]
 431:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 638              		.loc 1 431 0
 639 0082 1964     		str	r1, [r3, #64]
 432:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 640              		.loc 1 432 0
 641 0084 0121     		movs	r1, #1
 642              	.LVL66:
 643 0086 1846     		mov	r0, r3
 644 0088 FFF7FEFF 		bl	xQueueGenericReset
 645              	.LVL67:
 436:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 646              		.loc 1 436 0
ARM GAS  /tmp/ccMGA4O7.s 			page 57


 647 008c 9DF81030 		ldrb	r3, [sp, #16]	@ zero_extendqisi2
 648 0090 84F84C30 		strb	r3, [r4, #76]
 649              	.LVL68:
 650              	.LBE147:
 651              	.LBE146:
 351:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 652              		.loc 1 351 0
 653 0094 2046     		mov	r0, r4
 654 0096 02B0     		add	sp, sp, #8
 655              	.LCFI8:
 656              		.cfi_remember_state
 657              		.cfi_def_cfa_offset 8
 658              		@ sp needed
 659 0098 10BD     		pop	{r4, pc}
 660              	.LVL69:
 661              	.L53:
 662              	.LCFI9:
 663              		.cfi_restore_state
 664              	.LBB149:
 322:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 665              		.loc 1 322 0
 666 009a 5022     		movs	r2, #80
 667              	.LVL70:
 668 009c 0192     		str	r2, [sp, #4]
 323:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 669              		.loc 1 323 0
 670 009e 019A     		ldr	r2, [sp, #4]
 671 00a0 502A     		cmp	r2, #80
 672 00a2 DED1     		bne	.L58
 673              	.LVL71:
 674              	.LBE149:
 339:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 675              		.loc 1 339 0
 676 00a4 0122     		movs	r2, #1
 677 00a6 83F84620 		strb	r2, [r3, #70]
 678              	.LVL72:
 679              	.LBB150:
 680              	.LBB148:
 420:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 681              		.loc 1 420 0
 682 00aa 1B60     		str	r3, [r3]
 683 00ac E6E7     		b	.L57
 684              	.LBE148:
 685              	.LBE150:
 686              		.cfi_endproc
 687              	.LFE5:
 689              		.section	.text.xQueueGenericCreate,"ax",%progbits
 690              		.align	1
 691              		.global	xQueueGenericCreate
 692              		.syntax unified
 693              		.thumb
 694              		.thumb_func
 695              		.fpu fpv4-sp-d16
 697              	xQueueGenericCreate:
 698              	.LFB6:
 359:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 699              		.loc 1 359 0
ARM GAS  /tmp/ccMGA4O7.s 			page 58


 700              		.cfi_startproc
 701              		@ args = 0, pretend = 0, frame = 0
 702              		@ frame_needed = 0, uses_anonymous_args = 0
 703              	.LVL73:
 704 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 705              	.LCFI10:
 706              		.cfi_def_cfa_offset 24
 707              		.cfi_offset 3, -24
 708              		.cfi_offset 4, -20
 709              		.cfi_offset 5, -16
 710              		.cfi_offset 6, -12
 711              		.cfi_offset 7, -8
 712              		.cfi_offset 14, -4
 364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 713              		.loc 1 364 0
 714 0002 40B9     		cbnz	r0, .L66
 715              	.LBB155:
 716              	.LBB156:
 717              		.loc 2 195 0
 718              		.syntax unified
 719              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 720 0004 4FF05003 			mov r3, #80												
 721 0008 83F31188 		msr basepri, r3											
 722 000c BFF36F8F 		isb														
 723 0010 BFF34F8F 		dsb														
 724              	
 725              	@ 0 "" 2
 726              	.LVL74:
 727              		.thumb
 728              		.syntax unified
 729              	.L67:
 730 0014 FEE7     		b	.L67
 731              	.L66:
 732 0016 0646     		mov	r6, r0
 733 0018 1746     		mov	r7, r2
 734 001a 0D46     		mov	r5, r1
 735              	.LVL75:
 736              	.LBE156:
 737              	.LBE155:
 375:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 738              		.loc 1 375 0
 739 001c 01FB00F0 		mul	r0, r1, r0
 740              	.LVL76:
 378:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 741              		.loc 1 378 0
 742 0020 5030     		adds	r0, r0, #80
 743              	.LVL77:
 744 0022 FFF7FEFF 		bl	pvPortMalloc
 745              	.LVL78:
 380:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 746              		.loc 1 380 0
 747 0026 0446     		mov	r4, r0
 748 0028 80B1     		cbz	r0, .L65
 749              	.LVL79:
 391:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 750              		.loc 1 391 0
 751 002a 0023     		movs	r3, #0
ARM GAS  /tmp/ccMGA4O7.s 			page 59


 752 002c 80F84630 		strb	r3, [r0, #70]
 753              	.LVL80:
 754              	.LBB157:
 755              	.LBB158:
 414:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 756              		.loc 1 414 0
 757 0030 1DB1     		cbz	r5, .L72
 758              	.LBE158:
 759              	.LBE157:
 384:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 760              		.loc 1 384 0
 761 0032 00F15003 		add	r3, r0, #80
 762              	.LVL81:
 763              	.LBB160:
 764              	.LBB159:
 425:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 765              		.loc 1 425 0
 766 0036 0360     		str	r3, [r0]
 767 0038 00E0     		b	.L70
 768              	.LVL82:
 769              	.L72:
 420:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 770              		.loc 1 420 0
 771 003a 2060     		str	r0, [r4]
 772              	.L70:
 430:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 773              		.loc 1 430 0
 774 003c E663     		str	r6, [r4, #60]
 431:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 775              		.loc 1 431 0
 776 003e 2564     		str	r5, [r4, #64]
 432:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 777              		.loc 1 432 0
 778 0040 0121     		movs	r1, #1
 779 0042 2046     		mov	r0, r4
 780              	.LVL83:
 781 0044 FFF7FEFF 		bl	xQueueGenericReset
 782              	.LVL84:
 436:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 783              		.loc 1 436 0
 784 0048 84F84C70 		strb	r7, [r4, #76]
 785              	.LVL85:
 786              	.L65:
 787              	.LBE159:
 788              	.LBE160:
 403:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 789              		.loc 1 403 0
 790 004c 2046     		mov	r0, r4
 791 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 792              		.cfi_endproc
 793              	.LFE6:
 795              		.section	.text.xQueueGetMutexHolder,"ax",%progbits
 796              		.align	1
 797              		.global	xQueueGetMutexHolder
 798              		.syntax unified
 799              		.thumb
 800              		.thumb_func
ARM GAS  /tmp/ccMGA4O7.s 			page 60


 801              		.fpu fpv4-sp-d16
 803              	xQueueGetMutexHolder:
 804              	.LFB11:
 519:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void *pxReturn;
 805              		.loc 1 519 0
 806              		.cfi_startproc
 807              		@ args = 0, pretend = 0, frame = 0
 808              		@ frame_needed = 0, uses_anonymous_args = 0
 809              	.LVL86:
 810 0000 10B5     		push	{r4, lr}
 811              	.LCFI11:
 812              		.cfi_def_cfa_offset 8
 813              		.cfi_offset 4, -8
 814              		.cfi_offset 14, -4
 815 0002 0446     		mov	r4, r0
 527:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 816              		.loc 1 527 0
 817 0004 FFF7FEFF 		bl	vPortEnterCritical
 818              	.LVL87:
 529:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 819              		.loc 1 529 0
 820 0008 2368     		ldr	r3, [r4]
 821 000a 23B9     		cbnz	r3, .L75
 531:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 822              		.loc 1 531 0
 823 000c 6468     		ldr	r4, [r4, #4]
 824              	.LVL88:
 825              	.L74:
 538:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 826              		.loc 1 538 0
 827 000e FFF7FEFF 		bl	vPortExitCritical
 828              	.LVL89:
 541:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 829              		.loc 1 541 0
 830 0012 2046     		mov	r0, r4
 831 0014 10BD     		pop	{r4, pc}
 832              	.LVL90:
 833              	.L75:
 535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 834              		.loc 1 535 0
 835 0016 0024     		movs	r4, #0
 836              	.LVL91:
 837 0018 F9E7     		b	.L74
 838              		.cfi_endproc
 839              	.LFE11:
 841              		.section	.text.xQueueGetMutexHolderFromISR,"ax",%progbits
 842              		.align	1
 843              		.global	xQueueGetMutexHolderFromISR
 844              		.syntax unified
 845              		.thumb
 846              		.thumb_func
 847              		.fpu fpv4-sp-d16
 849              	xQueueGetMutexHolderFromISR:
 850              	.LFB12:
 549:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void *pxReturn;
 851              		.loc 1 549 0
 852              		.cfi_startproc
ARM GAS  /tmp/ccMGA4O7.s 			page 61


 853              		@ args = 0, pretend = 0, frame = 0
 854              		@ frame_needed = 0, uses_anonymous_args = 0
 855              		@ link register save eliminated.
 856              	.LVL92:
 552:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 857              		.loc 1 552 0
 858 0000 18B1     		cbz	r0, .L82
 557:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 859              		.loc 1 557 0
 860 0002 0268     		ldr	r2, [r0]
 861 0004 52B9     		cbnz	r2, .L81
 559:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 862              		.loc 1 559 0
 863 0006 4068     		ldr	r0, [r0, #4]
 864              	.LVL93:
 865 0008 7047     		bx	lr
 866              	.LVL94:
 867              	.L82:
 868              	.LBB161:
 869              	.LBB162:
 870              		.loc 2 195 0
 871              		.syntax unified
 872              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 873 000a 4FF05003 			mov r3, #80												
 874 000e 83F31188 		msr basepri, r3											
 875 0012 BFF36F8F 		isb														
 876 0016 BFF34F8F 		dsb														
 877              	
 878              	@ 0 "" 2
 879              	.LVL95:
 880              		.thumb
 881              		.syntax unified
 882              	.L79:
 883 001a FEE7     		b	.L79
 884              	.L81:
 885              	.LBE162:
 886              	.LBE161:
 563:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 887              		.loc 1 563 0
 888 001c 0020     		movs	r0, #0
 889              	.LVL96:
 567:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 890              		.loc 1 567 0
 891 001e 7047     		bx	lr
 892              		.cfi_endproc
 893              	.LFE12:
 895              		.section	.text.xQueueCreateCountingSemaphoreStatic,"ax",%progbits
 896              		.align	1
 897              		.global	xQueueCreateCountingSemaphoreStatic
 898              		.syntax unified
 899              		.thumb
 900              		.thumb_func
 901              		.fpu fpv4-sp-d16
 903              	xQueueCreateCountingSemaphoreStatic:
 904              	.LFB15:
 672:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 905              		.loc 1 672 0
ARM GAS  /tmp/ccMGA4O7.s 			page 62


 906              		.cfi_startproc
 907              		@ args = 0, pretend = 0, frame = 0
 908              		@ frame_needed = 0, uses_anonymous_args = 0
 909              	.LVL97:
 675:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 910              		.loc 1 675 0
 911 0000 40B9     		cbnz	r0, .L84
 912              	.LBB163:
 913              	.LBB164:
 914              		.loc 2 195 0
 915              		.syntax unified
 916              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 917 0002 4FF05003 			mov r3, #80												
 918 0006 83F31188 		msr basepri, r3											
 919 000a BFF36F8F 		isb														
 920 000e BFF34F8F 		dsb														
 921              	
 922              	@ 0 "" 2
 923              	.LVL98:
 924              		.thumb
 925              		.syntax unified
 926              	.L85:
 927 0012 FEE7     		b	.L85
 928              	.L84:
 929              	.LBE164:
 930              	.LBE163:
 676:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 931              		.loc 1 676 0
 932 0014 8842     		cmp	r0, r1
 933 0016 08D2     		bcs	.L86
 934              	.LBB165:
 935              	.LBB166:
 936              		.loc 2 195 0
 937              		.syntax unified
 938              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 939 0018 4FF05003 			mov r3, #80												
 940 001c 83F31188 		msr basepri, r3											
 941 0020 BFF36F8F 		isb														
 942 0024 BFF34F8F 		dsb														
 943              	
 944              	@ 0 "" 2
 945              	.LVL99:
 946              		.thumb
 947              		.syntax unified
 948              	.L87:
 949 0028 FEE7     		b	.L87
 950              	.L86:
 951              	.LBE166:
 952              	.LBE165:
 672:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 953              		.loc 1 672 0
 954 002a 10B5     		push	{r4, lr}
 955              	.LCFI12:
 956              		.cfi_def_cfa_offset 8
 957              		.cfi_offset 4, -8
 958              		.cfi_offset 14, -4
 959 002c 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/ccMGA4O7.s 			page 63


 960              	.LCFI13:
 961              		.cfi_def_cfa_offset 16
 962 002e 1346     		mov	r3, r2
 963 0030 0C46     		mov	r4, r1
 678:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 964              		.loc 1 678 0
 965 0032 0222     		movs	r2, #2
 966              	.LVL100:
 967 0034 0092     		str	r2, [sp]
 968 0036 0022     		movs	r2, #0
 969 0038 1146     		mov	r1, r2
 970              	.LVL101:
 971 003a FFF7FEFF 		bl	xQueueGenericCreateStatic
 972              	.LVL102:
 680:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 973              		.loc 1 680 0
 974 003e 0346     		mov	r3, r0
 975 0040 00B1     		cbz	r0, .L83
 682:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 976              		.loc 1 682 0
 977 0042 8463     		str	r4, [r0, #56]
 978              	.L83:
 692:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 979              		.loc 1 692 0
 980 0044 1846     		mov	r0, r3
 981              	.LVL103:
 982 0046 02B0     		add	sp, sp, #8
 983              	.LCFI14:
 984              		.cfi_def_cfa_offset 8
 985              		@ sp needed
 986 0048 10BD     		pop	{r4, pc}
 987              		.cfi_endproc
 988              	.LFE15:
 990              		.section	.text.xQueueCreateCountingSemaphore,"ax",%progbits
 991              		.align	1
 992              		.global	xQueueCreateCountingSemaphore
 993              		.syntax unified
 994              		.thumb
 995              		.thumb_func
 996              		.fpu fpv4-sp-d16
 998              	xQueueCreateCountingSemaphore:
 999              	.LFB16:
 700:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 1000              		.loc 1 700 0
 1001              		.cfi_startproc
 1002              		@ args = 0, pretend = 0, frame = 0
 1003              		@ frame_needed = 0, uses_anonymous_args = 0
 1004              	.LVL104:
 703:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 1005              		.loc 1 703 0
 1006 0000 40B9     		cbnz	r0, .L92
 1007              	.LBB167:
 1008              	.LBB168:
 1009              		.loc 2 195 0
 1010              		.syntax unified
 1011              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1012 0002 4FF05003 			mov r3, #80												
ARM GAS  /tmp/ccMGA4O7.s 			page 64


 1013 0006 83F31188 		msr basepri, r3											
 1014 000a BFF36F8F 		isb														
 1015 000e BFF34F8F 		dsb														
 1016              	
 1017              	@ 0 "" 2
 1018              	.LVL105:
 1019              		.thumb
 1020              		.syntax unified
 1021              	.L93:
 1022 0012 FEE7     		b	.L93
 1023              	.L92:
 1024              	.LBE168:
 1025              	.LBE167:
 704:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1026              		.loc 1 704 0
 1027 0014 8842     		cmp	r0, r1
 1028 0016 08D2     		bcs	.L94
 1029              	.LBB169:
 1030              	.LBB170:
 1031              		.loc 2 195 0
 1032              		.syntax unified
 1033              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1034 0018 4FF05003 			mov r3, #80												
 1035 001c 83F31188 		msr basepri, r3											
 1036 0020 BFF36F8F 		isb														
 1037 0024 BFF34F8F 		dsb														
 1038              	
 1039              	@ 0 "" 2
 1040              	.LVL106:
 1041              		.thumb
 1042              		.syntax unified
 1043              	.L95:
 1044 0028 FEE7     		b	.L95
 1045              	.L94:
 1046              	.LBE170:
 1047              	.LBE169:
 700:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 1048              		.loc 1 700 0
 1049 002a 10B5     		push	{r4, lr}
 1050              	.LCFI15:
 1051              		.cfi_def_cfa_offset 8
 1052              		.cfi_offset 4, -8
 1053              		.cfi_offset 14, -4
 1054 002c 0C46     		mov	r4, r1
 706:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1055              		.loc 1 706 0
 1056 002e 0222     		movs	r2, #2
 1057 0030 0021     		movs	r1, #0
 1058              	.LVL107:
 1059 0032 FFF7FEFF 		bl	xQueueGenericCreate
 1060              	.LVL108:
 708:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1061              		.loc 1 708 0
 1062 0036 0346     		mov	r3, r0
 1063 0038 00B1     		cbz	r0, .L91
 710:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1064              		.loc 1 710 0
ARM GAS  /tmp/ccMGA4O7.s 			page 65


 1065 003a 8463     		str	r4, [r0, #56]
 1066              	.L91:
 720:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1067              		.loc 1 720 0
 1068 003c 1846     		mov	r0, r3
 1069              	.LVL109:
 1070 003e 10BD     		pop	{r4, pc}
 1071              		.cfi_endproc
 1072              	.LFE16:
 1074              		.section	.text.xQueueGenericSend,"ax",%progbits
 1075              		.align	1
 1076              		.global	xQueueGenericSend
 1077              		.syntax unified
 1078              		.thumb
 1079              		.thumb_func
 1080              		.fpu fpv4-sp-d16
 1082              	xQueueGenericSend:
 1083              	.LFB17:
 726:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 1084              		.loc 1 726 0
 1085              		.cfi_startproc
 1086              		@ args = 0, pretend = 0, frame = 16
 1087              		@ frame_needed = 0, uses_anonymous_args = 0
 1088              	.LVL110:
 1089 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1090              	.LCFI16:
 1091              		.cfi_def_cfa_offset 32
 1092              		.cfi_offset 4, -32
 1093              		.cfi_offset 5, -28
 1094              		.cfi_offset 6, -24
 1095              		.cfi_offset 7, -20
 1096              		.cfi_offset 8, -16
 1097              		.cfi_offset 9, -12
 1098              		.cfi_offset 10, -8
 1099              		.cfi_offset 14, -4
 1100 0004 84B0     		sub	sp, sp, #16
 1101              	.LCFI17:
 1102              		.cfi_def_cfa_offset 48
 1103 0006 0192     		str	r2, [sp, #4]
 1104              	.LVL111:
 731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1105              		.loc 1 731 0
 1106 0008 60B1     		cbz	r0, .L124
 1107 000a 0446     		mov	r4, r0
 732:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1108              		.loc 1 732 0
 1109 000c 99B9     		cbnz	r1, .L102
 732:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1110              		.loc 1 732 0 is_stmt 0 discriminator 2
 1111 000e 026C     		ldr	r2, [r0, #64]
 1112              	.LVL112:
 1113 0010 8AB1     		cbz	r2, .L102
 1114              	.LBB181:
 1115              	.LBB182:
 1116              		.loc 2 195 0 is_stmt 1
 1117              		.syntax unified
 1118              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  /tmp/ccMGA4O7.s 			page 66


 1119 0012 4FF05003 			mov r3, #80												
 1120 0016 83F31188 		msr basepri, r3											
 1121 001a BFF36F8F 		isb														
 1122 001e BFF34F8F 		dsb														
 1123              	
 1124              	@ 0 "" 2
 1125              	.LVL113:
 1126              		.thumb
 1127              		.syntax unified
 1128              	.L103:
 1129 0022 FEE7     		b	.L103
 1130              	.LVL114:
 1131              	.L124:
 1132              	.LBE182:
 1133              	.LBE181:
 1134              	.LBB183:
 1135              	.LBB184:
 1136              		.syntax unified
 1137              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1138 0024 4FF05003 			mov r3, #80												
 1139 0028 83F31188 		msr basepri, r3											
 1140 002c BFF36F8F 		isb														
 1141 0030 BFF34F8F 		dsb														
 1142              	
 1143              	@ 0 "" 2
 1144              	.LVL115:
 1145              		.thumb
 1146              		.syntax unified
 1147              	.L101:
 1148 0034 FEE7     		b	.L101
 1149              	.LVL116:
 1150              	.L102:
 1151              	.LBE184:
 1152              	.LBE183:
 733:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1153              		.loc 1 733 0
 1154 0036 022B     		cmp	r3, #2
 1155 0038 0BD1     		bne	.L104
 733:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1156              		.loc 1 733 0 is_stmt 0 discriminator 2
 1157 003a E26B     		ldr	r2, [r4, #60]
 1158 003c 012A     		cmp	r2, #1
 1159 003e 08D0     		beq	.L104
 1160              	.LBB185:
 1161              	.LBB186:
 1162              		.loc 2 195 0 is_stmt 1
 1163              		.syntax unified
 1164              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1165 0040 4FF05003 			mov r3, #80												
 1166 0044 83F31188 		msr basepri, r3											
 1167 0048 BFF36F8F 		isb														
 1168 004c BFF34F8F 		dsb														
 1169              	
 1170              	@ 0 "" 2
 1171              	.LVL117:
 1172              		.thumb
 1173              		.syntax unified
ARM GAS  /tmp/ccMGA4O7.s 			page 67


 1174              	.L105:
 1175 0050 FEE7     		b	.L105
 1176              	.LVL118:
 1177              	.L104:
 1178 0052 1E46     		mov	r6, r3
 1179 0054 0F46     		mov	r7, r1
 1180              	.LBE186:
 1181              	.LBE185:
 736:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1182              		.loc 1 736 0
 1183 0056 FFF7FEFF 		bl	xTaskGetSchedulerState
 1184              	.LVL119:
 1185 005a 50B9     		cbnz	r0, .L121
 736:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1186              		.loc 1 736 0 is_stmt 0 discriminator 2
 1187 005c 019B     		ldr	r3, [sp, #4]
 1188 005e 73B1     		cbz	r3, .L122
 1189              	.LBB187:
 1190              	.LBB188:
 1191              		.loc 2 195 0 is_stmt 1
 1192              		.syntax unified
 1193              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1194 0060 4FF05003 			mov r3, #80												
 1195 0064 83F31188 		msr basepri, r3											
 1196 0068 BFF36F8F 		isb														
 1197 006c BFF34F8F 		dsb														
 1198              	
 1199              	@ 0 "" 2
 1200              	.LVL120:
 1201              		.thumb
 1202              		.syntax unified
 1203              	.L107:
 1204 0070 FEE7     		b	.L107
 1205              	.L121:
 1206              	.LBE188:
 1207              	.LBE187:
 1208 0072 0025     		movs	r5, #0
 1209              	.L106:
 876:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1210              		.loc 1 876 0
 1211 0074 4FF00008 		mov	r8, #0
 900:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 1212              		.loc 1 900 0
 1213 0078 DFF80891 		ldr	r9, .L128
 1214 007c 33E0     		b	.L108
 1215              	.L122:
 1216 007e 0025     		movs	r5, #0
 1217 0080 F8E7     		b	.L106
 1218              	.LVL121:
 1219              	.L109:
 755:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1220              		.loc 1 755 0
 1221 0082 3246     		mov	r2, r6
 1222 0084 3946     		mov	r1, r7
 1223 0086 2046     		mov	r0, r4
 1224 0088 FFF7FEFF 		bl	prvCopyDataToQueue
 1225              	.LVL122:
ARM GAS  /tmp/ccMGA4O7.s 			page 68


 810:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1226              		.loc 1 810 0
 1227 008c 636A     		ldr	r3, [r4, #36]
 1228 008e 4BB9     		cbnz	r3, .L125
 825:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1229              		.loc 1 825 0
 1230 0090 A8B1     		cbz	r0, .L112
 831:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 1231              		.loc 1 831 0
 1232 0092 3C4B     		ldr	r3, .L128
 1233 0094 4FF08052 		mov	r2, #268435456
 1234 0098 1A60     		str	r2, [r3]
 1235              		.syntax unified
 1236              	@ 831 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1237 009a BFF34F8F 		dsb
 1238              	@ 0 "" 2
 1239              	@ 831 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1240 009e BFF36F8F 		isb
 1241              	@ 0 "" 2
 1242              		.thumb
 1243              		.syntax unified
 1244 00a2 0CE0     		b	.L112
 1245              	.L125:
 812:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 1246              		.loc 1 812 0
 1247 00a4 04F12400 		add	r0, r4, #36
 1248              	.LVL123:
 1249 00a8 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1250              	.LVL124:
 1251 00ac 38B1     		cbz	r0, .L112
 818:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 1252              		.loc 1 818 0
 1253 00ae 354B     		ldr	r3, .L128
 1254 00b0 4FF08052 		mov	r2, #268435456
 1255 00b4 1A60     		str	r2, [r3]
 1256              		.syntax unified
 1257              	@ 818 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1258 00b6 BFF34F8F 		dsb
 1259              	@ 0 "" 2
 1260              	@ 818 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1261 00ba BFF36F8F 		isb
 1262              	@ 0 "" 2
 1263              		.thumb
 1264              		.syntax unified
 1265              	.L112:
 840:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 1266              		.loc 1 840 0
 1267 00be FFF7FEFF 		bl	vPortExitCritical
 1268              	.LVL125:
 841:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1269              		.loc 1 841 0
 1270 00c2 0120     		movs	r0, #1
 1271              	.LVL126:
 1272              	.L99:
 920:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1273              		.loc 1 920 0
 1274 00c4 04B0     		add	sp, sp, #16
ARM GAS  /tmp/ccMGA4O7.s 			page 69


 1275              	.LCFI18:
 1276              		.cfi_remember_state
 1277              		.cfi_def_cfa_offset 32
 1278              		@ sp needed
 1279 00c6 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1280              	.LVL127:
 1281              	.L126:
 1282              	.LCFI19:
 1283              		.cfi_restore_state
 849:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1284              		.loc 1 849 0
 1285 00ca FFF7FEFF 		bl	vPortExitCritical
 1286              	.LVL128:
 854:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 1287              		.loc 1 854 0
 1288 00ce 0020     		movs	r0, #0
 1289 00d0 F8E7     		b	.L99
 1290              	.L127:
 860:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1291              		.loc 1 860 0
 1292 00d2 02A8     		add	r0, sp, #8
 1293 00d4 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1294              	.LVL129:
 1295 00d8 12E0     		b	.L115
 1296              	.L119:
 906:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 1297              		.loc 1 906 0
 1298 00da 2046     		mov	r0, r4
 1299 00dc FFF7FEFF 		bl	prvUnlockQueue
 1300              	.LVL130:
 907:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1301              		.loc 1 907 0
 1302 00e0 FFF7FEFF 		bl	xTaskResumeAll
 1303              	.LVL131:
 1304              	.L120:
 1305 00e4 0125     		movs	r5, #1
 1306              	.LVL132:
 1307              	.L108:
 746:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1308              		.loc 1 746 0
 1309 00e6 FFF7FEFF 		bl	vPortEnterCritical
 1310              	.LVL133:
 752:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1311              		.loc 1 752 0
 1312 00ea A26B     		ldr	r2, [r4, #56]
 1313 00ec E36B     		ldr	r3, [r4, #60]
 1314 00ee 9A42     		cmp	r2, r3
 1315 00f0 C7D3     		bcc	.L109
 752:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1316              		.loc 1 752 0 is_stmt 0 discriminator 1
 1317 00f2 022E     		cmp	r6, #2
 1318 00f4 C5D0     		beq	.L109
 845:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1319              		.loc 1 845 0 is_stmt 1
 1320 00f6 019B     		ldr	r3, [sp, #4]
 1321 00f8 002B     		cmp	r3, #0
 1322 00fa E6D0     		beq	.L126
ARM GAS  /tmp/ccMGA4O7.s 			page 70


 856:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1323              		.loc 1 856 0
 1324 00fc 002D     		cmp	r5, #0
 1325 00fe E8D0     		beq	.L127
 1326              	.LVL134:
 1327              	.L115:
 870:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1328              		.loc 1 870 0
 1329 0100 FFF7FEFF 		bl	vPortExitCritical
 1330              	.LVL135:
 875:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 1331              		.loc 1 875 0
 1332 0104 FFF7FEFF 		bl	vTaskSuspendAll
 1333              	.LVL136:
 876:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1334              		.loc 1 876 0
 1335 0108 FFF7FEFF 		bl	vPortEnterCritical
 1336              	.LVL137:
 1337 010c 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1338 0110 5BB2     		sxtb	r3, r3
 1339 0112 B3F1FF3F 		cmp	r3, #-1
 1340 0116 08BF     		it	eq
 1341 0118 84F84480 		strbeq	r8, [r4, #68]
 1342 011c 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1343 0120 5BB2     		sxtb	r3, r3
 1344 0122 B3F1FF3F 		cmp	r3, #-1
 1345 0126 08BF     		it	eq
 1346 0128 84F84580 		strbeq	r8, [r4, #69]
 1347 012c FFF7FEFF 		bl	vPortExitCritical
 1348              	.LVL138:
 879:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1349              		.loc 1 879 0
 1350 0130 01A9     		add	r1, sp, #4
 1351 0132 02A8     		add	r0, sp, #8
 1352 0134 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1353              	.LVL139:
 1354 0138 E8B9     		cbnz	r0, .L118
 1355              	.LVL140:
 1356              	.LBB189:
 1357              	.LBB190:
2275:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2276:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2277:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2278:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
2279:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
2280:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
2282:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
2283:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdTRUE;
2285:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2286:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
2287:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2288:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdFALSE;
2289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2290:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2291:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
ARM GAS  /tmp/ccMGA4O7.s 			page 71


2292:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2293:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2294:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2295:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
2296:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
2297:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
2298:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2299:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 1358              		.loc 1 2299 0
 1359 013a FFF7FEFF 		bl	vPortEnterCritical
 1360              	.LVL141:
2300:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2301:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 1361              		.loc 1 2301 0
 1362 013e D4F838A0 		ldr	r10, [r4, #56]
 1363 0142 E56B     		ldr	r5, [r4, #60]
 1364              	.LVL142:
2302:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2303:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdTRUE;
2304:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2306:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2307:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFALSE;
2308:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2309:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2310:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 1365              		.loc 1 2310 0
 1366 0144 FFF7FEFF 		bl	vPortExitCritical
 1367              	.LVL143:
 1368              	.LBE190:
 1369              	.LBE189:
 881:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1370              		.loc 1 881 0
 1371 0148 AA45     		cmp	r10, r5
 1372 014a C6D1     		bne	.L119
 884:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1373              		.loc 1 884 0
 1374 014c 0199     		ldr	r1, [sp, #4]
 1375 014e 04F11000 		add	r0, r4, #16
 1376 0152 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1377              	.LVL144:
 891:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1378              		.loc 1 891 0
 1379 0156 2046     		mov	r0, r4
 1380 0158 FFF7FEFF 		bl	prvUnlockQueue
 1381              	.LVL145:
 898:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1382              		.loc 1 898 0
 1383 015c FFF7FEFF 		bl	xTaskResumeAll
 1384              	.LVL146:
 1385 0160 0028     		cmp	r0, #0
 1386 0162 BFD1     		bne	.L120
 900:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 1387              		.loc 1 900 0
 1388 0164 4FF08053 		mov	r3, #268435456
 1389 0168 C9F80030 		str	r3, [r9]
 1390              		.syntax unified
ARM GAS  /tmp/ccMGA4O7.s 			page 72


 1391              	@ 900 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1392 016c BFF34F8F 		dsb
 1393              	@ 0 "" 2
 1394              	@ 900 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1395 0170 BFF36F8F 		isb
 1396              	@ 0 "" 2
 1397              		.thumb
 1398              		.syntax unified
 1399 0174 B6E7     		b	.L120
 1400              	.L118:
 913:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 1401              		.loc 1 913 0
 1402 0176 2046     		mov	r0, r4
 1403 0178 FFF7FEFF 		bl	prvUnlockQueue
 1404              	.LVL147:
 914:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1405              		.loc 1 914 0
 1406 017c FFF7FEFF 		bl	xTaskResumeAll
 1407              	.LVL148:
 917:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1408              		.loc 1 917 0
 1409 0180 0020     		movs	r0, #0
 1410 0182 9FE7     		b	.L99
 1411              	.L129:
 1412              		.align	2
 1413              	.L128:
 1414 0184 04ED00E0 		.word	-536810236
 1415              		.cfi_endproc
 1416              	.LFE17:
 1418              		.section	.text.prvInitialiseMutex,"ax",%progbits
 1419              		.align	1
 1420              		.syntax unified
 1421              		.thumb
 1422              		.thumb_func
 1423              		.fpu fpv4-sp-d16
 1425              	prvInitialiseMutex:
 1426              	.LFB8:
 453:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 1427              		.loc 1 453 0
 1428              		.cfi_startproc
 1429              		@ args = 0, pretend = 0, frame = 0
 1430              		@ frame_needed = 0, uses_anonymous_args = 0
 1431              	.LVL149:
 454:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1432              		.loc 1 454 0
 1433 0000 48B1     		cbz	r0, .L133
 453:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 1434              		.loc 1 453 0
 1435 0002 08B5     		push	{r3, lr}
 1436              	.LCFI20:
 1437              		.cfi_def_cfa_offset 8
 1438              		.cfi_offset 3, -8
 1439              		.cfi_offset 14, -4
 460:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1440              		.loc 1 460 0
 1441 0004 0021     		movs	r1, #0
 1442 0006 4160     		str	r1, [r0, #4]
ARM GAS  /tmp/ccMGA4O7.s 			page 73


 461:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1443              		.loc 1 461 0
 1444 0008 0160     		str	r1, [r0]
 464:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1445              		.loc 1 464 0
 1446 000a C160     		str	r1, [r0, #12]
 469:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1447              		.loc 1 469 0
 1448 000c 0B46     		mov	r3, r1
 1449 000e 0A46     		mov	r2, r1
 1450 0010 FFF7FEFF 		bl	xQueueGenericSend
 1451              	.LVL150:
 475:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1452              		.loc 1 475 0
 1453 0014 08BD     		pop	{r3, pc}
 1454              	.LVL151:
 1455              	.L133:
 1456              	.LCFI21:
 1457              		.cfi_def_cfa_offset 0
 1458              		.cfi_restore 3
 1459              		.cfi_restore 14
 1460 0016 7047     		bx	lr
 1461              		.cfi_endproc
 1462              	.LFE8:
 1464              		.section	.text.xQueueCreateMutex,"ax",%progbits
 1465              		.align	1
 1466              		.global	xQueueCreateMutex
 1467              		.syntax unified
 1468              		.thumb
 1469              		.thumb_func
 1470              		.fpu fpv4-sp-d16
 1472              	xQueueCreateMutex:
 1473              	.LFB9:
 483:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 1474              		.loc 1 483 0
 1475              		.cfi_startproc
 1476              		@ args = 0, pretend = 0, frame = 0
 1477              		@ frame_needed = 0, uses_anonymous_args = 0
 1478              	.LVL152:
 1479 0000 10B5     		push	{r4, lr}
 1480              	.LCFI22:
 1481              		.cfi_def_cfa_offset 8
 1482              		.cfi_offset 4, -8
 1483              		.cfi_offset 14, -4
 1484              	.LVL153:
 487:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 1485              		.loc 1 487 0
 1486 0002 0246     		mov	r2, r0
 1487 0004 0021     		movs	r1, #0
 1488 0006 0120     		movs	r0, #1
 1489              	.LVL154:
 1490 0008 FFF7FEFF 		bl	xQueueGenericCreate
 1491              	.LVL155:
 1492 000c 0446     		mov	r4, r0
 1493              	.LVL156:
 488:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1494              		.loc 1 488 0
ARM GAS  /tmp/ccMGA4O7.s 			page 74


 1495 000e FFF7FEFF 		bl	prvInitialiseMutex
 1496              	.LVL157:
 491:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1497              		.loc 1 491 0
 1498 0012 2046     		mov	r0, r4
 1499 0014 10BD     		pop	{r4, pc}
 1500              		.cfi_endproc
 1501              	.LFE9:
 1503              		.section	.text.xQueueCreateMutexStatic,"ax",%progbits
 1504              		.align	1
 1505              		.global	xQueueCreateMutexStatic
 1506              		.syntax unified
 1507              		.thumb
 1508              		.thumb_func
 1509              		.fpu fpv4-sp-d16
 1511              	xQueueCreateMutexStatic:
 1512              	.LFB10:
 499:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 1513              		.loc 1 499 0
 1514              		.cfi_startproc
 1515              		@ args = 0, pretend = 0, frame = 0
 1516              		@ frame_needed = 0, uses_anonymous_args = 0
 1517              	.LVL158:
 1518 0000 10B5     		push	{r4, lr}
 1519              	.LCFI23:
 1520              		.cfi_def_cfa_offset 8
 1521              		.cfi_offset 4, -8
 1522              		.cfi_offset 14, -4
 1523 0002 82B0     		sub	sp, sp, #8
 1524              	.LCFI24:
 1525              		.cfi_def_cfa_offset 16
 1526              	.LVL159:
 507:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 1527              		.loc 1 507 0
 1528 0004 0090     		str	r0, [sp]
 1529 0006 0B46     		mov	r3, r1
 1530 0008 0022     		movs	r2, #0
 1531 000a 1146     		mov	r1, r2
 1532              	.LVL160:
 1533 000c 0120     		movs	r0, #1
 1534              	.LVL161:
 1535 000e FFF7FEFF 		bl	xQueueGenericCreateStatic
 1536              	.LVL162:
 1537 0012 0446     		mov	r4, r0
 1538              	.LVL163:
 508:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1539              		.loc 1 508 0
 1540 0014 FFF7FEFF 		bl	prvInitialiseMutex
 1541              	.LVL164:
 511:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1542              		.loc 1 511 0
 1543 0018 2046     		mov	r0, r4
 1544 001a 02B0     		add	sp, sp, #8
 1545              	.LCFI25:
 1546              		.cfi_def_cfa_offset 8
 1547              		@ sp needed
 1548 001c 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccMGA4O7.s 			page 75


 1549              		.cfi_endproc
 1550              	.LFE10:
 1552              		.section	.text.xQueueGiveMutexRecursive,"ax",%progbits
 1553              		.align	1
 1554              		.global	xQueueGiveMutexRecursive
 1555              		.syntax unified
 1556              		.thumb
 1557              		.thumb_func
 1558              		.fpu fpv4-sp-d16
 1560              	xQueueGiveMutexRecursive:
 1561              	.LFB13:
 575:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 1562              		.loc 1 575 0
 1563              		.cfi_startproc
 1564              		@ args = 0, pretend = 0, frame = 0
 1565              		@ frame_needed = 0, uses_anonymous_args = 0
 1566              	.LVL165:
 1567 0000 38B5     		push	{r3, r4, r5, lr}
 1568              	.LCFI26:
 1569              		.cfi_def_cfa_offset 16
 1570              		.cfi_offset 3, -16
 1571              		.cfi_offset 4, -12
 1572              		.cfi_offset 5, -8
 1573              		.cfi_offset 14, -4
 1574              	.LVL166:
 579:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1575              		.loc 1 579 0
 1576 0002 40B9     		cbnz	r0, .L141
 1577              	.LBB191:
 1578              	.LBB192:
 1579              		.loc 2 195 0
 1580              		.syntax unified
 1581              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1582 0004 4FF05003 			mov r3, #80												
 1583 0008 83F31188 		msr basepri, r3											
 1584 000c BFF36F8F 		isb														
 1585 0010 BFF34F8F 		dsb														
 1586              	
 1587              	@ 0 "" 2
 1588              	.LVL167:
 1589              		.thumb
 1590              		.syntax unified
 1591              	.L142:
 1592 0014 FEE7     		b	.L142
 1593              	.L141:
 1594 0016 0446     		mov	r4, r0
 1595              	.LBE192:
 1596              	.LBE191:
 587:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1597              		.loc 1 587 0
 1598 0018 4568     		ldr	r5, [r0, #4]
 1599 001a FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 1600              	.LVL168:
 1601 001e 8542     		cmp	r5, r0
 1602 0020 01D0     		beq	.L147
 616:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1603              		.loc 1 616 0
ARM GAS  /tmp/ccMGA4O7.s 			page 76


 1604 0022 0020     		movs	r0, #0
 1605              	.L140:
 622:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1606              		.loc 1 622 0
 1607 0024 38BD     		pop	{r3, r4, r5, pc}
 1608              	.LVL169:
 1609              	.L147:
 596:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1610              		.loc 1 596 0
 1611 0026 E368     		ldr	r3, [r4, #12]
 1612 0028 013B     		subs	r3, r3, #1
 1613 002a E360     		str	r3, [r4, #12]
 599:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1614              		.loc 1 599 0
 1615 002c 33B9     		cbnz	r3, .L145
 603:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1616              		.loc 1 603 0
 1617 002e 1A46     		mov	r2, r3
 1618 0030 1946     		mov	r1, r3
 1619 0032 2046     		mov	r0, r4
 1620 0034 FFF7FEFF 		bl	xQueueGenericSend
 1621              	.LVL170:
 610:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1622              		.loc 1 610 0
 1623 0038 0120     		movs	r0, #1
 1624 003a F3E7     		b	.L140
 1625              	.L145:
 1626 003c 0120     		movs	r0, #1
 1627              	.LVL171:
 621:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1628              		.loc 1 621 0
 1629 003e F1E7     		b	.L140
 1630              		.cfi_endproc
 1631              	.LFE13:
 1633              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1634              		.align	1
 1635              		.global	xQueueGenericSendFromISR
 1636              		.syntax unified
 1637              		.thumb
 1638              		.thumb_func
 1639              		.fpu fpv4-sp-d16
 1641              	xQueueGenericSendFromISR:
 1642              	.LFB18:
 924:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1643              		.loc 1 924 0
 1644              		.cfi_startproc
 1645              		@ args = 0, pretend = 0, frame = 0
 1646              		@ frame_needed = 0, uses_anonymous_args = 0
 1647              	.LVL172:
 1648 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1649              	.LCFI27:
 1650              		.cfi_def_cfa_offset 32
 1651              		.cfi_offset 3, -32
 1652              		.cfi_offset 4, -28
 1653              		.cfi_offset 5, -24
 1654              		.cfi_offset 6, -20
 1655              		.cfi_offset 7, -16
ARM GAS  /tmp/ccMGA4O7.s 			page 77


 1656              		.cfi_offset 8, -12
 1657              		.cfi_offset 9, -8
 1658              		.cfi_offset 14, -4
 1659              	.LVL173:
 929:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1660              		.loc 1 929 0
 1661 0004 60B1     		cbz	r0, .L163
 1662 0006 0446     		mov	r4, r0
 930:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1663              		.loc 1 930 0
 1664 0008 99B9     		cbnz	r1, .L151
 930:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1665              		.loc 1 930 0 is_stmt 0 discriminator 2
 1666 000a 006C     		ldr	r0, [r0, #64]
 1667              	.LVL174:
 1668 000c 88B1     		cbz	r0, .L151
 1669              	.LBB193:
 1670              	.LBB194:
 1671              		.loc 2 195 0 is_stmt 1
 1672              		.syntax unified
 1673              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1674 000e 4FF05003 			mov r3, #80												
 1675 0012 83F31188 		msr basepri, r3											
 1676 0016 BFF36F8F 		isb														
 1677 001a BFF34F8F 		dsb														
 1678              	
 1679              	@ 0 "" 2
 1680              	.LVL175:
 1681              		.thumb
 1682              		.syntax unified
 1683              	.L152:
 1684 001e FEE7     		b	.L152
 1685              	.LVL176:
 1686              	.L163:
 1687              	.LBE194:
 1688              	.LBE193:
 1689              	.LBB195:
 1690              	.LBB196:
 1691              		.syntax unified
 1692              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1693 0020 4FF05003 			mov r3, #80												
 1694 0024 83F31188 		msr basepri, r3											
 1695 0028 BFF36F8F 		isb														
 1696 002c BFF34F8F 		dsb														
 1697              	
 1698              	@ 0 "" 2
 1699              	.LVL177:
 1700              		.thumb
 1701              		.syntax unified
 1702              	.L150:
 1703 0030 FEE7     		b	.L150
 1704              	.LVL178:
 1705              	.L151:
 1706              	.LBE196:
 1707              	.LBE195:
 931:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1708              		.loc 1 931 0
ARM GAS  /tmp/ccMGA4O7.s 			page 78


 1709 0032 022B     		cmp	r3, #2
 1710 0034 0BD1     		bne	.L153
 931:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1711              		.loc 1 931 0 is_stmt 0 discriminator 2
 1712 0036 E06B     		ldr	r0, [r4, #60]
 1713 0038 0128     		cmp	r0, #1
 1714 003a 08D0     		beq	.L153
 1715              	.LBB197:
 1716              	.LBB198:
 1717              		.loc 2 195 0 is_stmt 1
 1718              		.syntax unified
 1719              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1720 003c 4FF05003 			mov r3, #80												
 1721 0040 83F31188 		msr basepri, r3											
 1722 0044 BFF36F8F 		isb														
 1723 0048 BFF34F8F 		dsb														
 1724              	
 1725              	@ 0 "" 2
 1726              	.LVL179:
 1727              		.thumb
 1728              		.syntax unified
 1729              	.L154:
 1730 004c FEE7     		b	.L154
 1731              	.LVL180:
 1732              	.L153:
 1733 004e 1F46     		mov	r7, r3
 1734 0050 9046     		mov	r8, r2
 1735 0052 8946     		mov	r9, r1
 1736              	.LBE198:
 1737              	.LBE197:
 947:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1738              		.loc 1 947 0
 1739 0054 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1740              	.LVL181:
 1741              	.LBB199:
 1742              	.LBB200:
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1743              		.loc 2 211 0
 1744              		.syntax unified
 1745              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1746 0058 EFF31186 			mrs r6, basepri											
 1747 005c 4FF05003 		mov r3, #80												
ARM GAS  /tmp/ccMGA4O7.s 			page 79


 1748 0060 83F31188 		msr basepri, r3											
 1749 0064 BFF36F8F 		isb														
 1750 0068 BFF34F8F 		dsb														
 1751              	
 1752              	@ 0 "" 2
 1753              		.thumb
 1754              		.syntax unified
 1755              	.LBE200:
 1756              	.LBE199:
 956:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1757              		.loc 1 956 0
 1758 006c A26B     		ldr	r2, [r4, #56]
 1759 006e E36B     		ldr	r3, [r4, #60]
 1760 0070 9A42     		cmp	r2, r3
 1761 0072 03D3     		bcc	.L155
 956:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1762              		.loc 1 956 0 is_stmt 0 discriminator 1
 1763 0074 022F     		cmp	r7, #2
 1764 0076 01D0     		beq	.L155
1065:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1765              		.loc 1 1065 0 is_stmt 1
 1766 0078 0020     		movs	r0, #0
 1767 007a 0FE0     		b	.L156
 1768              	.L155:
 1769              	.LBB201:
 958:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1770              		.loc 1 958 0
 1771 007c 94F84550 		ldrb	r5, [r4, #69]	@ zero_extendqisi2
 1772 0080 6DB2     		sxtb	r5, r5
 1773              	.LVL182:
 967:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1774              		.loc 1 967 0
 1775 0082 3A46     		mov	r2, r7
 1776 0084 4946     		mov	r1, r9
 1777 0086 2046     		mov	r0, r4
 1778 0088 FFF7FEFF 		bl	prvCopyDataToQueue
 1779              	.LVL183:
 971:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1780              		.loc 1 971 0
 1781 008c B5F1FF3F 		cmp	r5, #-1
 1782 0090 08D0     		beq	.L164
1057:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1783              		.loc 1 1057 0
 1784 0092 6B1C     		adds	r3, r5, #1
 1785 0094 5BB2     		sxtb	r3, r3
 1786 0096 84F84530 		strb	r3, [r4, #69]
1060:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1787              		.loc 1 1060 0
 1788 009a 0120     		movs	r0, #1
 1789              	.LVL184:
 1790              	.L156:
 1791              	.LBE201:
 1792              	.LBB202:
 1793              	.LBB203:
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
ARM GAS  /tmp/ccMGA4O7.s 			page 80


 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1794              		.loc 2 229 0
 1795              		.syntax unified
 1796              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1797 009c 86F31188 			msr basepri, r6	
 1798              	@ 0 "" 2
 1799              	.LVL185:
 1800              		.thumb
 1801              		.syntax unified
 1802              	.LBE203:
 1803              	.LBE202:
1071:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1804              		.loc 1 1071 0
 1805 00a0 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1806              	.LVL186:
 1807              	.L164:
 1808              	.LBB204:
1026:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1809              		.loc 1 1026 0
 1810 00a4 636A     		ldr	r3, [r4, #36]
 1811 00a6 5BB1     		cbz	r3, .L159
1028:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 1812              		.loc 1 1028 0
 1813 00a8 04F12400 		add	r0, r4, #36
 1814 00ac FFF7FEFF 		bl	xTaskRemoveFromEventList
 1815              	.LVL187:
 1816 00b0 40B1     		cbz	r0, .L160
1032:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 1817              		.loc 1 1032 0
 1818 00b2 B8F1000F 		cmp	r8, #0
 1819 00b6 07D0     		beq	.L161
1034:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 1820              		.loc 1 1034 0
 1821 00b8 0120     		movs	r0, #1
 1822 00ba C8F80000 		str	r0, [r8]
 1823 00be EDE7     		b	.L156
 1824              	.L159:
1060:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1825              		.loc 1 1060 0
 1826 00c0 0120     		movs	r0, #1
 1827 00c2 EBE7     		b	.L156
 1828              	.L160:
 1829 00c4 0120     		movs	r0, #1
ARM GAS  /tmp/ccMGA4O7.s 			page 81


 1830 00c6 E9E7     		b	.L156
 1831              	.L161:
 1832 00c8 0120     		movs	r0, #1
 1833 00ca E7E7     		b	.L156
 1834              	.LBE204:
 1835              		.cfi_endproc
 1836              	.LFE18:
 1838              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1839              		.align	1
 1840              		.global	xQueueGiveFromISR
 1841              		.syntax unified
 1842              		.thumb
 1843              		.thumb_func
 1844              		.fpu fpv4-sp-d16
 1846              	xQueueGiveFromISR:
 1847              	.LFB19:
1075:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1848              		.loc 1 1075 0
 1849              		.cfi_startproc
 1850              		@ args = 0, pretend = 0, frame = 0
 1851              		@ frame_needed = 0, uses_anonymous_args = 0
 1852              	.LVL188:
1086:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1853              		.loc 1 1086 0
 1854 0000 60B1     		cbz	r0, .L180
1075:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1855              		.loc 1 1075 0
 1856 0002 70B5     		push	{r4, r5, r6, lr}
 1857              	.LCFI28:
 1858              		.cfi_def_cfa_offset 16
 1859              		.cfi_offset 4, -16
 1860              		.cfi_offset 5, -12
 1861              		.cfi_offset 6, -8
 1862              		.cfi_offset 14, -4
 1863 0004 0446     		mov	r4, r0
1090:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1864              		.loc 1 1090 0
 1865 0006 036C     		ldr	r3, [r0, #64]
 1866 0008 8BB1     		cbz	r3, .L168
 1867              	.LBB205:
 1868              	.LBB206:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1869              		.loc 2 195 0
 1870              		.syntax unified
 1871              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1872 000a 4FF05003 			mov r3, #80												
 1873 000e 83F31188 		msr basepri, r3											
 1874 0012 BFF36F8F 		isb														
 1875 0016 BFF34F8F 		dsb														
 1876              	
 1877              	@ 0 "" 2
 1878              	.LVL189:
 1879              		.thumb
 1880              		.syntax unified
 1881              	.L169:
 1882 001a FEE7     		b	.L169
 1883              	.L180:
ARM GAS  /tmp/ccMGA4O7.s 			page 82


 1884              	.LCFI29:
 1885              		.cfi_def_cfa_offset 0
 1886              		.cfi_restore 4
 1887              		.cfi_restore 5
 1888              		.cfi_restore 6
 1889              		.cfi_restore 14
 1890              	.LBE206:
 1891              	.LBE205:
 1892              	.LBB207:
 1893              	.LBB208:
 1894              		.syntax unified
 1895              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1896 001c 4FF05003 			mov r3, #80												
 1897 0020 83F31188 		msr basepri, r3											
 1898 0024 BFF36F8F 		isb														
 1899 0028 BFF34F8F 		dsb														
 1900              	
 1901              	@ 0 "" 2
 1902              	.LVL190:
 1903              		.thumb
 1904              		.syntax unified
 1905              	.L167:
 1906 002c FEE7     		b	.L167
 1907              	.L168:
 1908              	.LCFI30:
 1909              		.cfi_def_cfa_offset 16
 1910              		.cfi_offset 4, -16
 1911              		.cfi_offset 5, -12
 1912              		.cfi_offset 6, -8
 1913              		.cfi_offset 14, -4
 1914              	.LBE208:
 1915              	.LBE207:
1095:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1916              		.loc 1 1095 0
 1917 002e 0368     		ldr	r3, [r0]
 1918 0030 2BB3     		cbz	r3, .L181
 1919              	.L170:
 1920 0032 0E46     		mov	r6, r1
1111:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1921              		.loc 1 1111 0
 1922 0034 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1923              	.LVL191:
 1924              	.LBB209:
 1925              	.LBB210:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1926              		.loc 2 211 0
 1927              		.syntax unified
 1928              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1929 0038 EFF31185 			mrs r5, basepri											
 1930 003c 4FF05003 		mov r3, #80												
 1931 0040 83F31188 		msr basepri, r3											
 1932 0044 BFF36F8F 		isb														
 1933 0048 BFF34F8F 		dsb														
 1934              	
 1935              	@ 0 "" 2
 1936              		.thumb
 1937              		.syntax unified
ARM GAS  /tmp/ccMGA4O7.s 			page 83


 1938              	.LBE210:
 1939              	.LBE209:
 1940              	.LBB211:
1115:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1941              		.loc 1 1115 0
 1942 004c A26B     		ldr	r2, [r4, #56]
 1943              	.LVL192:
1120:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1944              		.loc 1 1120 0
 1945 004e E36B     		ldr	r3, [r4, #60]
 1946 0050 9342     		cmp	r3, r2
 1947 0052 26D9     		bls	.L174
 1948              	.LBB212:
1122:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1949              		.loc 1 1122 0
 1950 0054 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1951 0058 5BB2     		sxtb	r3, r3
 1952              	.LVL193:
1132:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1953              		.loc 1 1132 0
 1954 005a 0132     		adds	r2, r2, #1
 1955              	.LVL194:
 1956 005c A263     		str	r2, [r4, #56]
1136:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1957              		.loc 1 1136 0
 1958 005e B3F1FF3F 		cmp	r3, #-1
 1959 0062 18D1     		bne	.L173
1191:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1960              		.loc 1 1191 0
 1961 0064 636A     		ldr	r3, [r4, #36]
 1962              	.LVL195:
 1963 0066 F3B1     		cbz	r3, .L175
1193:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 1964              		.loc 1 1193 0
 1965 0068 04F12400 		add	r0, r4, #36
 1966 006c FFF7FEFF 		bl	xTaskRemoveFromEventList
 1967              	.LVL196:
 1968 0070 D8B1     		cbz	r0, .L176
1197:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 1969              		.loc 1 1197 0
 1970 0072 E6B1     		cbz	r6, .L177
1199:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 1971              		.loc 1 1199 0
 1972 0074 0120     		movs	r0, #1
 1973 0076 3060     		str	r0, [r6]
 1974              	.L172:
 1975              	.LVL197:
 1976              	.LBE212:
 1977              	.LBE211:
 1978              	.LBB215:
 1979              	.LBB216:
 1980              		.loc 2 229 0
 1981              		.syntax unified
 1982              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1983 0078 85F31188 			msr basepri, r5	
 1984              	@ 0 "" 2
 1985              	.LVL198:
ARM GAS  /tmp/ccMGA4O7.s 			page 84


 1986              		.thumb
 1987              		.syntax unified
 1988              	.LBE216:
 1989              	.LBE215:
1236:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1990              		.loc 1 1236 0
 1991 007c 70BD     		pop	{r4, r5, r6, pc}
 1992              	.LVL199:
 1993              	.L181:
1095:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1994              		.loc 1 1095 0 discriminator 2
 1995 007e 4368     		ldr	r3, [r0, #4]
 1996 0080 002B     		cmp	r3, #0
 1997 0082 D6D0     		beq	.L170
 1998              	.LBB217:
 1999              	.LBB218:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2000              		.loc 2 195 0
 2001              		.syntax unified
 2002              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2003 0084 4FF05003 			mov r3, #80												
 2004 0088 83F31188 		msr basepri, r3											
 2005 008c BFF36F8F 		isb														
 2006 0090 BFF34F8F 		dsb														
 2007              	
 2008              	@ 0 "" 2
 2009              	.LVL200:
 2010              		.thumb
 2011              		.syntax unified
 2012              	.L171:
 2013 0094 FEE7     		b	.L171
 2014              	.LVL201:
 2015              	.L173:
 2016              	.LBE218:
 2017              	.LBE217:
 2018              	.LBB219:
 2019              	.LBB213:
1222:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2020              		.loc 1 1222 0
 2021 0096 0133     		adds	r3, r3, #1
 2022              	.LVL202:
 2023 0098 5BB2     		sxtb	r3, r3
 2024              	.LVL203:
 2025 009a 84F84530 		strb	r3, [r4, #69]
1225:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 2026              		.loc 1 1225 0
 2027 009e 0120     		movs	r0, #1
 2028 00a0 EAE7     		b	.L172
 2029              	.LVL204:
 2030              	.L174:
 2031              	.LBE213:
1230:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 2032              		.loc 1 1230 0
 2033 00a2 0020     		movs	r0, #0
 2034 00a4 E8E7     		b	.L172
 2035              	.LVL205:
 2036              	.L175:
ARM GAS  /tmp/ccMGA4O7.s 			page 85


 2037              	.LBB214:
1225:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 2038              		.loc 1 1225 0
 2039 00a6 0120     		movs	r0, #1
 2040 00a8 E6E7     		b	.L172
 2041              	.LVL206:
 2042              	.L176:
 2043 00aa 0120     		movs	r0, #1
 2044 00ac E4E7     		b	.L172
 2045              	.L177:
 2046 00ae 0120     		movs	r0, #1
 2047 00b0 E2E7     		b	.L172
 2048              	.LBE214:
 2049              	.LBE219:
 2050              		.cfi_endproc
 2051              	.LFE19:
 2053              		.section	.text.xQueueReceive,"ax",%progbits
 2054              		.align	1
 2055              		.global	xQueueReceive
 2056              		.syntax unified
 2057              		.thumb
 2058              		.thumb_func
 2059              		.fpu fpv4-sp-d16
 2061              	xQueueReceive:
 2062              	.LFB20:
1240:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2063              		.loc 1 1240 0
 2064              		.cfi_startproc
 2065              		@ args = 0, pretend = 0, frame = 16
 2066              		@ frame_needed = 0, uses_anonymous_args = 0
 2067              	.LVL207:
 2068 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 2069              	.LCFI31:
 2070              		.cfi_def_cfa_offset 28
 2071              		.cfi_offset 4, -28
 2072              		.cfi_offset 5, -24
 2073              		.cfi_offset 6, -20
 2074              		.cfi_offset 7, -16
 2075              		.cfi_offset 8, -12
 2076              		.cfi_offset 9, -8
 2077              		.cfi_offset 14, -4
 2078 0004 85B0     		sub	sp, sp, #20
 2079              	.LCFI32:
 2080              		.cfi_def_cfa_offset 48
 2081 0006 0192     		str	r2, [sp, #4]
 2082              	.LVL208:
1246:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2083              		.loc 1 1246 0
 2084 0008 60B1     		cbz	r0, .L203
 2085 000a 0446     		mov	r4, r0
1250:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2086              		.loc 1 1250 0
 2087 000c 99B9     		cbnz	r1, .L185
1250:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2088              		.loc 1 1250 0 is_stmt 0 discriminator 2
 2089 000e 036C     		ldr	r3, [r0, #64]
 2090 0010 8BB1     		cbz	r3, .L185
ARM GAS  /tmp/ccMGA4O7.s 			page 86


 2091              	.LBB220:
 2092              	.LBB221:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2093              		.loc 2 195 0 is_stmt 1
 2094              		.syntax unified
 2095              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2096 0012 4FF05003 			mov r3, #80												
 2097 0016 83F31188 		msr basepri, r3											
 2098 001a BFF36F8F 		isb														
 2099 001e BFF34F8F 		dsb														
 2100              	
 2101              	@ 0 "" 2
 2102              	.LVL209:
 2103              		.thumb
 2104              		.syntax unified
 2105              	.L186:
 2106 0022 FEE7     		b	.L186
 2107              	.L203:
 2108              	.LBE221:
 2109              	.LBE220:
 2110              	.LBB222:
 2111              	.LBB223:
 2112              		.syntax unified
 2113              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2114 0024 4FF05003 			mov r3, #80												
 2115 0028 83F31188 		msr basepri, r3											
 2116 002c BFF36F8F 		isb														
 2117 0030 BFF34F8F 		dsb														
 2118              	
 2119              	@ 0 "" 2
 2120              	.LVL210:
 2121              		.thumb
 2122              		.syntax unified
 2123              	.L184:
 2124 0034 FEE7     		b	.L184
 2125              	.L185:
 2126 0036 0E46     		mov	r6, r1
 2127              	.LBE223:
 2128              	.LBE222:
1255:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2129              		.loc 1 1255 0
 2130 0038 FFF7FEFF 		bl	xTaskGetSchedulerState
 2131              	.LVL211:
 2132 003c 50B9     		cbnz	r0, .L200
1255:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2133              		.loc 1 1255 0 is_stmt 0 discriminator 2
 2134 003e 019B     		ldr	r3, [sp, #4]
 2135 0040 73B1     		cbz	r3, .L201
 2136              	.LBB224:
 2137              	.LBB225:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2138              		.loc 2 195 0 is_stmt 1
 2139              		.syntax unified
 2140              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2141 0042 4FF05003 			mov r3, #80												
 2142 0046 83F31188 		msr basepri, r3											
 2143 004a BFF36F8F 		isb														
ARM GAS  /tmp/ccMGA4O7.s 			page 87


 2144 004e BFF34F8F 		dsb														
 2145              	
 2146              	@ 0 "" 2
 2147              	.LVL212:
 2148              		.thumb
 2149              		.syntax unified
 2150              	.L188:
 2151 0052 FEE7     		b	.L188
 2152              	.L200:
 2153              	.LBE225:
 2154              	.LBE224:
 2155 0054 0027     		movs	r7, #0
 2156              	.L187:
1330:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2157              		.loc 1 1330 0
 2158 0056 4FF00008 		mov	r8, #0
1344:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 2159              		.loc 1 1344 0
 2160 005a DFF8FC90 		ldr	r9, .L209
 2161 005e 37E0     		b	.L189
 2162              	.L201:
 2163 0060 0027     		movs	r7, #0
 2164 0062 F8E7     		b	.L187
 2165              	.LVL213:
 2166              	.L206:
 2167              	.LBB226:
1274:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
 2168              		.loc 1 1274 0
 2169 0064 3146     		mov	r1, r6
 2170 0066 2046     		mov	r0, r4
 2171 0068 FFF7FEFF 		bl	prvCopyDataFromQueue
 2172              	.LVL214:
1276:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2173              		.loc 1 1276 0
 2174 006c 013D     		subs	r5, r5, #1
 2175              	.LVL215:
 2176 006e A563     		str	r5, [r4, #56]
1281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2177              		.loc 1 1281 0
 2178 0070 2369     		ldr	r3, [r4, #16]
 2179 0072 2BB9     		cbnz	r3, .L204
 2180              	.L191:
1297:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 2181              		.loc 1 1297 0
 2182 0074 FFF7FEFF 		bl	vPortExitCritical
 2183              	.LVL216:
1298:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2184              		.loc 1 1298 0
 2185 0078 0120     		movs	r0, #1
 2186              	.LVL217:
 2187              	.L182:
 2188              	.LBE226:
1377:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2189              		.loc 1 1377 0
 2190 007a 05B0     		add	sp, sp, #20
 2191              	.LCFI33:
 2192              		.cfi_remember_state
ARM GAS  /tmp/ccMGA4O7.s 			page 88


 2193              		.cfi_def_cfa_offset 28
 2194              		@ sp needed
 2195 007c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 2196              	.LVL218:
 2197              	.L204:
 2198              	.LCFI34:
 2199              		.cfi_restore_state
 2200              	.LBB227:
1283:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 2201              		.loc 1 1283 0
 2202 0080 04F11000 		add	r0, r4, #16
 2203 0084 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2204              	.LVL219:
 2205 0088 0028     		cmp	r0, #0
 2206 008a F3D0     		beq	.L191
1285:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 2207              		.loc 1 1285 0
 2208 008c 324B     		ldr	r3, .L209
 2209 008e 4FF08052 		mov	r2, #268435456
 2210 0092 1A60     		str	r2, [r3]
 2211              		.syntax unified
 2212              	@ 1285 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2213 0094 BFF34F8F 		dsb
 2214              	@ 0 "" 2
 2215              	@ 1285 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2216 0098 BFF36F8F 		isb
 2217              	@ 0 "" 2
 2218              		.thumb
 2219              		.syntax unified
 2220 009c EAE7     		b	.L191
 2221              	.LVL220:
 2222              	.L207:
1306:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 2223              		.loc 1 1306 0
 2224 009e FFF7FEFF 		bl	vPortExitCritical
 2225              	.LVL221:
1308:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 2226              		.loc 1 1308 0
 2227 00a2 0020     		movs	r0, #0
 2228 00a4 E9E7     		b	.L182
 2229              	.L208:
1314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 2230              		.loc 1 1314 0
 2231 00a6 02A8     		add	r0, sp, #8
 2232 00a8 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 2233              	.LVL222:
 2234 00ac 1AE0     		b	.L194
 2235              	.L198:
 2236              	.LBE227:
1355:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 2237              		.loc 1 1355 0
 2238 00ae 2046     		mov	r0, r4
 2239 00b0 FFF7FEFF 		bl	prvUnlockQueue
 2240              	.LVL223:
1356:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2241              		.loc 1 1356 0
 2242 00b4 FFF7FEFF 		bl	xTaskResumeAll
ARM GAS  /tmp/ccMGA4O7.s 			page 89


 2243              	.LVL224:
 2244 00b8 09E0     		b	.L199
 2245              	.L197:
1363:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 2246              		.loc 1 1363 0
 2247 00ba 2046     		mov	r0, r4
 2248 00bc FFF7FEFF 		bl	prvUnlockQueue
 2249              	.LVL225:
1364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2250              		.loc 1 1364 0
 2251 00c0 FFF7FEFF 		bl	xTaskResumeAll
 2252              	.LVL226:
1366:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2253              		.loc 1 1366 0
 2254 00c4 2046     		mov	r0, r4
 2255 00c6 FFF7FEFF 		bl	prvIsQueueEmpty
 2256              	.LVL227:
 2257 00ca 0028     		cmp	r0, #0
 2258 00cc 42D1     		bne	.L205
 2259              	.L199:
 2260 00ce 0127     		movs	r7, #1
 2261              	.LVL228:
 2262              	.L189:
1265:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2263              		.loc 1 1265 0
 2264 00d0 FFF7FEFF 		bl	vPortEnterCritical
 2265              	.LVL229:
 2266              	.LBB228:
1267:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2267              		.loc 1 1267 0
 2268 00d4 A56B     		ldr	r5, [r4, #56]
 2269              	.LVL230:
1271:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2270              		.loc 1 1271 0
 2271 00d6 002D     		cmp	r5, #0
 2272 00d8 C4D1     		bne	.L206
1302:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2273              		.loc 1 1302 0
 2274 00da 019B     		ldr	r3, [sp, #4]
 2275 00dc 002B     		cmp	r3, #0
 2276 00de DED0     		beq	.L207
1310:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2277              		.loc 1 1310 0
 2278 00e0 002F     		cmp	r7, #0
 2279 00e2 E0D0     		beq	.L208
 2280              	.LVL231:
 2281              	.L194:
 2282              	.LBE228:
1324:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2283              		.loc 1 1324 0
 2284 00e4 FFF7FEFF 		bl	vPortExitCritical
 2285              	.LVL232:
1329:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 2286              		.loc 1 1329 0
 2287 00e8 FFF7FEFF 		bl	vTaskSuspendAll
 2288              	.LVL233:
1330:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccMGA4O7.s 			page 90


 2289              		.loc 1 1330 0
 2290 00ec FFF7FEFF 		bl	vPortEnterCritical
 2291              	.LVL234:
 2292 00f0 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2293 00f4 5BB2     		sxtb	r3, r3
 2294 00f6 B3F1FF3F 		cmp	r3, #-1
 2295 00fa 08BF     		it	eq
 2296 00fc 84F84480 		strbeq	r8, [r4, #68]
 2297 0100 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2298 0104 5BB2     		sxtb	r3, r3
 2299 0106 B3F1FF3F 		cmp	r3, #-1
 2300 010a 08BF     		it	eq
 2301 010c 84F84580 		strbeq	r8, [r4, #69]
 2302 0110 FFF7FEFF 		bl	vPortExitCritical
 2303              	.LVL235:
1333:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2304              		.loc 1 1333 0
 2305 0114 01A9     		add	r1, sp, #4
 2306 0116 02A8     		add	r0, sp, #8
 2307 0118 FFF7FEFF 		bl	xTaskCheckForTimeOut
 2308              	.LVL236:
 2309 011c 0028     		cmp	r0, #0
 2310 011e CCD1     		bne	.L197
1337:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2311              		.loc 1 1337 0
 2312 0120 2046     		mov	r0, r4
 2313 0122 FFF7FEFF 		bl	prvIsQueueEmpty
 2314              	.LVL237:
 2315 0126 0028     		cmp	r0, #0
 2316 0128 C1D0     		beq	.L198
1340:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 2317              		.loc 1 1340 0
 2318 012a 0199     		ldr	r1, [sp, #4]
 2319 012c 04F12400 		add	r0, r4, #36
 2320 0130 FFF7FEFF 		bl	vTaskPlaceOnEventList
 2321              	.LVL238:
1341:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2322              		.loc 1 1341 0
 2323 0134 2046     		mov	r0, r4
 2324 0136 FFF7FEFF 		bl	prvUnlockQueue
 2325              	.LVL239:
1342:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2326              		.loc 1 1342 0
 2327 013a FFF7FEFF 		bl	xTaskResumeAll
 2328              	.LVL240:
 2329 013e 0028     		cmp	r0, #0
 2330 0140 C5D1     		bne	.L199
1344:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 2331              		.loc 1 1344 0
 2332 0142 4FF08053 		mov	r3, #268435456
 2333 0146 C9F80030 		str	r3, [r9]
 2334              		.syntax unified
 2335              	@ 1344 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2336 014a BFF34F8F 		dsb
 2337              	@ 0 "" 2
 2338              	@ 1344 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2339 014e BFF36F8F 		isb
ARM GAS  /tmp/ccMGA4O7.s 			page 91


 2340              	@ 0 "" 2
 2341              		.thumb
 2342              		.syntax unified
 2343 0152 BCE7     		b	.L199
 2344              	.L205:
1369:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2345              		.loc 1 1369 0
 2346 0154 0020     		movs	r0, #0
 2347 0156 90E7     		b	.L182
 2348              	.L210:
 2349              		.align	2
 2350              	.L209:
 2351 0158 04ED00E0 		.word	-536810236
 2352              		.cfi_endproc
 2353              	.LFE20:
 2355              		.section	.text.xQueueSemaphoreTake,"ax",%progbits
 2356              		.align	1
 2357              		.global	xQueueSemaphoreTake
 2358              		.syntax unified
 2359              		.thumb
 2360              		.thumb_func
 2361              		.fpu fpv4-sp-d16
 2363              	xQueueSemaphoreTake:
 2364              	.LFB21:
1381:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2365              		.loc 1 1381 0
 2366              		.cfi_startproc
 2367              		@ args = 0, pretend = 0, frame = 16
 2368              		@ frame_needed = 0, uses_anonymous_args = 0
 2369              	.LVL241:
 2370 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2371              	.LCFI35:
 2372              		.cfi_def_cfa_offset 24
 2373              		.cfi_offset 4, -24
 2374              		.cfi_offset 5, -20
 2375              		.cfi_offset 6, -16
 2376              		.cfi_offset 7, -12
 2377              		.cfi_offset 8, -8
 2378              		.cfi_offset 14, -4
 2379 0004 84B0     		sub	sp, sp, #16
 2380              	.LCFI36:
 2381              		.cfi_def_cfa_offset 40
 2382 0006 0191     		str	r1, [sp, #4]
 2383              	.LVL242:
1391:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2384              		.loc 1 1391 0
 2385 0008 40B9     		cbnz	r0, .L212
 2386              	.LBB241:
 2387              	.LBB242:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2388              		.loc 2 195 0
 2389              		.syntax unified
 2390              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2391 000a 4FF05003 			mov r3, #80												
 2392 000e 83F31188 		msr basepri, r3											
 2393 0012 BFF36F8F 		isb														
 2394 0016 BFF34F8F 		dsb														
ARM GAS  /tmp/ccMGA4O7.s 			page 92


 2395              	
 2396              	@ 0 "" 2
 2397              	.LVL243:
 2398              		.thumb
 2399              		.syntax unified
 2400              	.L213:
 2401 001a FEE7     		b	.L213
 2402              	.L212:
 2403 001c 0446     		mov	r4, r0
 2404              	.LBE242:
 2405              	.LBE241:
1395:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2406              		.loc 1 1395 0
 2407 001e 036C     		ldr	r3, [r0, #64]
 2408 0020 43B1     		cbz	r3, .L214
 2409              	.LBB243:
 2410              	.LBB244:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2411              		.loc 2 195 0
 2412              		.syntax unified
 2413              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2414 0022 4FF05003 			mov r3, #80												
 2415 0026 83F31188 		msr basepri, r3											
 2416 002a BFF36F8F 		isb														
 2417 002e BFF34F8F 		dsb														
 2418              	
 2419              	@ 0 "" 2
 2420              	.LVL244:
 2421              		.thumb
 2422              		.syntax unified
 2423              	.L215:
 2424 0032 FEE7     		b	.L215
 2425              	.L214:
 2426              	.LBE244:
 2427              	.LBE243:
1400:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2428              		.loc 1 1400 0
 2429 0034 FFF7FEFF 		bl	xTaskGetSchedulerState
 2430              	.LVL245:
 2431 0038 50B9     		cbnz	r0, .L234
1400:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2432              		.loc 1 1400 0 is_stmt 0 discriminator 2
 2433 003a 019B     		ldr	r3, [sp, #4]
 2434 003c 73B1     		cbz	r3, .L235
 2435              	.LBB245:
 2436              	.LBB246:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2437              		.loc 2 195 0 is_stmt 1
 2438              		.syntax unified
 2439              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2440 003e 4FF05003 			mov r3, #80												
 2441 0042 83F31188 		msr basepri, r3											
 2442 0046 BFF36F8F 		isb														
 2443 004a BFF34F8F 		dsb														
 2444              	
 2445              	@ 0 "" 2
 2446              	.LVL246:
ARM GAS  /tmp/ccMGA4O7.s 			page 93


 2447              		.thumb
 2448              		.syntax unified
 2449              	.L217:
 2450 004e FEE7     		b	.L217
 2451              	.L234:
 2452              	.LBE246:
 2453              	.LBE245:
 2454 0050 0025     		movs	r5, #0
 2455 0052 2E46     		mov	r6, r5
 2456              	.L216:
1502:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2457              		.loc 1 1502 0
 2458 0054 0027     		movs	r7, #0
1536:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 2459              		.loc 1 1536 0
 2460 0056 DFF84C81 		ldr	r8, .L243
 2461 005a 4AE0     		b	.L218
 2462              	.L235:
 2463 005c 0025     		movs	r5, #0
 2464 005e 2E46     		mov	r6, r5
 2465 0060 F8E7     		b	.L216
 2466              	.LVL247:
 2467              	.L239:
 2468              	.LBB247:
1425:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2469              		.loc 1 1425 0
 2470 0062 013B     		subs	r3, r3, #1
 2471              	.LVL248:
 2472 0064 A363     		str	r3, [r4, #56]
1429:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 2473              		.loc 1 1429 0
 2474 0066 2368     		ldr	r3, [r4]
 2475              	.LVL249:
 2476 0068 13B9     		cbnz	r3, .L220
1433:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 2477              		.loc 1 1433 0
 2478 006a FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 2479              	.LVL250:
 2480 006e 6060     		str	r0, [r4, #4]
 2481              	.L220:
1444:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2482              		.loc 1 1444 0
 2483 0070 2369     		ldr	r3, [r4, #16]
 2484 0072 63B1     		cbz	r3, .L221
1446:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 2485              		.loc 1 1446 0
 2486 0074 04F11000 		add	r0, r4, #16
 2487 0078 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2488              	.LVL251:
 2489 007c 38B1     		cbz	r0, .L221
1448:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 2490              		.loc 1 1448 0
 2491 007e 494B     		ldr	r3, .L243
 2492 0080 4FF08052 		mov	r2, #268435456
 2493 0084 1A60     		str	r2, [r3]
 2494              		.syntax unified
 2495              	@ 1448 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
ARM GAS  /tmp/ccMGA4O7.s 			page 94


 2496 0086 BFF34F8F 		dsb
 2497              	@ 0 "" 2
 2498              	@ 1448 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2499 008a BFF36F8F 		isb
 2500              	@ 0 "" 2
 2501              		.thumb
 2502              		.syntax unified
 2503              	.L221:
1460:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 2504              		.loc 1 1460 0
 2505 008e FFF7FEFF 		bl	vPortExitCritical
 2506              	.LVL252:
1461:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2507              		.loc 1 1461 0
 2508 0092 0125     		movs	r5, #1
 2509              	.LVL253:
 2510              	.L211:
 2511              	.LBE247:
1596:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2512              		.loc 1 1596 0
 2513 0094 2846     		mov	r0, r5
 2514 0096 04B0     		add	sp, sp, #16
 2515              	.LCFI37:
 2516              		.cfi_remember_state
 2517              		.cfi_def_cfa_offset 24
 2518              		@ sp needed
 2519 0098 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2520              	.LVL254:
 2521              	.L240:
 2522              	.LCFI38:
 2523              		.cfi_restore_state
 2524              	.LBB250:
1472:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 2525              		.loc 1 1472 0
 2526 009c 45B1     		cbz	r5, .L224
 2527              	.LBB248:
 2528              	.LBB249:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2529              		.loc 2 195 0
 2530              		.syntax unified
 2531              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2532 009e 4FF05003 			mov r3, #80												
 2533 00a2 83F31188 		msr basepri, r3											
 2534 00a6 BFF36F8F 		isb														
 2535 00aa BFF34F8F 		dsb														
 2536              	
 2537              	@ 0 "" 2
 2538              	.LVL255:
 2539              		.thumb
 2540              		.syntax unified
 2541              	.L225:
 2542 00ae FEE7     		b	.L225
 2543              	.L224:
 2544              	.LBE249:
 2545              	.LBE248:
1478:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 2546              		.loc 1 1478 0
ARM GAS  /tmp/ccMGA4O7.s 			page 95


 2547 00b0 FFF7FEFF 		bl	vPortExitCritical
 2548              	.LVL256:
1480:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 2549              		.loc 1 1480 0
 2550 00b4 EEE7     		b	.L211
 2551              	.L241:
1486:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 2552              		.loc 1 1486 0
 2553 00b6 02A8     		add	r0, sp, #8
 2554 00b8 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 2555              	.LVL257:
 2556 00bc 23E0     		b	.L226
 2557              	.L242:
 2558              	.LBE250:
1519:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 2559              		.loc 1 1519 0
 2560 00be FFF7FEFF 		bl	vPortEnterCritical
 2561              	.LVL258:
1521:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 2562              		.loc 1 1521 0
 2563 00c2 6068     		ldr	r0, [r4, #4]
 2564 00c4 FFF7FEFF 		bl	xTaskPriorityInherit
 2565              	.LVL259:
 2566 00c8 0546     		mov	r5, r0
 2567              	.LVL260:
1523:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 2568              		.loc 1 1523 0
 2569 00ca FFF7FEFF 		bl	vPortExitCritical
 2570              	.LVL261:
 2571 00ce 40E0     		b	.L231
 2572              	.LVL262:
 2573              	.L230:
1547:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 2574              		.loc 1 1547 0
 2575 00d0 2046     		mov	r0, r4
 2576 00d2 FFF7FEFF 		bl	prvUnlockQueue
 2577              	.LVL263:
1548:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2578              		.loc 1 1548 0
 2579 00d6 FFF7FEFF 		bl	xTaskResumeAll
 2580              	.LVL264:
 2581 00da 09E0     		b	.L232
 2582              	.L229:
1554:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 2583              		.loc 1 1554 0
 2584 00dc 2046     		mov	r0, r4
 2585 00de FFF7FEFF 		bl	prvUnlockQueue
 2586              	.LVL265:
1555:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2587              		.loc 1 1555 0
 2588 00e2 FFF7FEFF 		bl	xTaskResumeAll
 2589              	.LVL266:
1561:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2590              		.loc 1 1561 0
 2591 00e6 2046     		mov	r0, r4
 2592 00e8 FFF7FEFF 		bl	prvIsQueueEmpty
 2593              	.LVL267:
ARM GAS  /tmp/ccMGA4O7.s 			page 96


 2594 00ec 0028     		cmp	r0, #0
 2595 00ee 45D1     		bne	.L238
 2596              	.L232:
 2597 00f0 0126     		movs	r6, #1
 2598              	.LVL268:
 2599              	.L218:
1411:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2600              		.loc 1 1411 0
 2601 00f2 FFF7FEFF 		bl	vPortEnterCritical
 2602              	.LVL269:
 2603              	.LBB251:
1415:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2604              		.loc 1 1415 0
 2605 00f6 A36B     		ldr	r3, [r4, #56]
 2606              	.LVL270:
1419:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2607              		.loc 1 1419 0
 2608 00f8 002B     		cmp	r3, #0
 2609 00fa B2D1     		bne	.L239
1465:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2610              		.loc 1 1465 0
 2611 00fc 019B     		ldr	r3, [sp, #4]
 2612              	.LVL271:
 2613 00fe 002B     		cmp	r3, #0
 2614 0100 CCD0     		beq	.L240
1482:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2615              		.loc 1 1482 0
 2616 0102 002E     		cmp	r6, #0
 2617 0104 D7D0     		beq	.L241
 2618              	.LVL272:
 2619              	.L226:
 2620              	.LBE251:
1496:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2621              		.loc 1 1496 0
 2622 0106 FFF7FEFF 		bl	vPortExitCritical
 2623              	.LVL273:
1501:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 2624              		.loc 1 1501 0
 2625 010a FFF7FEFF 		bl	vTaskSuspendAll
 2626              	.LVL274:
1502:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2627              		.loc 1 1502 0
 2628 010e FFF7FEFF 		bl	vPortEnterCritical
 2629              	.LVL275:
 2630 0112 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2631 0116 5BB2     		sxtb	r3, r3
 2632 0118 B3F1FF3F 		cmp	r3, #-1
 2633 011c 08BF     		it	eq
 2634 011e 84F84470 		strbeq	r7, [r4, #68]
 2635 0122 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2636 0126 5BB2     		sxtb	r3, r3
 2637 0128 B3F1FF3F 		cmp	r3, #-1
 2638 012c 08BF     		it	eq
 2639 012e 84F84570 		strbeq	r7, [r4, #69]
 2640 0132 FFF7FEFF 		bl	vPortExitCritical
 2641              	.LVL276:
1505:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
ARM GAS  /tmp/ccMGA4O7.s 			page 97


 2642              		.loc 1 1505 0
 2643 0136 01A9     		add	r1, sp, #4
 2644 0138 02A8     		add	r0, sp, #8
 2645 013a FFF7FEFF 		bl	xTaskCheckForTimeOut
 2646              	.LVL277:
 2647 013e 0028     		cmp	r0, #0
 2648 0140 CCD1     		bne	.L229
1511:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2649              		.loc 1 1511 0
 2650 0142 2046     		mov	r0, r4
 2651 0144 FFF7FEFF 		bl	prvIsQueueEmpty
 2652              	.LVL278:
 2653 0148 0028     		cmp	r0, #0
 2654 014a C1D0     		beq	.L230
1517:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 2655              		.loc 1 1517 0
 2656 014c 2368     		ldr	r3, [r4]
 2657 014e 002B     		cmp	r3, #0
 2658 0150 B5D0     		beq	.L242
 2659              	.L231:
1532:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 2660              		.loc 1 1532 0
 2661 0152 0199     		ldr	r1, [sp, #4]
 2662 0154 04F12400 		add	r0, r4, #36
 2663 0158 FFF7FEFF 		bl	vTaskPlaceOnEventList
 2664              	.LVL279:
1533:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2665              		.loc 1 1533 0
 2666 015c 2046     		mov	r0, r4
 2667 015e FFF7FEFF 		bl	prvUnlockQueue
 2668              	.LVL280:
1534:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2669              		.loc 1 1534 0
 2670 0162 FFF7FEFF 		bl	xTaskResumeAll
 2671              	.LVL281:
 2672 0166 0028     		cmp	r0, #0
 2673 0168 C2D1     		bne	.L232
1536:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 2674              		.loc 1 1536 0
 2675 016a 4FF08053 		mov	r3, #268435456
 2676 016e C8F80030 		str	r3, [r8]
 2677              		.syntax unified
 2678              	@ 1536 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2679 0172 BFF34F8F 		dsb
 2680              	@ 0 "" 2
 2681              	@ 1536 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2682 0176 BFF36F8F 		isb
 2683              	@ 0 "" 2
 2684              		.thumb
 2685              		.syntax unified
 2686 017a B9E7     		b	.L232
 2687              	.L238:
1568:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 2688              		.loc 1 1568 0
 2689 017c 002D     		cmp	r5, #0
 2690 017e 89D0     		beq	.L211
1570:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
ARM GAS  /tmp/ccMGA4O7.s 			page 98


 2691              		.loc 1 1570 0
 2692 0180 FFF7FEFF 		bl	vPortEnterCritical
 2693              	.LVL282:
 2694              	.LBB252:
 2695              	.LBB253:
 2696              	.LBB254:
2024:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2697              		.loc 1 2024 0
 2698 0184 636A     		ldr	r3, [r4, #36]
 2699 0186 53B1     		cbz	r3, .L236
2026:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 2700              		.loc 1 2026 0
 2701 0188 236B     		ldr	r3, [r4, #48]
 2702 018a 1968     		ldr	r1, [r3]
 2703 018c C1F13801 		rsb	r1, r1, #56
 2704              	.LVL283:
 2705              	.L233:
 2706              	.LBE254:
 2707              	.LBE253:
1580:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 2708              		.loc 1 1580 0
 2709 0190 6068     		ldr	r0, [r4, #4]
 2710 0192 FFF7FEFF 		bl	vTaskPriorityDisinheritAfterTimeout
 2711              	.LVL284:
 2712              	.LBE252:
1582:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 2713              		.loc 1 1582 0
 2714 0196 FFF7FEFF 		bl	vPortExitCritical
 2715              	.LVL285:
1588:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2716              		.loc 1 1588 0
 2717 019a 0025     		movs	r5, #0
 2718 019c 7AE7     		b	.L211
 2719              	.LVL286:
 2720              	.L236:
 2721              	.LBB257:
 2722              	.LBB256:
 2723              	.LBB255:
2030:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 2724              		.loc 1 2030 0
 2725 019e 0021     		movs	r1, #0
 2726 01a0 F6E7     		b	.L233
 2727              	.L244:
 2728 01a2 00BF     		.align	2
 2729              	.L243:
 2730 01a4 04ED00E0 		.word	-536810236
 2731              	.LBE255:
 2732              	.LBE256:
 2733              	.LBE257:
 2734              		.cfi_endproc
 2735              	.LFE21:
 2737              		.section	.text.xQueueTakeMutexRecursive,"ax",%progbits
 2738              		.align	1
 2739              		.global	xQueueTakeMutexRecursive
 2740              		.syntax unified
 2741              		.thumb
 2742              		.thumb_func
ARM GAS  /tmp/ccMGA4O7.s 			page 99


 2743              		.fpu fpv4-sp-d16
 2745              	xQueueTakeMutexRecursive:
 2746              	.LFB14:
 630:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 2747              		.loc 1 630 0
 2748              		.cfi_startproc
 2749              		@ args = 0, pretend = 0, frame = 0
 2750              		@ frame_needed = 0, uses_anonymous_args = 0
 2751              	.LVL287:
 634:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2752              		.loc 1 634 0
 2753 0000 40B9     		cbnz	r0, .L246
 2754              	.LBB258:
 2755              	.LBB259:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2756              		.loc 2 195 0
 2757              		.syntax unified
 2758              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2759 0002 4FF05003 			mov r3, #80												
 2760 0006 83F31188 		msr basepri, r3											
 2761 000a BFF36F8F 		isb														
 2762 000e BFF34F8F 		dsb														
 2763              	
 2764              	@ 0 "" 2
 2765              	.LVL288:
 2766              		.thumb
 2767              		.syntax unified
 2768              	.L247:
 2769 0012 FEE7     		b	.L247
 2770              	.L246:
 2771              	.LBE259:
 2772              	.LBE258:
 630:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 2773              		.loc 1 630 0
 2774 0014 70B5     		push	{r4, r5, r6, lr}
 2775              	.LCFI39:
 2776              		.cfi_def_cfa_offset 16
 2777              		.cfi_offset 4, -16
 2778              		.cfi_offset 5, -12
 2779              		.cfi_offset 6, -8
 2780              		.cfi_offset 14, -4
 2781 0016 0446     		mov	r4, r0
 2782 0018 0D46     		mov	r5, r1
 641:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2783              		.loc 1 641 0
 2784 001a 4668     		ldr	r6, [r0, #4]
 2785 001c FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 2786              	.LVL289:
 2787 0020 8642     		cmp	r6, r0
 2788 0022 09D0     		beq	.L252
 648:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2789              		.loc 1 648 0
 2790 0024 2946     		mov	r1, r5
 2791 0026 2046     		mov	r0, r4
 2792 0028 FFF7FEFF 		bl	xQueueSemaphoreTake
 2793              	.LVL290:
 653:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
ARM GAS  /tmp/ccMGA4O7.s 			page 100


 2794              		.loc 1 653 0
 2795 002c 0246     		mov	r2, r0
 2796 002e 38B1     		cbz	r0, .L245
 655:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2797              		.loc 1 655 0
 2798 0030 E368     		ldr	r3, [r4, #12]
 2799 0032 0133     		adds	r3, r3, #1
 2800 0034 E360     		str	r3, [r4, #12]
 663:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2801              		.loc 1 663 0
 2802 0036 03E0     		b	.L245
 2803              	.LVL291:
 2804              	.L252:
 643:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 2805              		.loc 1 643 0
 2806 0038 E368     		ldr	r3, [r4, #12]
 2807 003a 0133     		adds	r3, r3, #1
 2808 003c E360     		str	r3, [r4, #12]
 2809              	.LVL292:
 644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 2810              		.loc 1 644 0
 2811 003e 0122     		movs	r2, #1
 2812              	.LVL293:
 2813              	.L245:
 664:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2814              		.loc 1 664 0
 2815 0040 1046     		mov	r0, r2
 2816 0042 70BD     		pop	{r4, r5, r6, pc}
 2817              		.cfi_endproc
 2818              	.LFE14:
 2820              		.section	.text.xQueuePeek,"ax",%progbits
 2821              		.align	1
 2822              		.global	xQueuePeek
 2823              		.syntax unified
 2824              		.thumb
 2825              		.thumb_func
 2826              		.fpu fpv4-sp-d16
 2828              	xQueuePeek:
 2829              	.LFB22:
1600:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2830              		.loc 1 1600 0
 2831              		.cfi_startproc
 2832              		@ args = 0, pretend = 0, frame = 16
 2833              		@ frame_needed = 0, uses_anonymous_args = 0
 2834              	.LVL294:
 2835 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2836              	.LCFI40:
 2837              		.cfi_def_cfa_offset 24
 2838              		.cfi_offset 4, -24
 2839              		.cfi_offset 5, -20
 2840              		.cfi_offset 6, -16
 2841              		.cfi_offset 7, -12
 2842              		.cfi_offset 8, -8
 2843              		.cfi_offset 14, -4
 2844 0004 84B0     		sub	sp, sp, #16
 2845              	.LCFI41:
 2846              		.cfi_def_cfa_offset 40
ARM GAS  /tmp/ccMGA4O7.s 			page 101


 2847 0006 0192     		str	r2, [sp, #4]
 2848              	.LVL295:
1607:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2849              		.loc 1 1607 0
 2850 0008 60B1     		cbz	r0, .L274
 2851 000a 0446     		mov	r4, r0
1611:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2852              		.loc 1 1611 0
 2853 000c 99B9     		cbnz	r1, .L256
1611:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2854              		.loc 1 1611 0 is_stmt 0 discriminator 2
 2855 000e 036C     		ldr	r3, [r0, #64]
 2856 0010 8BB1     		cbz	r3, .L256
 2857              	.LBB260:
 2858              	.LBB261:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2859              		.loc 2 195 0 is_stmt 1
 2860              		.syntax unified
 2861              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2862 0012 4FF05003 			mov r3, #80												
 2863 0016 83F31188 		msr basepri, r3											
 2864 001a BFF36F8F 		isb														
 2865 001e BFF34F8F 		dsb														
 2866              	
 2867              	@ 0 "" 2
 2868              	.LVL296:
 2869              		.thumb
 2870              		.syntax unified
 2871              	.L257:
 2872 0022 FEE7     		b	.L257
 2873              	.L274:
 2874              	.LBE261:
 2875              	.LBE260:
 2876              	.LBB262:
 2877              	.LBB263:
 2878              		.syntax unified
 2879              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2880 0024 4FF05003 			mov r3, #80												
 2881 0028 83F31188 		msr basepri, r3											
 2882 002c BFF36F8F 		isb														
 2883 0030 BFF34F8F 		dsb														
 2884              	
 2885              	@ 0 "" 2
 2886              	.LVL297:
 2887              		.thumb
 2888              		.syntax unified
 2889              	.L255:
 2890 0034 FEE7     		b	.L255
 2891              	.L256:
 2892 0036 0D46     		mov	r5, r1
 2893              	.LBE263:
 2894              	.LBE262:
1616:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2895              		.loc 1 1616 0
 2896 0038 FFF7FEFF 		bl	xTaskGetSchedulerState
 2897              	.LVL298:
 2898 003c 50B9     		cbnz	r0, .L271
ARM GAS  /tmp/ccMGA4O7.s 			page 102


1616:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2899              		.loc 1 1616 0 is_stmt 0 discriminator 2
 2900 003e 019B     		ldr	r3, [sp, #4]
 2901 0040 6BB1     		cbz	r3, .L272
 2902              	.LBB264:
 2903              	.LBB265:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2904              		.loc 2 195 0 is_stmt 1
 2905              		.syntax unified
 2906              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2907 0042 4FF05003 			mov r3, #80												
 2908 0046 83F31188 		msr basepri, r3											
 2909 004a BFF36F8F 		isb														
 2910 004e BFF34F8F 		dsb														
 2911              	
 2912              	@ 0 "" 2
 2913              	.LVL299:
 2914              		.thumb
 2915              		.syntax unified
 2916              	.L259:
 2917 0052 FEE7     		b	.L259
 2918              	.L271:
 2919              	.LBE265:
 2920              	.LBE264:
 2921 0054 0026     		movs	r6, #0
 2922              	.L258:
1699:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2923              		.loc 1 1699 0
 2924 0056 0027     		movs	r7, #0
1713:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 2925              		.loc 1 1713 0
 2926 0058 DFF8FC80 		ldr	r8, .L280
 2927 005c 37E0     		b	.L260
 2928              	.L272:
 2929 005e 0026     		movs	r6, #0
 2930 0060 F9E7     		b	.L258
 2931              	.LVL300:
 2932              	.L277:
 2933              	.LBB266:
1638:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2934              		.loc 1 1638 0
 2935 0062 E668     		ldr	r6, [r4, #12]
 2936              	.LVL301:
1640:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_PEEK( pxQueue );
 2937              		.loc 1 1640 0
 2938 0064 2946     		mov	r1, r5
 2939 0066 2046     		mov	r0, r4
 2940 0068 FFF7FEFF 		bl	prvCopyDataFromQueue
 2941              	.LVL302:
1644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2942              		.loc 1 1644 0
 2943 006c E660     		str	r6, [r4, #12]
1648:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2944              		.loc 1 1648 0
 2945 006e 636A     		ldr	r3, [r4, #36]
 2946 0070 2BB9     		cbnz	r3, .L275
 2947              	.L262:
ARM GAS  /tmp/ccMGA4O7.s 			page 103


1665:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 2948              		.loc 1 1665 0
 2949 0072 FFF7FEFF 		bl	vPortExitCritical
 2950              	.LVL303:
1666:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2951              		.loc 1 1666 0
 2952 0076 0120     		movs	r0, #1
 2953              	.LVL304:
 2954              	.L253:
 2955              	.LBE266:
1746:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2956              		.loc 1 1746 0
 2957 0078 04B0     		add	sp, sp, #16
 2958              	.LCFI42:
 2959              		.cfi_remember_state
 2960              		.cfi_def_cfa_offset 24
 2961              		@ sp needed
 2962 007a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2963              	.LVL305:
 2964              	.L275:
 2965              	.LCFI43:
 2966              		.cfi_restore_state
 2967              	.LBB267:
1650:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 2968              		.loc 1 1650 0
 2969 007e 04F12400 		add	r0, r4, #36
 2970 0082 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2971              	.LVL306:
 2972 0086 0028     		cmp	r0, #0
 2973 0088 F3D0     		beq	.L262
1653:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 2974              		.loc 1 1653 0
 2975 008a 334B     		ldr	r3, .L280
 2976 008c 4FF08052 		mov	r2, #268435456
 2977 0090 1A60     		str	r2, [r3]
 2978              		.syntax unified
 2979              	@ 1653 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2980 0092 BFF34F8F 		dsb
 2981              	@ 0 "" 2
 2982              	@ 1653 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2983 0096 BFF36F8F 		isb
 2984              	@ 0 "" 2
 2985              		.thumb
 2986              		.syntax unified
 2987 009a EAE7     		b	.L262
 2988              	.LVL307:
 2989              	.L278:
1674:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
 2990              		.loc 1 1674 0
 2991 009c FFF7FEFF 		bl	vPortExitCritical
 2992              	.LVL308:
1676:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 2993              		.loc 1 1676 0
 2994 00a0 0020     		movs	r0, #0
 2995 00a2 E9E7     		b	.L253
 2996              	.L279:
1683:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
ARM GAS  /tmp/ccMGA4O7.s 			page 104


 2997              		.loc 1 1683 0
 2998 00a4 02A8     		add	r0, sp, #8
 2999 00a6 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 3000              	.LVL309:
 3001 00aa 1AE0     		b	.L265
 3002              	.L269:
 3003              	.LBE267:
1724:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 3004              		.loc 1 1724 0
 3005 00ac 2046     		mov	r0, r4
 3006 00ae FFF7FEFF 		bl	prvUnlockQueue
 3007              	.LVL310:
1725:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 3008              		.loc 1 1725 0
 3009 00b2 FFF7FEFF 		bl	xTaskResumeAll
 3010              	.LVL311:
 3011 00b6 09E0     		b	.L270
 3012              	.L268:
1732:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 3013              		.loc 1 1732 0
 3014 00b8 2046     		mov	r0, r4
 3015 00ba FFF7FEFF 		bl	prvUnlockQueue
 3016              	.LVL312:
1733:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3017              		.loc 1 1733 0
 3018 00be FFF7FEFF 		bl	xTaskResumeAll
 3019              	.LVL313:
1735:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 3020              		.loc 1 1735 0
 3021 00c2 2046     		mov	r0, r4
 3022 00c4 FFF7FEFF 		bl	prvIsQueueEmpty
 3023              	.LVL314:
 3024 00c8 0028     		cmp	r0, #0
 3025 00ca 42D1     		bne	.L276
 3026              	.L270:
 3027 00cc 0126     		movs	r6, #1
 3028              	.LVL315:
 3029              	.L260:
1627:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3030              		.loc 1 1627 0
 3031 00ce FFF7FEFF 		bl	vPortEnterCritical
 3032              	.LVL316:
 3033              	.LBB268:
1629:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3034              		.loc 1 1629 0
 3035 00d2 A36B     		ldr	r3, [r4, #56]
 3036              	.LVL317:
1633:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 3037              		.loc 1 1633 0
 3038 00d4 002B     		cmp	r3, #0
 3039 00d6 C4D1     		bne	.L277
1670:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 3040              		.loc 1 1670 0
 3041 00d8 019B     		ldr	r3, [sp, #4]
 3042              	.LVL318:
 3043 00da 002B     		cmp	r3, #0
 3044 00dc DED0     		beq	.L278
ARM GAS  /tmp/ccMGA4O7.s 			page 105


1678:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 3045              		.loc 1 1678 0
 3046 00de 002E     		cmp	r6, #0
 3047 00e0 E0D0     		beq	.L279
 3048              	.LVL319:
 3049              	.L265:
 3050              	.LBE268:
1693:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3051              		.loc 1 1693 0
 3052 00e2 FFF7FEFF 		bl	vPortExitCritical
 3053              	.LVL320:
1698:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 3054              		.loc 1 1698 0
 3055 00e6 FFF7FEFF 		bl	vTaskSuspendAll
 3056              	.LVL321:
1699:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3057              		.loc 1 1699 0
 3058 00ea FFF7FEFF 		bl	vPortEnterCritical
 3059              	.LVL322:
 3060 00ee 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 3061 00f2 5BB2     		sxtb	r3, r3
 3062 00f4 B3F1FF3F 		cmp	r3, #-1
 3063 00f8 08BF     		it	eq
 3064 00fa 84F84470 		strbeq	r7, [r4, #68]
 3065 00fe 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 3066 0102 5BB2     		sxtb	r3, r3
 3067 0104 B3F1FF3F 		cmp	r3, #-1
 3068 0108 08BF     		it	eq
 3069 010a 84F84570 		strbeq	r7, [r4, #69]
 3070 010e FFF7FEFF 		bl	vPortExitCritical
 3071              	.LVL323:
1702:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3072              		.loc 1 1702 0
 3073 0112 01A9     		add	r1, sp, #4
 3074 0114 02A8     		add	r0, sp, #8
 3075 0116 FFF7FEFF 		bl	xTaskCheckForTimeOut
 3076              	.LVL324:
 3077 011a 0028     		cmp	r0, #0
 3078 011c CCD1     		bne	.L268
1706:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 3079              		.loc 1 1706 0
 3080 011e 2046     		mov	r0, r4
 3081 0120 FFF7FEFF 		bl	prvIsQueueEmpty
 3082              	.LVL325:
 3083 0124 0028     		cmp	r0, #0
 3084 0126 C1D0     		beq	.L269
1709:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 3085              		.loc 1 1709 0
 3086 0128 0199     		ldr	r1, [sp, #4]
 3087 012a 04F12400 		add	r0, r4, #36
 3088 012e FFF7FEFF 		bl	vTaskPlaceOnEventList
 3089              	.LVL326:
1710:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 3090              		.loc 1 1710 0
 3091 0132 2046     		mov	r0, r4
 3092 0134 FFF7FEFF 		bl	prvUnlockQueue
 3093              	.LVL327:
ARM GAS  /tmp/ccMGA4O7.s 			page 106


1711:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 3094              		.loc 1 1711 0
 3095 0138 FFF7FEFF 		bl	xTaskResumeAll
 3096              	.LVL328:
 3097 013c 0028     		cmp	r0, #0
 3098 013e C5D1     		bne	.L270
1713:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 3099              		.loc 1 1713 0
 3100 0140 4FF08053 		mov	r3, #268435456
 3101 0144 C8F80030 		str	r3, [r8]
 3102              		.syntax unified
 3103              	@ 1713 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 3104 0148 BFF34F8F 		dsb
 3105              	@ 0 "" 2
 3106              	@ 1713 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 3107 014c BFF36F8F 		isb
 3108              	@ 0 "" 2
 3109              		.thumb
 3110              		.syntax unified
 3111 0150 BCE7     		b	.L270
 3112              	.L276:
1738:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 3113              		.loc 1 1738 0
 3114 0152 0020     		movs	r0, #0
 3115 0154 90E7     		b	.L253
 3116              	.L281:
 3117 0156 00BF     		.align	2
 3118              	.L280:
 3119 0158 04ED00E0 		.word	-536810236
 3120              		.cfi_endproc
 3121              	.LFE22:
 3123              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 3124              		.align	1
 3125              		.global	xQueueReceiveFromISR
 3126              		.syntax unified
 3127              		.thumb
 3128              		.thumb_func
 3129              		.fpu fpv4-sp-d16
 3131              	xQueueReceiveFromISR:
 3132              	.LFB23:
1750:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 3133              		.loc 1 1750 0
 3134              		.cfi_startproc
 3135              		@ args = 0, pretend = 0, frame = 0
 3136              		@ frame_needed = 0, uses_anonymous_args = 0
 3137              	.LVL329:
 3138 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 3139              	.LCFI44:
 3140              		.cfi_def_cfa_offset 32
 3141              		.cfi_offset 3, -32
 3142              		.cfi_offset 4, -28
 3143              		.cfi_offset 5, -24
 3144              		.cfi_offset 6, -20
 3145              		.cfi_offset 7, -16
 3146              		.cfi_offset 8, -12
 3147              		.cfi_offset 9, -8
 3148              		.cfi_offset 14, -4
ARM GAS  /tmp/ccMGA4O7.s 			page 107


 3149              	.LVL330:
1755:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 3150              		.loc 1 1755 0
 3151 0004 60B1     		cbz	r0, .L294
 3152 0006 0446     		mov	r4, r0
1756:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3153              		.loc 1 1756 0
 3154 0008 99B9     		cbnz	r1, .L285
1756:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3155              		.loc 1 1756 0 is_stmt 0 discriminator 2
 3156 000a 036C     		ldr	r3, [r0, #64]
 3157 000c 8BB1     		cbz	r3, .L285
 3158              	.LBB269:
 3159              	.LBB270:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3160              		.loc 2 195 0 is_stmt 1
 3161              		.syntax unified
 3162              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3163 000e 4FF05003 			mov r3, #80												
 3164 0012 83F31188 		msr basepri, r3											
 3165 0016 BFF36F8F 		isb														
 3166 001a BFF34F8F 		dsb														
 3167              	
 3168              	@ 0 "" 2
 3169              	.LVL331:
 3170              		.thumb
 3171              		.syntax unified
 3172              	.L286:
 3173 001e FEE7     		b	.L286
 3174              	.L294:
 3175              	.LBE270:
 3176              	.LBE269:
 3177              	.LBB271:
 3178              	.LBB272:
 3179              		.syntax unified
 3180              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3181 0020 4FF05003 			mov r3, #80												
 3182 0024 83F31188 		msr basepri, r3											
 3183 0028 BFF36F8F 		isb														
 3184 002c BFF34F8F 		dsb														
 3185              	
 3186              	@ 0 "" 2
 3187              	.LVL332:
 3188              		.thumb
 3189              		.syntax unified
 3190              	.L284:
 3191 0030 FEE7     		b	.L284
 3192              	.L285:
 3193 0032 1746     		mov	r7, r2
 3194 0034 8946     		mov	r9, r1
 3195              	.LBE272:
 3196              	.LBE271:
1772:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3197              		.loc 1 1772 0
 3198 0036 FFF7FEFF 		bl	vPortValidateInterruptPriority
 3199              	.LVL333:
 3200              	.LBB273:
ARM GAS  /tmp/ccMGA4O7.s 			page 108


 3201              	.LBB274:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3202              		.loc 2 211 0
 3203              		.syntax unified
 3204              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3205 003a EFF31186 			mrs r6, basepri											
 3206 003e 4FF05003 		mov r3, #80												
 3207 0042 83F31188 		msr basepri, r3											
 3208 0046 BFF36F8F 		isb														
 3209 004a BFF34F8F 		dsb														
 3210              	
 3211              	@ 0 "" 2
 3212              		.thumb
 3213              		.syntax unified
 3214              	.LBE274:
 3215              	.LBE273:
 3216              	.LBB275:
1776:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3217              		.loc 1 1776 0
 3218 004e D4F83880 		ldr	r8, [r4, #56]
 3219              	.LVL334:
1779:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3220              		.loc 1 1779 0
 3221 0052 B8F1000F 		cmp	r8, #0
 3222 0056 1DD0     		beq	.L289
 3223              	.LBB276:
1781:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3224              		.loc 1 1781 0
 3225 0058 94F84450 		ldrb	r5, [r4, #68]	@ zero_extendqisi2
 3226 005c 6DB2     		sxtb	r5, r5
 3227              	.LVL335:
1785:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 3228              		.loc 1 1785 0
 3229 005e 4946     		mov	r1, r9
 3230 0060 2046     		mov	r0, r4
 3231 0062 FFF7FEFF 		bl	prvCopyDataFromQueue
 3232              	.LVL336:
1786:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3233              		.loc 1 1786 0
 3234 0066 08F1FF33 		add	r3, r8, #-1
 3235 006a A363     		str	r3, [r4, #56]
1792:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 3236              		.loc 1 1792 0
 3237 006c B5F1FF3F 		cmp	r5, #-1
 3238 0070 05D0     		beq	.L295
1823:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 3239              		.loc 1 1823 0
 3240 0072 6B1C     		adds	r3, r5, #1
 3241 0074 5BB2     		sxtb	r3, r3
 3242 0076 84F84430 		strb	r3, [r4, #68]
1826:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 3243              		.loc 1 1826 0
 3244 007a 0120     		movs	r0, #1
 3245 007c 0BE0     		b	.L287
 3246              	.L295:
1794:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 3247              		.loc 1 1794 0
ARM GAS  /tmp/ccMGA4O7.s 			page 109


 3248 007e 2369     		ldr	r3, [r4, #16]
 3249 0080 6BB1     		cbz	r3, .L290
1796:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 3250              		.loc 1 1796 0
 3251 0082 04F11000 		add	r0, r4, #16
 3252 0086 FFF7FEFF 		bl	xTaskRemoveFromEventList
 3253              	.LVL337:
 3254 008a 50B1     		cbz	r0, .L291
1800:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 3255              		.loc 1 1800 0
 3256 008c 5FB1     		cbz	r7, .L292
1802:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 3257              		.loc 1 1802 0
 3258 008e 0120     		movs	r0, #1
 3259 0090 3860     		str	r0, [r7]
 3260 0092 00E0     		b	.L287
 3261              	.LVL338:
 3262              	.L289:
 3263              	.LBE276:
1830:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 3264              		.loc 1 1830 0
 3265 0094 0020     		movs	r0, #0
 3266              	.L287:
 3267              	.LVL339:
 3268              	.LBE275:
 3269              	.LBB278:
 3270              	.LBB279:
 3271              		.loc 2 229 0
 3272              		.syntax unified
 3273              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3274 0096 86F31188 			msr basepri, r6	
 3275              	@ 0 "" 2
 3276              	.LVL340:
 3277              		.thumb
 3278              		.syntax unified
 3279              	.LBE279:
 3280              	.LBE278:
1837:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 3281              		.loc 1 1837 0
 3282 009a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3283              	.LVL341:
 3284              	.L290:
 3285              	.LBB280:
 3286              	.LBB277:
1826:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 3287              		.loc 1 1826 0
 3288 009e 0120     		movs	r0, #1
 3289 00a0 F9E7     		b	.L287
 3290              	.L291:
 3291 00a2 0120     		movs	r0, #1
 3292 00a4 F7E7     		b	.L287
 3293              	.L292:
 3294 00a6 0120     		movs	r0, #1
 3295 00a8 F5E7     		b	.L287
 3296              	.LBE277:
 3297              	.LBE280:
 3298              		.cfi_endproc
ARM GAS  /tmp/ccMGA4O7.s 			page 110


 3299              	.LFE23:
 3301              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 3302              		.align	1
 3303              		.global	xQueuePeekFromISR
 3304              		.syntax unified
 3305              		.thumb
 3306              		.thumb_func
 3307              		.fpu fpv4-sp-d16
 3309              	xQueuePeekFromISR:
 3310              	.LFB24:
1841:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 3311              		.loc 1 1841 0
 3312              		.cfi_startproc
 3313              		@ args = 0, pretend = 0, frame = 0
 3314              		@ frame_needed = 0, uses_anonymous_args = 0
 3315              	.LVL342:
 3316 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3317              	.LCFI45:
 3318              		.cfi_def_cfa_offset 24
 3319              		.cfi_offset 3, -24
 3320              		.cfi_offset 4, -20
 3321              		.cfi_offset 5, -16
 3322              		.cfi_offset 6, -12
 3323              		.cfi_offset 7, -8
 3324              		.cfi_offset 14, -4
 3325              	.LVL343:
1847:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 3326              		.loc 1 1847 0
 3327 0002 60B1     		cbz	r0, .L307
 3328 0004 0446     		mov	r4, r0
1848:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 3329              		.loc 1 1848 0
 3330 0006 99B9     		cbnz	r1, .L299
1848:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 3331              		.loc 1 1848 0 is_stmt 0 discriminator 2
 3332 0008 036C     		ldr	r3, [r0, #64]
 3333 000a 9BB1     		cbz	r3, .L300
 3334              	.LBB281:
 3335              	.LBB282:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3336              		.loc 2 195 0 is_stmt 1
 3337              		.syntax unified
 3338              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3339 000c 4FF05003 			mov r3, #80												
 3340 0010 83F31188 		msr basepri, r3											
 3341 0014 BFF36F8F 		isb														
 3342 0018 BFF34F8F 		dsb														
 3343              	
 3344              	@ 0 "" 2
 3345              	.LVL344:
 3346              		.thumb
 3347              		.syntax unified
 3348              	.L301:
 3349 001c FEE7     		b	.L301
 3350              	.L307:
 3351              	.LBE282:
 3352              	.LBE281:
ARM GAS  /tmp/ccMGA4O7.s 			page 111


 3353              	.LBB283:
 3354              	.LBB284:
 3355              		.syntax unified
 3356              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3357 001e 4FF05003 			mov r3, #80												
 3358 0022 83F31188 		msr basepri, r3											
 3359 0026 BFF36F8F 		isb														
 3360 002a BFF34F8F 		dsb														
 3361              	
 3362              	@ 0 "" 2
 3363              	.LVL345:
 3364              		.thumb
 3365              		.syntax unified
 3366              	.L298:
 3367 002e FEE7     		b	.L298
 3368              	.L299:
 3369              	.LBE284:
 3370              	.LBE283:
1849:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3371              		.loc 1 1849 0
 3372 0030 036C     		ldr	r3, [r0, #64]
 3373 0032 43B9     		cbnz	r3, .L302
 3374              	.L300:
 3375              	.LBB285:
 3376              	.LBB286:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3377              		.loc 2 195 0
 3378              		.syntax unified
 3379              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3380 0034 4FF05003 			mov r3, #80												
 3381 0038 83F31188 		msr basepri, r3											
 3382 003c BFF36F8F 		isb														
 3383 0040 BFF34F8F 		dsb														
 3384              	
 3385              	@ 0 "" 2
 3386              	.LVL346:
 3387              		.thumb
 3388              		.syntax unified
 3389              	.L303:
 3390 0044 FEE7     		b	.L303
 3391              	.L302:
 3392 0046 0D46     		mov	r5, r1
 3393              	.LBE286:
 3394              	.LBE285:
1865:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3395              		.loc 1 1865 0
 3396 0048 FFF7FEFF 		bl	vPortValidateInterruptPriority
 3397              	.LVL347:
 3398              	.LBB287:
 3399              	.LBB288:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3400              		.loc 2 211 0
 3401              		.syntax unified
 3402              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3403 004c EFF31186 			mrs r6, basepri											
 3404 0050 4FF05003 		mov r3, #80												
 3405 0054 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccMGA4O7.s 			page 112


 3406 0058 BFF36F8F 		isb														
 3407 005c BFF34F8F 		dsb														
 3408              	
 3409              	@ 0 "" 2
 3410              		.thumb
 3411              		.syntax unified
 3412              	.LBE288:
 3413              	.LBE287:
1870:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3414              		.loc 1 1870 0
 3415 0060 A36B     		ldr	r3, [r4, #56]
 3416 0062 4BB1     		cbz	r3, .L305
1876:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 3417              		.loc 1 1876 0
 3418 0064 E768     		ldr	r7, [r4, #12]
 3419              	.LVL348:
1877:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 3420              		.loc 1 1877 0
 3421 0066 2946     		mov	r1, r5
 3422 0068 2046     		mov	r0, r4
 3423 006a FFF7FEFF 		bl	prvCopyDataFromQueue
 3424              	.LVL349:
1878:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3425              		.loc 1 1878 0
 3426 006e E760     		str	r7, [r4, #12]
 3427              	.LVL350:
1880:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 3428              		.loc 1 1880 0
 3429 0070 0120     		movs	r0, #1
 3430              	.LVL351:
 3431              	.L304:
 3432              	.LBB289:
 3433              	.LBB290:
 3434              		.loc 2 229 0
 3435              		.syntax unified
 3436              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3437 0072 86F31188 			msr basepri, r6	
 3438              	@ 0 "" 2
 3439              	.LVL352:
 3440              		.thumb
 3441              		.syntax unified
 3442              	.LBE290:
 3443              	.LBE289:
1891:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 3444              		.loc 1 1891 0
 3445 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3446              	.LVL353:
 3447              	.L305:
1884:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 3448              		.loc 1 1884 0
 3449 0078 0020     		movs	r0, #0
 3450 007a FAE7     		b	.L304
 3451              		.cfi_endproc
 3452              	.LFE24:
 3454              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 3455              		.align	1
 3456              		.global	uxQueueMessagesWaiting
ARM GAS  /tmp/ccMGA4O7.s 			page 113


 3457              		.syntax unified
 3458              		.thumb
 3459              		.thumb_func
 3460              		.fpu fpv4-sp-d16
 3462              	uxQueueMessagesWaiting:
 3463              	.LFB25:
1895:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 3464              		.loc 1 1895 0
 3465              		.cfi_startproc
 3466              		@ args = 0, pretend = 0, frame = 0
 3467              		@ frame_needed = 0, uses_anonymous_args = 0
 3468              	.LVL354:
1898:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3469              		.loc 1 1898 0
 3470 0000 40B9     		cbnz	r0, .L309
 3471              	.LBB291:
 3472              	.LBB292:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3473              		.loc 2 195 0
 3474              		.syntax unified
 3475              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3476 0002 4FF05003 			mov r3, #80												
 3477 0006 83F31188 		msr basepri, r3											
 3478 000a BFF36F8F 		isb														
 3479 000e BFF34F8F 		dsb														
 3480              	
 3481              	@ 0 "" 2
 3482              	.LVL355:
 3483              		.thumb
 3484              		.syntax unified
 3485              	.L310:
 3486 0012 FEE7     		b	.L310
 3487              	.L309:
 3488              	.LBE292:
 3489              	.LBE291:
1895:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 3490              		.loc 1 1895 0
 3491 0014 10B5     		push	{r4, lr}
 3492              	.LCFI46:
 3493              		.cfi_def_cfa_offset 8
 3494              		.cfi_offset 4, -8
 3495              		.cfi_offset 14, -4
 3496 0016 0446     		mov	r4, r0
1900:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 3497              		.loc 1 1900 0
 3498 0018 FFF7FEFF 		bl	vPortEnterCritical
 3499              	.LVL356:
1902:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 3500              		.loc 1 1902 0
 3501 001c A46B     		ldr	r4, [r4, #56]
 3502              	.LVL357:
1904:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3503              		.loc 1 1904 0
 3504 001e FFF7FEFF 		bl	vPortExitCritical
 3505              	.LVL358:
1907:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 3506              		.loc 1 1907 0
ARM GAS  /tmp/ccMGA4O7.s 			page 114


 3507 0022 2046     		mov	r0, r4
 3508 0024 10BD     		pop	{r4, pc}
 3509              		.cfi_endproc
 3510              	.LFE25:
 3512              		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 3513              		.align	1
 3514              		.global	uxQueueSpacesAvailable
 3515              		.syntax unified
 3516              		.thumb
 3517              		.thumb_func
 3518              		.fpu fpv4-sp-d16
 3520              	uxQueueSpacesAvailable:
 3521              	.LFB26:
1911:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 3522              		.loc 1 1911 0
 3523              		.cfi_startproc
 3524              		@ args = 0, pretend = 0, frame = 0
 3525              		@ frame_needed = 0, uses_anonymous_args = 0
 3526              	.LVL359:
1916:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3527              		.loc 1 1916 0
 3528 0000 40B9     		cbnz	r0, .L314
 3529              	.LBB293:
 3530              	.LBB294:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3531              		.loc 2 195 0
 3532              		.syntax unified
 3533              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3534 0002 4FF05003 			mov r3, #80												
 3535 0006 83F31188 		msr basepri, r3											
 3536 000a BFF36F8F 		isb														
 3537 000e BFF34F8F 		dsb														
 3538              	
 3539              	@ 0 "" 2
 3540              	.LVL360:
 3541              		.thumb
 3542              		.syntax unified
 3543              	.L315:
 3544 0012 FEE7     		b	.L315
 3545              	.L314:
 3546              	.LBE294:
 3547              	.LBE293:
1911:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 3548              		.loc 1 1911 0
 3549 0014 10B5     		push	{r4, lr}
 3550              	.LCFI47:
 3551              		.cfi_def_cfa_offset 8
 3552              		.cfi_offset 4, -8
 3553              		.cfi_offset 14, -4
 3554 0016 0446     		mov	r4, r0
1918:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 3555              		.loc 1 1918 0
 3556 0018 FFF7FEFF 		bl	vPortEnterCritical
 3557              	.LVL361:
1920:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 3558              		.loc 1 1920 0
 3559 001c A36B     		ldr	r3, [r4, #56]
ARM GAS  /tmp/ccMGA4O7.s 			page 115


 3560 001e E46B     		ldr	r4, [r4, #60]
 3561              	.LVL362:
 3562 0020 E41A     		subs	r4, r4, r3
 3563              	.LVL363:
1922:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3564              		.loc 1 1922 0
 3565 0022 FFF7FEFF 		bl	vPortExitCritical
 3566              	.LVL364:
1925:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 3567              		.loc 1 1925 0
 3568 0026 2046     		mov	r0, r4
 3569 0028 10BD     		pop	{r4, pc}
 3570              		.cfi_endproc
 3571              	.LFE26:
 3573              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 3574              		.align	1
 3575              		.global	uxQueueMessagesWaitingFromISR
 3576              		.syntax unified
 3577              		.thumb
 3578              		.thumb_func
 3579              		.fpu fpv4-sp-d16
 3581              	uxQueueMessagesWaitingFromISR:
 3582              	.LFB27:
1929:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 3583              		.loc 1 1929 0
 3584              		.cfi_startproc
 3585              		@ args = 0, pretend = 0, frame = 0
 3586              		@ frame_needed = 0, uses_anonymous_args = 0
 3587              		@ link register save eliminated.
 3588              	.LVL365:
1932:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3589              		.loc 1 1932 0
 3590 0000 08B1     		cbz	r0, .L321
1934:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3591              		.loc 1 1934 0
 3592 0002 806B     		ldr	r0, [r0, #56]
 3593              	.LVL366:
1937:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 3594              		.loc 1 1937 0
 3595 0004 7047     		bx	lr
 3596              	.LVL367:
 3597              	.L321:
 3598              	.LBB295:
 3599              	.LBB296:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3600              		.loc 2 195 0
 3601              		.syntax unified
 3602              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3603 0006 4FF05003 			mov r3, #80												
 3604 000a 83F31188 		msr basepri, r3											
 3605 000e BFF36F8F 		isb														
 3606 0012 BFF34F8F 		dsb														
 3607              	
 3608              	@ 0 "" 2
 3609              	.LVL368:
 3610              		.thumb
 3611              		.syntax unified
ARM GAS  /tmp/ccMGA4O7.s 			page 116


 3612              	.L320:
 3613 0016 FEE7     		b	.L320
 3614              	.LBE296:
 3615              	.LBE295:
 3616              		.cfi_endproc
 3617              	.LFE27:
 3619              		.section	.text.uxQueueGetQueueNumber,"ax",%progbits
 3620              		.align	1
 3621              		.global	uxQueueGetQueueNumber
 3622              		.syntax unified
 3623              		.thumb
 3624              		.thumb_func
 3625              		.fpu fpv4-sp-d16
 3627              	uxQueueGetQueueNumber:
 3628              	.LFB29:
1985:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 3629              		.loc 1 1985 0
 3630              		.cfi_startproc
 3631              		@ args = 0, pretend = 0, frame = 0
 3632              		@ frame_needed = 0, uses_anonymous_args = 0
 3633              		@ link register save eliminated.
 3634              	.LVL369:
1987:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3635              		.loc 1 1987 0
 3636 0000 806C     		ldr	r0, [r0, #72]
 3637              	.LVL370:
 3638 0002 7047     		bx	lr
 3639              		.cfi_endproc
 3640              	.LFE29:
 3642              		.section	.text.vQueueSetQueueNumber,"ax",%progbits
 3643              		.align	1
 3644              		.global	vQueueSetQueueNumber
 3645              		.syntax unified
 3646              		.thumb
 3647              		.thumb_func
 3648              		.fpu fpv4-sp-d16
 3650              	vQueueSetQueueNumber:
 3651              	.LFB30:
1995:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 3652              		.loc 1 1995 0
 3653              		.cfi_startproc
 3654              		@ args = 0, pretend = 0, frame = 0
 3655              		@ frame_needed = 0, uses_anonymous_args = 0
 3656              		@ link register save eliminated.
 3657              	.LVL371:
1996:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 3658              		.loc 1 1996 0
 3659 0000 8164     		str	r1, [r0, #72]
1997:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3660              		.loc 1 1997 0
 3661 0002 7047     		bx	lr
 3662              		.cfi_endproc
 3663              	.LFE30:
 3665              		.section	.text.ucQueueGetQueueType,"ax",%progbits
 3666              		.align	1
 3667              		.global	ucQueueGetQueueType
 3668              		.syntax unified
ARM GAS  /tmp/ccMGA4O7.s 			page 117


 3669              		.thumb
 3670              		.thumb_func
 3671              		.fpu fpv4-sp-d16
 3673              	ucQueueGetQueueType:
 3674              	.LFB31:
2005:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
 3675              		.loc 1 2005 0
 3676              		.cfi_startproc
 3677              		@ args = 0, pretend = 0, frame = 0
 3678              		@ frame_needed = 0, uses_anonymous_args = 0
 3679              		@ link register save eliminated.
 3680              	.LVL372:
2007:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3681              		.loc 1 2007 0
 3682 0000 90F84C00 		ldrb	r0, [r0, #76]	@ zero_extendqisi2
 3683              	.LVL373:
 3684 0004 7047     		bx	lr
 3685              		.cfi_endproc
 3686              	.LFE31:
 3688              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 3689              		.align	1
 3690              		.global	xQueueIsQueueEmptyFromISR
 3691              		.syntax unified
 3692              		.thumb
 3693              		.thumb_func
 3694              		.fpu fpv4-sp-d16
 3696              	xQueueIsQueueEmptyFromISR:
 3697              	.LFB37:
2278:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 3698              		.loc 1 2278 0
 3699              		.cfi_startproc
 3700              		@ args = 0, pretend = 0, frame = 0
 3701              		@ frame_needed = 0, uses_anonymous_args = 0
 3702              		@ link register save eliminated.
 3703              	.LVL374:
2281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 3704              		.loc 1 2281 0
 3705 0000 20B1     		cbz	r0, .L328
2282:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 3706              		.loc 1 2282 0
 3707 0002 806B     		ldr	r0, [r0, #56]
 3708              	.LVL375:
2292:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 3709              		.loc 1 2292 0
 3710 0004 B0FA80F0 		clz	r0, r0
 3711              	.LVL376:
 3712 0008 4009     		lsrs	r0, r0, #5
 3713 000a 7047     		bx	lr
 3714              	.LVL377:
 3715              	.L328:
 3716              	.LBB297:
 3717              	.LBB298:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3718              		.loc 2 195 0
 3719              		.syntax unified
 3720              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3721 000c 4FF05003 			mov r3, #80												
ARM GAS  /tmp/ccMGA4O7.s 			page 118


 3722 0010 83F31188 		msr basepri, r3											
 3723 0014 BFF36F8F 		isb														
 3724 0018 BFF34F8F 		dsb														
 3725              	
 3726              	@ 0 "" 2
 3727              	.LVL378:
 3728              		.thumb
 3729              		.syntax unified
 3730              	.L327:
 3731 001c FEE7     		b	.L327
 3732              	.LBE298:
 3733              	.LBE297:
 3734              		.cfi_endproc
 3735              	.LFE37:
 3737              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 3738              		.align	1
 3739              		.global	xQueueIsQueueFullFromISR
 3740              		.syntax unified
 3741              		.thumb
 3742              		.thumb_func
 3743              		.fpu fpv4-sp-d16
 3745              	xQueueIsQueueFullFromISR:
 3746              	.LFB39:
2311:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2312:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
2313:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
2314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2315:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2316:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2317:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 3747              		.loc 1 2317 0
 3748              		.cfi_startproc
 3749              		@ args = 0, pretend = 0, frame = 0
 3750              		@ frame_needed = 0, uses_anonymous_args = 0
 3751              		@ link register save eliminated.
 3752              	.LVL379:
2318:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
2319:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2320:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 3753              		.loc 1 2320 0
 3754 0000 30B1     		cbz	r0, .L332
2321:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 3755              		.loc 1 2321 0
 3756 0002 826B     		ldr	r2, [r0, #56]
 3757              	.LVL380:
 3758 0004 C06B     		ldr	r0, [r0, #60]
 3759              	.LVL381:
2322:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2323:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdTRUE;
2324:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2325:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
2326:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2327:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdFALSE;
2328:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2329:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2330:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
2331:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
ARM GAS  /tmp/ccMGA4O7.s 			page 119


 3760              		.loc 1 2331 0
 3761 0006 9042     		cmp	r0, r2
 3762 0008 14BF     		ite	ne
 3763 000a 0020     		movne	r0, #0
 3764              	.LVL382:
 3765 000c 0120     		moveq	r0, #1
 3766 000e 7047     		bx	lr
 3767              	.LVL383:
 3768              	.L332:
 3769              	.LBB299:
 3770              	.LBB300:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3771              		.loc 2 195 0
 3772              		.syntax unified
 3773              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3774 0010 4FF05003 			mov r3, #80												
 3775 0014 83F31188 		msr basepri, r3											
 3776 0018 BFF36F8F 		isb														
 3777 001c BFF34F8F 		dsb														
 3778              	
 3779              	@ 0 "" 2
 3780              	.LVL384:
 3781              		.thumb
 3782              		.syntax unified
 3783              	.L331:
 3784 0020 FEE7     		b	.L331
 3785              	.LBE300:
 3786              	.LBE299:
 3787              		.cfi_endproc
 3788              	.LFE39:
 3790              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 3791              		.align	1
 3792              		.global	vQueueAddToRegistry
 3793              		.syntax unified
 3794              		.thumb
 3795              		.thumb_func
 3796              		.fpu fpv4-sp-d16
 3798              	vQueueAddToRegistry:
 3799              	.LFB40:
2332:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2333:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2334:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2335:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2336:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
2337:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2338:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2339:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2340:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2341:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2342:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		is required to prevent an interrupt removing something from the queue
2343:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2344:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2345:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2346:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2347:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2348:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The queue is full - do we want to block or just leave without
2349:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				posting? */
ARM GAS  /tmp/ccMGA4O7.s 			page 120


2350:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2351:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2352:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2353:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return indicating that we need to block. */
2354:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2355:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2356:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_BLOCKED;
2357:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2358:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2359:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2360:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2361:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
2362:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2363:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2365:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2366:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2367:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2368:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2369:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2370:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2371:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2372:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2373:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
2374:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2375:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Were any co-routines waiting for data to become available? */
2376:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2377:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2378:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2379:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					into the ready list as we are within a critical section.
2380:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2381:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the event were caused from within an interrupt. */
2382:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2383:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2384:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The co-routine waiting has a higher priority so record
2385:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						that a yield might be appropriate. */
2386:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2387:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2388:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2389:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2390:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2391:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2392:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2393:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2394:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2395:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2396:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2397:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2398:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2399:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2400:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = errQUEUE_FULL;
2401:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2402:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2403:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2404:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2405:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
2406:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
ARM GAS  /tmp/ccMGA4O7.s 			page 121


2407:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2408:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2409:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2410:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2411:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2412:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2413:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2414:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2415:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2416:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2417:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2418:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
2419:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		is required to prevent an interrupt adding something to the queue
2420:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2421:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2422:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2423:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2424:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2425:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There are no messages in the queue, do we want to block or just
2426:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				leave with nothing? */
2427:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2428:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2429:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2430:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					indicating that we need to block. */
2431:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2432:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2433:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_BLOCKED;
2434:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2435:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2436:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2437:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2438:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
2439:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2440:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2441:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2442:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2443:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2444:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2445:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2446:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2447:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2448:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2449:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2450:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2451:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2452:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Data is available from the queue. */
2453:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2454:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2455:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2456:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					pxQueue->u.pcReadFrom = pxQueue->pcHead;
2457:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2458:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2459:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2460:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2461:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2462:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				--( pxQueue->uxMessagesWaiting );
2463:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->u
ARM GAS  /tmp/ccMGA4O7.s 			page 122


2464:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2465:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
2466:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2467:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Were any co-routines waiting for space to become available? */
2468:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2469:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2470:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2471:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					into the ready list as we are within a critical section.
2472:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2473:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the event were caused from within an interrupt. */
2474:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2475:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2476:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2477:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2478:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2479:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2480:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2481:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2482:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2483:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2484:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2485:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2486:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2487:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2488:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2489:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2490:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = pdFAIL;
2491:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2492:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2493:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2494:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2495:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
2496:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2497:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2498:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2499:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2500:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2501:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2502:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2503:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2504:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2505:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2506:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2507:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2508:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		exit without doing anything. */
2509:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2510:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2511:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2512:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2513:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2514:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			co-routine has not already been woken. */
2515:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2516:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2517:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2518:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2519:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2520:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
ARM GAS  /tmp/ccMGA4O7.s 			page 123


2521:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						return pdTRUE;
2522:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2523:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2524:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2525:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2526:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2527:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2528:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2529:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2530:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2531:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2532:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2533:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2534:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2536:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2537:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2538:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2539:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2540:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2541:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2542:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2543:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xCoRoutinePreviouslyWoken;
2544:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2545:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2546:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2547:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2548:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2549:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2550:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2551:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2552:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2553:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2554:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2555:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2556:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2557:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		not then just leave without doing anything. */
2558:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2559:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2560:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Copy the data from the queue. */
2561:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2562:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2563:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2564:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->u.pcReadFrom = pxQueue->pcHead;
2565:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2566:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2567:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2568:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2569:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2570:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
2571:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->ux
2572:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2573:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2574:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2575:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2576:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2577:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
ARM GAS  /tmp/ccMGA4O7.s 			page 124


2578:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2579:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2580:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2581:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2582:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2583:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2584:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2585:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2586:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2587:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2588:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2589:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2590:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2591:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2592:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2593:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2594:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2595:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2596:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
2597:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2598:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2599:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2600:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
2601:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2602:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2603:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
2604:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2605:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2606:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2607:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2608:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2609:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2610:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2611:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2612:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 3800              		.loc 1 2612 0
 3801              		.cfi_startproc
 3802              		@ args = 0, pretend = 0, frame = 0
 3803              		@ frame_needed = 0, uses_anonymous_args = 0
 3804              		@ link register save eliminated.
 3805              	.LVL385:
 3806 0000 10B4     		push	{r4}
 3807              	.LCFI48:
 3808              		.cfi_def_cfa_offset 4
 3809              		.cfi_offset 4, -4
 3810              	.LVL386:
2613:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2614:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2615:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2616:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		a free slot. */
2617:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
2618:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2619:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 3811              		.loc 1 2619 0
 3812 0002 0B4B     		ldr	r3, .L341
 3813 0004 1B68     		ldr	r3, [r3]
 3814 0006 53B1     		cbz	r3, .L338
ARM GAS  /tmp/ccMGA4O7.s 			page 125


2617:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3815              		.loc 1 2617 0
 3816 0008 0123     		movs	r3, #1
 3817              		.loc 1 2619 0
 3818 000a 094C     		ldr	r4, .L341
 3819              	.LVL387:
 3820              	.L337:
 3821 000c 54F83320 		ldr	r2, [r4, r3, lsl #3]
 3822 0010 32B1     		cbz	r2, .L334
2617:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3823              		.loc 1 2617 0 discriminator 2
 3824 0012 0133     		adds	r3, r3, #1
 3825              	.LVL388:
 3826 0014 082B     		cmp	r3, #8
 3827 0016 F9D1     		bne	.L337
 3828              	.LVL389:
 3829              	.L333:
2620:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2621:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Store the information on this queue. */
2622:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
2623:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
2624:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2625:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2626:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
2627:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2628:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2629:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2630:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2631:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2632:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2633:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 3830              		.loc 1 2633 0
 3831 0018 5DF8044B 		ldr	r4, [sp], #4
 3832              	.LCFI49:
 3833              		.cfi_remember_state
 3834              		.cfi_restore 4
 3835              		.cfi_def_cfa_offset 0
 3836 001c 7047     		bx	lr
 3837              	.LVL390:
 3838              	.L338:
 3839              	.LCFI50:
 3840              		.cfi_restore_state
2617:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3841              		.loc 1 2617 0
 3842 001e 0023     		movs	r3, #0
 3843              	.LVL391:
 3844              	.L334:
2622:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
 3845              		.loc 1 2622 0
 3846 0020 034A     		ldr	r2, .L341
 3847 0022 42F83310 		str	r1, [r2, r3, lsl #3]
2623:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3848              		.loc 1 2623 0
 3849 0026 02EBC303 		add	r3, r2, r3, lsl #3
 3850 002a 5860     		str	r0, [r3, #4]
2626:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 3851              		.loc 1 2626 0
ARM GAS  /tmp/ccMGA4O7.s 			page 126


 3852 002c F4E7     		b	.L333
 3853              	.L342:
 3854 002e 00BF     		.align	2
 3855              	.L341:
 3856 0030 00000000 		.word	xQueueRegistry
 3857              		.cfi_endproc
 3858              	.LFE40:
 3860              		.section	.text.pcQueueGetName,"ax",%progbits
 3861              		.align	1
 3862              		.global	pcQueueGetName
 3863              		.syntax unified
 3864              		.thumb
 3865              		.thumb_func
 3866              		.fpu fpv4-sp-d16
 3868              	pcQueueGetName:
 3869              	.LFB41:
2634:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2635:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2636:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2637:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2638:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2639:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2640:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed
2641:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 3870              		.loc 1 2641 0
 3871              		.cfi_startproc
 3872              		@ args = 0, pretend = 0, frame = 0
 3873              		@ frame_needed = 0, uses_anonymous_args = 0
 3874              		@ link register save eliminated.
 3875              	.LVL392:
2642:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2643:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and singl
2644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2645:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Note there is nothing here to protect against another task adding or
2646:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		removing entries from the registry while it is being searched. */
2647:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
2648:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2649:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 3876              		.loc 1 2649 0
 3877 0000 094B     		ldr	r3, .L350
 3878 0002 5B68     		ldr	r3, [r3, #4]
 3879 0004 9842     		cmp	r0, r3
 3880 0006 0AD0     		beq	.L348
 3881 0008 074A     		ldr	r2, .L350
2647:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3882              		.loc 1 2647 0
 3883 000a 0123     		movs	r3, #1
 3884              	.LVL393:
 3885              	.L347:
 3886              		.loc 1 2649 0
 3887 000c D168     		ldr	r1, [r2, #12]
 3888 000e 8142     		cmp	r1, r0
 3889 0010 06D0     		beq	.L344
2647:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3890              		.loc 1 2647 0 discriminator 2
 3891 0012 0133     		adds	r3, r3, #1
 3892              	.LVL394:
ARM GAS  /tmp/ccMGA4O7.s 			page 127


 3893 0014 0832     		adds	r2, r2, #8
 3894 0016 082B     		cmp	r3, #8
 3895 0018 F8D1     		bne	.L347
2643:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3896              		.loc 1 2643 0
 3897 001a 0020     		movs	r0, #0
 3898              	.LVL395:
2650:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2651:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pcReturn = xQueueRegistry[ ux ].pcQueueName;
2652:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
2653:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2654:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2655:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2656:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2657:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2658:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2659:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2660:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pcReturn;
2661:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 3899              		.loc 1 2661 0
 3900 001c 7047     		bx	lr
 3901              	.LVL396:
 3902              	.L348:
2647:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3903              		.loc 1 2647 0
 3904 001e 0023     		movs	r3, #0
 3905              	.LVL397:
 3906              	.L344:
2651:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
 3907              		.loc 1 2651 0
 3908 0020 014A     		ldr	r2, .L350
 3909 0022 52F83300 		ldr	r0, [r2, r3, lsl #3]
 3910              	.LVL398:
2652:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 3911              		.loc 1 2652 0
 3912 0026 7047     		bx	lr
 3913              	.L351:
 3914              		.align	2
 3915              	.L350:
 3916 0028 00000000 		.word	xQueueRegistry
 3917              		.cfi_endproc
 3918              	.LFE41:
 3920              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 3921              		.align	1
 3922              		.global	vQueueUnregisterQueue
 3923              		.syntax unified
 3924              		.thumb
 3925              		.thumb_func
 3926              		.fpu fpv4-sp-d16
 3928              	vQueueUnregisterQueue:
 3929              	.LFB42:
2662:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2663:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2664:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2665:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2666:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2667:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccMGA4O7.s 			page 128


2668:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2669:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 3930              		.loc 1 2669 0
 3931              		.cfi_startproc
 3932              		@ args = 0, pretend = 0, frame = 0
 3933              		@ frame_needed = 0, uses_anonymous_args = 0
 3934              		@ link register save eliminated.
 3935              	.LVL399:
2670:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2671:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2672:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2673:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		registry. */
2674:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
2675:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2676:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 3936              		.loc 1 2676 0
 3937 0000 0B4B     		ldr	r3, .L359
 3938 0002 5B68     		ldr	r3, [r3, #4]
 3939 0004 9842     		cmp	r0, r3
 3940 0006 09D0     		beq	.L357
 3941 0008 094A     		ldr	r2, .L359
2674:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3942              		.loc 1 2674 0
 3943 000a 0123     		movs	r3, #1
 3944              	.LVL400:
 3945              	.L356:
 3946              		.loc 1 2676 0
 3947 000c D168     		ldr	r1, [r2, #12]
 3948 000e 8142     		cmp	r1, r0
 3949 0010 05D0     		beq	.L353
2674:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3950              		.loc 1 2674 0 discriminator 2
 3951 0012 0133     		adds	r3, r3, #1
 3952              	.LVL401:
 3953 0014 0832     		adds	r2, r2, #8
 3954 0016 082B     		cmp	r3, #8
 3955 0018 F8D1     		bne	.L356
2677:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2678:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2679:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
2680:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2681:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Set the handle to NULL to ensure the same queue handle cannot
2682:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				appear in the registry twice if it is added, removed, then
2683:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				added again. */
2684:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
2685:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
2686:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2687:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2688:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2689:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2690:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2691:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2692:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2693:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3956              		.loc 1 2693 0
 3957 001a 7047     		bx	lr
 3958              	.LVL402:
ARM GAS  /tmp/ccMGA4O7.s 			page 129


 3959              	.L357:
2674:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3960              		.loc 1 2674 0
 3961 001c 0023     		movs	r3, #0
 3962              	.LVL403:
 3963              	.L353:
2679:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3964              		.loc 1 2679 0
 3965 001e 044A     		ldr	r2, .L359
 3966 0020 0021     		movs	r1, #0
 3967 0022 42F83310 		str	r1, [r2, r3, lsl #3]
2684:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
 3968              		.loc 1 2684 0
 3969 0026 02EBC303 		add	r3, r2, r3, lsl #3
 3970 002a 5960     		str	r1, [r3, #4]
2685:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 3971              		.loc 1 2685 0
 3972 002c 7047     		bx	lr
 3973              	.L360:
 3974 002e 00BF     		.align	2
 3975              	.L359:
 3976 0030 00000000 		.word	xQueueRegistry
 3977              		.cfi_endproc
 3978              	.LFE42:
 3980              		.section	.text.vQueueDelete,"ax",%progbits
 3981              		.align	1
 3982              		.global	vQueueDelete
 3983              		.syntax unified
 3984              		.thumb
 3985              		.thumb_func
 3986              		.fpu fpv4-sp-d16
 3988              	vQueueDelete:
 3989              	.LFB28:
1941:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 3990              		.loc 1 1941 0
 3991              		.cfi_startproc
 3992              		@ args = 0, pretend = 0, frame = 0
 3993              		@ frame_needed = 0, uses_anonymous_args = 0
 3994              	.LVL404:
1944:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
 3995              		.loc 1 1944 0
 3996 0000 40B9     		cbnz	r0, .L362
 3997              	.LBB301:
 3998              	.LBB302:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3999              		.loc 2 195 0
 4000              		.syntax unified
 4001              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4002 0002 4FF05003 			mov r3, #80												
 4003 0006 83F31188 		msr basepri, r3											
 4004 000a BFF36F8F 		isb														
 4005 000e BFF34F8F 		dsb														
 4006              	
 4007              	@ 0 "" 2
 4008              	.LVL405:
 4009              		.thumb
 4010              		.syntax unified
ARM GAS  /tmp/ccMGA4O7.s 			page 130


 4011              	.L363:
 4012 0012 FEE7     		b	.L363
 4013              	.L362:
 4014              	.LBE302:
 4015              	.LBE301:
1941:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 4016              		.loc 1 1941 0
 4017 0014 10B5     		push	{r4, lr}
 4018              	.LCFI51:
 4019              		.cfi_def_cfa_offset 8
 4020              		.cfi_offset 4, -8
 4021              		.cfi_offset 14, -4
 4022 0016 0446     		mov	r4, r0
1949:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 4023              		.loc 1 1949 0
 4024 0018 FFF7FEFF 		bl	vQueueUnregisterQueue
 4025              	.LVL406:
1963:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 4026              		.loc 1 1963 0
 4027 001c 94F84630 		ldrb	r3, [r4, #70]	@ zero_extendqisi2
 4028 0020 03B1     		cbz	r3, .L367
 4029              	.L361:
1979:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 4030              		.loc 1 1979 0
 4031 0022 10BD     		pop	{r4, pc}
 4032              	.LVL407:
 4033              	.L367:
1965:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 4034              		.loc 1 1965 0
 4035 0024 2046     		mov	r0, r4
 4036 0026 FFF7FEFF 		bl	vPortFree
 4037              	.LVL408:
1979:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 4038              		.loc 1 1979 0
 4039 002a FAE7     		b	.L361
 4040              		.cfi_endproc
 4041              	.LFE28:
 4043              		.section	.text.vQueueWaitForMessageRestricted,"ax",%progbits
 4044              		.align	1
 4045              		.global	vQueueWaitForMessageRestricted
 4046              		.syntax unified
 4047              		.thumb
 4048              		.thumb_func
 4049              		.fpu fpv4-sp-d16
 4051              	vQueueWaitForMessageRestricted:
 4052              	.LFB43:
2694:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2695:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2696:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2697:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2698:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_TIMERS == 1 )
2699:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2700:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType
2701:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 4053              		.loc 1 2701 0
 4054              		.cfi_startproc
 4055              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccMGA4O7.s 			page 131


 4056              		@ frame_needed = 0, uses_anonymous_args = 0
 4057              	.LVL409:
 4058 0000 70B5     		push	{r4, r5, r6, lr}
 4059              	.LCFI52:
 4060              		.cfi_def_cfa_offset 16
 4061              		.cfi_offset 4, -16
 4062              		.cfi_offset 5, -12
 4063              		.cfi_offset 6, -8
 4064              		.cfi_offset 14, -4
 4065 0002 0446     		mov	r4, r0
 4066 0004 0D46     		mov	r5, r1
 4067 0006 1646     		mov	r6, r2
 4068              	.LVL410:
2702:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2703:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2704:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* This function should not be called by application code hence the
2705:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2706:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		designed for use by kernel code, and has special calling requirements.
2707:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		It can result in vListInsert() being called on a list that can only
2708:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		possibly ever have one item in it, so the list will be fast, but even
2709:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		so it should be called with the scheduler locked and not from a critical
2710:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		section. */
2711:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2712:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Only do anything if there are no messages in the queue.  This function
2713:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		will not actually cause the task to block, just place it on a blocked
2714:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		list.  It will not block until the scheduler is unlocked - at which
2715:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		time a yield will be performed.  If an item is added to the queue while
2716:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		the queue is locked, and the calling task blocks on the queue, then the
2717:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		calling task will be immediately unblocked when the queue is unlocked. */
2718:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 4069              		.loc 1 2718 0
 4070 0008 FFF7FEFF 		bl	vPortEnterCritical
 4071              	.LVL411:
 4072 000c 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 4073 0010 5BB2     		sxtb	r3, r3
 4074 0012 B3F1FF3F 		cmp	r3, #-1
 4075 0016 04BF     		itt	eq
 4076 0018 0023     		moveq	r3, #0
 4077 001a 84F84430 		strbeq	r3, [r4, #68]
 4078 001e 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 4079 0022 5BB2     		sxtb	r3, r3
 4080 0024 B3F1FF3F 		cmp	r3, #-1
 4081 0028 04BF     		itt	eq
 4082 002a 0023     		moveq	r3, #0
 4083 002c 84F84530 		strbeq	r3, [r4, #69]
 4084 0030 FFF7FEFF 		bl	vPortExitCritical
 4085              	.LVL412:
2719:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 4086              		.loc 1 2719 0
 4087 0034 A36B     		ldr	r3, [r4, #56]
 4088 0036 1BB1     		cbz	r3, .L373
 4089              	.L371:
2720:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2721:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* There is nothing in the queue, block for the specified period. */
2722:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefi
2723:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2724:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
ARM GAS  /tmp/ccMGA4O7.s 			page 132


2725:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2726:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2727:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2728:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvUnlockQueue( pxQueue );
 4090              		.loc 1 2728 0
 4091 0038 2046     		mov	r0, r4
 4092 003a FFF7FEFF 		bl	prvUnlockQueue
 4093              	.LVL413:
2729:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 4094              		.loc 1 2729 0
 4095 003e 70BD     		pop	{r4, r5, r6, pc}
 4096              	.LVL414:
 4097              	.L373:
2722:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 4098              		.loc 1 2722 0
 4099 0040 3246     		mov	r2, r6
 4100 0042 2946     		mov	r1, r5
 4101 0044 04F12400 		add	r0, r4, #36
 4102 0048 FFF7FEFF 		bl	vTaskPlaceOnEventListRestricted
 4103              	.LVL415:
 4104 004c F4E7     		b	.L371
 4105              		.cfi_endproc
 4106              	.LFE43:
 4108              		.comm	xQueueRegistry,64,4
 4109              		.text
 4110              	.Letext0:
 4111              		.file 3 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 4112              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 4113              		.file 5 "/usr/include/newlib/sys/lock.h"
 4114              		.file 6 "/usr/include/newlib/sys/_types.h"
 4115              		.file 7 "/usr/include/newlib/sys/reent.h"
 4116              		.file 8 "/usr/include/newlib/stdlib.h"
 4117              		.file 9 "/usr/include/newlib/sys/_stdint.h"
 4118              		.file 10 "Inc/FreeRTOSConfig.h"
 4119              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 4120              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 4121              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 4122              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 4123              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
 4124              		.file 16 "<built-in>"
ARM GAS  /tmp/ccMGA4O7.s 			page 133


DEFINED SYMBOLS
                            *ABS*:0000000000000000 queue.c
     /tmp/ccMGA4O7.s:18     .text.prvIsQueueEmpty:0000000000000000 $t
     /tmp/ccMGA4O7.s:24     .text.prvIsQueueEmpty:0000000000000000 prvIsQueueEmpty
     /tmp/ccMGA4O7.s:55     .text.prvCopyDataToQueue:0000000000000000 $t
     /tmp/ccMGA4O7.s:61     .text.prvCopyDataToQueue:0000000000000000 prvCopyDataToQueue
     /tmp/ccMGA4O7.s:180    .text.prvCopyDataFromQueue:0000000000000000 $t
     /tmp/ccMGA4O7.s:186    .text.prvCopyDataFromQueue:0000000000000000 prvCopyDataFromQueue
     /tmp/ccMGA4O7.s:234    .text.prvUnlockQueue:0000000000000000 $t
     /tmp/ccMGA4O7.s:240    .text.prvUnlockQueue:0000000000000000 prvUnlockQueue
     /tmp/ccMGA4O7.s:356    .text.xQueueGenericReset:0000000000000000 $t
     /tmp/ccMGA4O7.s:363    .text.xQueueGenericReset:0000000000000000 xQueueGenericReset
     /tmp/ccMGA4O7.s:473    .text.xQueueGenericReset:0000000000000080 $d
     /tmp/ccMGA4O7.s:478    .text.xQueueGenericCreateStatic:0000000000000000 $t
     /tmp/ccMGA4O7.s:485    .text.xQueueGenericCreateStatic:0000000000000000 xQueueGenericCreateStatic
     /tmp/ccMGA4O7.s:690    .text.xQueueGenericCreate:0000000000000000 $t
     /tmp/ccMGA4O7.s:697    .text.xQueueGenericCreate:0000000000000000 xQueueGenericCreate
     /tmp/ccMGA4O7.s:796    .text.xQueueGetMutexHolder:0000000000000000 $t
     /tmp/ccMGA4O7.s:803    .text.xQueueGetMutexHolder:0000000000000000 xQueueGetMutexHolder
     /tmp/ccMGA4O7.s:842    .text.xQueueGetMutexHolderFromISR:0000000000000000 $t
     /tmp/ccMGA4O7.s:849    .text.xQueueGetMutexHolderFromISR:0000000000000000 xQueueGetMutexHolderFromISR
     /tmp/ccMGA4O7.s:896    .text.xQueueCreateCountingSemaphoreStatic:0000000000000000 $t
     /tmp/ccMGA4O7.s:903    .text.xQueueCreateCountingSemaphoreStatic:0000000000000000 xQueueCreateCountingSemaphoreStatic
     /tmp/ccMGA4O7.s:991    .text.xQueueCreateCountingSemaphore:0000000000000000 $t
     /tmp/ccMGA4O7.s:998    .text.xQueueCreateCountingSemaphore:0000000000000000 xQueueCreateCountingSemaphore
     /tmp/ccMGA4O7.s:1075   .text.xQueueGenericSend:0000000000000000 $t
     /tmp/ccMGA4O7.s:1082   .text.xQueueGenericSend:0000000000000000 xQueueGenericSend
     /tmp/ccMGA4O7.s:1414   .text.xQueueGenericSend:0000000000000184 $d
     /tmp/ccMGA4O7.s:1419   .text.prvInitialiseMutex:0000000000000000 $t
     /tmp/ccMGA4O7.s:1425   .text.prvInitialiseMutex:0000000000000000 prvInitialiseMutex
     /tmp/ccMGA4O7.s:1465   .text.xQueueCreateMutex:0000000000000000 $t
     /tmp/ccMGA4O7.s:1472   .text.xQueueCreateMutex:0000000000000000 xQueueCreateMutex
     /tmp/ccMGA4O7.s:1504   .text.xQueueCreateMutexStatic:0000000000000000 $t
     /tmp/ccMGA4O7.s:1511   .text.xQueueCreateMutexStatic:0000000000000000 xQueueCreateMutexStatic
     /tmp/ccMGA4O7.s:1553   .text.xQueueGiveMutexRecursive:0000000000000000 $t
     /tmp/ccMGA4O7.s:1560   .text.xQueueGiveMutexRecursive:0000000000000000 xQueueGiveMutexRecursive
     /tmp/ccMGA4O7.s:1634   .text.xQueueGenericSendFromISR:0000000000000000 $t
     /tmp/ccMGA4O7.s:1641   .text.xQueueGenericSendFromISR:0000000000000000 xQueueGenericSendFromISR
     /tmp/ccMGA4O7.s:1839   .text.xQueueGiveFromISR:0000000000000000 $t
     /tmp/ccMGA4O7.s:1846   .text.xQueueGiveFromISR:0000000000000000 xQueueGiveFromISR
     /tmp/ccMGA4O7.s:2054   .text.xQueueReceive:0000000000000000 $t
     /tmp/ccMGA4O7.s:2061   .text.xQueueReceive:0000000000000000 xQueueReceive
     /tmp/ccMGA4O7.s:2351   .text.xQueueReceive:0000000000000158 $d
     /tmp/ccMGA4O7.s:2356   .text.xQueueSemaphoreTake:0000000000000000 $t
     /tmp/ccMGA4O7.s:2363   .text.xQueueSemaphoreTake:0000000000000000 xQueueSemaphoreTake
     /tmp/ccMGA4O7.s:2730   .text.xQueueSemaphoreTake:00000000000001a4 $d
     /tmp/ccMGA4O7.s:2738   .text.xQueueTakeMutexRecursive:0000000000000000 $t
     /tmp/ccMGA4O7.s:2745   .text.xQueueTakeMutexRecursive:0000000000000000 xQueueTakeMutexRecursive
     /tmp/ccMGA4O7.s:2821   .text.xQueuePeek:0000000000000000 $t
     /tmp/ccMGA4O7.s:2828   .text.xQueuePeek:0000000000000000 xQueuePeek
     /tmp/ccMGA4O7.s:3119   .text.xQueuePeek:0000000000000158 $d
     /tmp/ccMGA4O7.s:3124   .text.xQueueReceiveFromISR:0000000000000000 $t
     /tmp/ccMGA4O7.s:3131   .text.xQueueReceiveFromISR:0000000000000000 xQueueReceiveFromISR
     /tmp/ccMGA4O7.s:3302   .text.xQueuePeekFromISR:0000000000000000 $t
     /tmp/ccMGA4O7.s:3309   .text.xQueuePeekFromISR:0000000000000000 xQueuePeekFromISR
     /tmp/ccMGA4O7.s:3455   .text.uxQueueMessagesWaiting:0000000000000000 $t
     /tmp/ccMGA4O7.s:3462   .text.uxQueueMessagesWaiting:0000000000000000 uxQueueMessagesWaiting
ARM GAS  /tmp/ccMGA4O7.s 			page 134


     /tmp/ccMGA4O7.s:3513   .text.uxQueueSpacesAvailable:0000000000000000 $t
     /tmp/ccMGA4O7.s:3520   .text.uxQueueSpacesAvailable:0000000000000000 uxQueueSpacesAvailable
     /tmp/ccMGA4O7.s:3574   .text.uxQueueMessagesWaitingFromISR:0000000000000000 $t
     /tmp/ccMGA4O7.s:3581   .text.uxQueueMessagesWaitingFromISR:0000000000000000 uxQueueMessagesWaitingFromISR
     /tmp/ccMGA4O7.s:3620   .text.uxQueueGetQueueNumber:0000000000000000 $t
     /tmp/ccMGA4O7.s:3627   .text.uxQueueGetQueueNumber:0000000000000000 uxQueueGetQueueNumber
     /tmp/ccMGA4O7.s:3643   .text.vQueueSetQueueNumber:0000000000000000 $t
     /tmp/ccMGA4O7.s:3650   .text.vQueueSetQueueNumber:0000000000000000 vQueueSetQueueNumber
     /tmp/ccMGA4O7.s:3666   .text.ucQueueGetQueueType:0000000000000000 $t
     /tmp/ccMGA4O7.s:3673   .text.ucQueueGetQueueType:0000000000000000 ucQueueGetQueueType
     /tmp/ccMGA4O7.s:3689   .text.xQueueIsQueueEmptyFromISR:0000000000000000 $t
     /tmp/ccMGA4O7.s:3696   .text.xQueueIsQueueEmptyFromISR:0000000000000000 xQueueIsQueueEmptyFromISR
     /tmp/ccMGA4O7.s:3738   .text.xQueueIsQueueFullFromISR:0000000000000000 $t
     /tmp/ccMGA4O7.s:3745   .text.xQueueIsQueueFullFromISR:0000000000000000 xQueueIsQueueFullFromISR
     /tmp/ccMGA4O7.s:3791   .text.vQueueAddToRegistry:0000000000000000 $t
     /tmp/ccMGA4O7.s:3798   .text.vQueueAddToRegistry:0000000000000000 vQueueAddToRegistry
     /tmp/ccMGA4O7.s:3856   .text.vQueueAddToRegistry:0000000000000030 $d
                            *COM*:0000000000000040 xQueueRegistry
     /tmp/ccMGA4O7.s:3861   .text.pcQueueGetName:0000000000000000 $t
     /tmp/ccMGA4O7.s:3868   .text.pcQueueGetName:0000000000000000 pcQueueGetName
     /tmp/ccMGA4O7.s:3916   .text.pcQueueGetName:0000000000000028 $d
     /tmp/ccMGA4O7.s:3921   .text.vQueueUnregisterQueue:0000000000000000 $t
     /tmp/ccMGA4O7.s:3928   .text.vQueueUnregisterQueue:0000000000000000 vQueueUnregisterQueue
     /tmp/ccMGA4O7.s:3976   .text.vQueueUnregisterQueue:0000000000000030 $d
     /tmp/ccMGA4O7.s:3981   .text.vQueueDelete:0000000000000000 $t
     /tmp/ccMGA4O7.s:3988   .text.vQueueDelete:0000000000000000 vQueueDelete
     /tmp/ccMGA4O7.s:4044   .text.vQueueWaitForMessageRestricted:0000000000000000 $t
     /tmp/ccMGA4O7.s:4051   .text.vQueueWaitForMessageRestricted:0000000000000000 vQueueWaitForMessageRestricted

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
xTaskPriorityDisinherit
memcpy
vTaskMissedYield
xTaskRemoveFromEventList
vListInitialise
pvPortMalloc
xTaskGetSchedulerState
vTaskInternalSetTimeOutState
xTaskResumeAll
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskGetCurrentTaskHandle
vPortValidateInterruptPriority
pvTaskIncrementMutexHeldCount
xTaskPriorityInherit
vTaskPriorityDisinheritAfterTimeout
vPortFree
vTaskPlaceOnEventListRestricted
