ARM GAS  /tmp/cch6Oc3v.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	prvTaskIsTaskSuspended:
  25              	.LFB16:
  26              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.0.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
ARM GAS  /tmp/cch6Oc3v.s 			page 2


  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** settings allow a task to be created using either statically or dynamically
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** made to free the RAM that was allocated statically.
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
ARM GAS  /tmp/cch6Oc3v.s 			page 3


  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB.
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** !!!NOTE!!! If the definition of tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** changed then the definition of StaticTask_t must also be updated. */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE	( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( c
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
ARM GAS  /tmp/cch6Oc3v.s 			page 4


 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
ARM GAS  /tmp/cch6Oc3v.s 			page 5


 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
ARM GAS  /tmp/cch6Oc3v.s 			page 6


 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
ARM GAS  /tmp/cch6Oc3v.s 			page 7


 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments above the definition of
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ] = {0};	/*< Prioritised read
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1 = {0};								/*< Delayed tasks. */
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2 = {0};								/*< Delayed tasks (two lists are used
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList = NULL;					/*< Points to the delayed ta
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList = NULL;			/*< Points to the dela
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList = {0};								/*< Tasks that have been readied whil
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination = {0};					/*< Tasks that have been deleted
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList = {0};						/*< Tasks that are currently suspende
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
ARM GAS  /tmp/cch6Oc3v.s 			page 8


 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void );
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
ARM GAS  /tmp/cch6Oc3v.s 			page 9


 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cch6Oc3v.s 			page 10


 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
ARM GAS  /tmp/cch6Oc3v.s 			page 11


 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
ARM GAS  /tmp/cch6Oc3v.s 			page 12


 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
ARM GAS  /tmp/cch6Oc3v.s 			page 13


 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cch6Oc3v.s 			page 14


 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
ARM GAS  /tmp/cch6Oc3v.s 			page 15


 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
ARM GAS  /tmp/cch6Oc3v.s 			page 16


 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
ARM GAS  /tmp/cch6Oc3v.s 			page 17


 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			break;
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
ARM GAS  /tmp/cch6Oc3v.s 			page 18


 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/cch6Oc3v.s 			page 19


1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/cch6Oc3v.s 			page 20


1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cch6Oc3v.s 			page 21


1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cch6Oc3v.s 			page 22


1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/cch6Oc3v.s 			page 23


1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
ARM GAS  /tmp/cch6Oc3v.s 			page 24


1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxStateList;
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/cch6Oc3v.s 			page 25


1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eSuspended;
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  /tmp/cch6Oc3v.s 			page 26


1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cch6Oc3v.s 			page 27


1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
ARM GAS  /tmp/cch6Oc3v.s 			page 28


1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/cch6Oc3v.s 			page 29


1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  /tmp/cch6Oc3v.s 			page 30


1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cch6Oc3v.s 			page 31


1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
  27              		.loc 1 1726 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
  33              		.loc 1 1734 0
  34 0000 58B1     		cbz	r0, .L7
ARM GAS  /tmp/cch6Oc3v.s 			page 32


1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  35              		.loc 1 1737 0
  36 0002 4169     		ldr	r1, [r0, #20]
  37 0004 0B4A     		ldr	r2, .L8
  38 0006 9142     		cmp	r1, r2
  39 0008 10D1     		bne	.L5
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  40              		.loc 1 1740 0
  41 000a 806A     		ldr	r0, [r0, #40]
  42              	.LVL1:
  43 000c 0A4B     		ldr	r3, .L8+4
  44 000e 9842     		cmp	r0, r3
  45 0010 0ED0     		beq	.L6
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  46              		.loc 1 1744 0
  47 0012 B0FA80F0 		clz	r0, r0
  48 0016 4009     		lsrs	r0, r0, #5
  49 0018 7047     		bx	lr
  50              	.LVL2:
  51              	.L7:
  52              	.LBB113:
  53              	.LBB114:
  54              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/cch6Oc3v.s 			page 33


  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
ARM GAS  /tmp/cch6Oc3v.s 			page 34


  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
ARM GAS  /tmp/cch6Oc3v.s 			page 35


 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
  55              		.loc 2 195 0
  56              		.syntax unified
  57              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  /tmp/cch6Oc3v.s 			page 36


  58 001a 4FF05003 			mov r3, #80												
  59 001e 83F31188 		msr basepri, r3											
  60 0022 BFF36F8F 		isb														
  61 0026 BFF34F8F 		dsb														
  62              	
  63              	@ 0 "" 2
  64              	.LVL3:
  65              		.thumb
  66              		.syntax unified
  67              	.L3:
  68 002a FEE7     		b	.L3
  69              	.L5:
  70              	.LBE114:
  71              	.LBE113:
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  72              		.loc 1 1727 0
  73 002c 0020     		movs	r0, #0
  74              	.LVL4:
  75 002e 7047     		bx	lr
  76              	.L6:
  77 0030 0020     		movs	r0, #0
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  78              		.loc 1 1764 0
  79 0032 7047     		bx	lr
  80              	.L9:
  81              		.align	2
  82              	.L8:
  83 0034 00000000 		.word	.LANCHOR0
  84 0038 00000000 		.word	.LANCHOR1
  85              		.cfi_endproc
  86              	.LFE16:
  88              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
  89              		.align	1
  90              		.syntax unified
  91              		.thumb
  92              		.thumb_func
  93              		.fpu fpv4-sp-d16
  95              	prvResetNextTaskUnblockTime:
ARM GAS  /tmp/cch6Oc3v.s 			page 37


  96              	.LFB49:
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cch6Oc3v.s 			page 38


1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
ARM GAS  /tmp/cch6Oc3v.s 			page 39


1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
ARM GAS  /tmp/cch6Oc3v.s 			page 40


1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
ARM GAS  /tmp/cch6Oc3v.s 			page 41


1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/cch6Oc3v.s 			page 42


2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
ARM GAS  /tmp/cch6Oc3v.s 			page 43


2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
ARM GAS  /tmp/cch6Oc3v.s 			page 44


2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cch6Oc3v.s 			page 45


2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cch6Oc3v.s 			page 46


2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == 0x00 )
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
ARM GAS  /tmp/cch6Oc3v.s 			page 47


2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/cch6Oc3v.s 			page 48


2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
ARM GAS  /tmp/cch6Oc3v.s 			page 49


2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
ARM GAS  /tmp/cch6Oc3v.s 			page 50


2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
ARM GAS  /tmp/cch6Oc3v.s 			page 51


2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
ARM GAS  /tmp/cch6Oc3v.s 			page 52


2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /tmp/cch6Oc3v.s 			page 53


2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/cch6Oc3v.s 			page 54


2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
ARM GAS  /tmp/cch6Oc3v.s 			page 55


2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  /tmp/cch6Oc3v.s 			page 56


2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				protection here so count values are only valid until the timer
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				are provided by the application, not the kernel. */
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cch6Oc3v.s 			page 57


2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
ARM GAS  /tmp/cch6Oc3v.s 			page 58


2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
ARM GAS  /tmp/cch6Oc3v.s 			page 59


3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
ARM GAS  /tmp/cch6Oc3v.s 			page 60


3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/cch6Oc3v.s 			page 61


3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cch6Oc3v.s 			page 62


3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTASK_CALLS_SECURE_FUNCTIONS();
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
ARM GAS  /tmp/cch6Oc3v.s 			page 63


3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
ARM GAS  /tmp/cch6Oc3v.s 			page 64


3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
ARM GAS  /tmp/cch6Oc3v.s 			page 65


3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
ARM GAS  /tmp/cch6Oc3v.s 			page 66


3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
ARM GAS  /tmp/cch6Oc3v.s 			page 67


3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/cch6Oc3v.s 			page 68


3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
ARM GAS  /tmp/cch6Oc3v.s 			page 69


3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( uint16_t ) ulCount;
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  /tmp/cch6Oc3v.s 			page 70


3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated 
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
ARM GAS  /tmp/cch6Oc3v.s 			page 71


3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
  97              		.loc 1 3725 0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101              		@ link register save eliminated.
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 102              		.loc 1 3728 0
 103 0000 084B     		ldr	r3, .L14
 104 0002 1B68     		ldr	r3, [r3]
 105 0004 1B68     		ldr	r3, [r3]
 106 0006 3BB1     		cbz	r3, .L13
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 107              		.loc 1 3742 0
 108 0008 064B     		ldr	r3, .L14
 109 000a 1B68     		ldr	r3, [r3]
 110              	.LVL5:
 111 000c DB68     		ldr	r3, [r3, #12]
 112              	.LVL6:
ARM GAS  /tmp/cch6Oc3v.s 			page 72


3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 113              		.loc 1 3743 0
 114 000e DB68     		ldr	r3, [r3, #12]
 115              	.LVL7:
 116 0010 5A68     		ldr	r2, [r3, #4]
 117 0012 054B     		ldr	r3, .L14+4
 118              	.LVL8:
 119 0014 1A60     		str	r2, [r3]
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 120              		.loc 1 3745 0
 121 0016 7047     		bx	lr
 122              	.L13:
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 123              		.loc 1 3734 0
 124 0018 034B     		ldr	r3, .L14+4
 125 001a 4FF0FF32 		mov	r2, #-1
 126 001e 1A60     		str	r2, [r3]
 127 0020 7047     		bx	lr
 128              	.L15:
 129 0022 00BF     		.align	2
 130              	.L14:
 131 0024 00000000 		.word	.LANCHOR2
 132 0028 00000000 		.word	.LANCHOR3
 133              		.cfi_endproc
 134              	.LFE49:
 136              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 137              		.align	1
 138              		.syntax unified
 139              		.thumb
 140              		.thumb_func
 141              		.fpu fpv4-sp-d16
 143              	prvInitialiseNewTask:
 144              	.LFB6:
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 145              		.loc 1 825 0
 146              		.cfi_startproc
 147              		@ args = 16, pretend = 0, frame = 0
 148              		@ frame_needed = 0, uses_anonymous_args = 0
 149              	.LVL9:
 150 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 151              	.LCFI0:
 152              		.cfi_def_cfa_offset 32
 153              		.cfi_offset 4, -32
 154              		.cfi_offset 5, -28
 155              		.cfi_offset 6, -24
 156              		.cfi_offset 7, -20
 157              		.cfi_offset 8, -16
 158              		.cfi_offset 9, -12
 159              		.cfi_offset 10, -8
 160              		.cfi_offset 14, -4
 161 0004 8246     		mov	r10, r0
 162 0006 8946     		mov	r9, r1
 163 0008 9846     		mov	r8, r3
 164 000a 099E     		ldr	r6, [sp, #36]
 165 000c 0A9C     		ldr	r4, [sp, #40]
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/cch6Oc3v.s 			page 73


 166              		.loc 1 847 0
 167 000e 9500     		lsls	r5, r2, #2
 168 0010 2A46     		mov	r2, r5
 169              	.LVL10:
 170 0012 A521     		movs	r1, #165
 171              	.LVL11:
 172 0014 206B     		ldr	r0, [r4, #48]
 173              	.LVL12:
 174 0016 FFF7FEFF 		bl	memset
 175              	.LVL13:
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 176              		.loc 1 857 0
 177 001a 043D     		subs	r5, r5, #4
 178              	.LVL14:
 179 001c 236B     		ldr	r3, [r4, #48]
 180 001e 1D44     		add	r5, r5, r3
 181              	.LVL15:
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 182              		.loc 1 858 0
 183 0020 25F00705 		bic	r5, r5, #7
 184              	.LVL16:
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 185              		.loc 1 887 0
 186 0024 99F80030 		ldrb	r3, [r9]	@ zero_extendqisi2
 187 0028 84F83430 		strb	r3, [r4, #52]
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 188              		.loc 1 892 0
 189 002c 99F80030 		ldrb	r3, [r9]	@ zero_extendqisi2
 190 0030 63B1     		cbz	r3, .L17
 191 0032 4B46     		mov	r3, r9
 192 0034 04F13402 		add	r2, r4, #52
 193 0038 09F10F01 		add	r1, r9, #15
 194              	.LVL17:
 195              	.L18:
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196              		.loc 1 887 0
 197 003c 13F8010F 		ldrb	r0, [r3, #1]!	@ zero_extendqisi2
 198              	.LVL18:
 199 0040 02F8010F 		strb	r0, [r2, #1]!
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 200              		.loc 1 892 0
 201 0044 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 202 0046 08B1     		cbz	r0, .L17
 203              	.LVL19:
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 204              		.loc 1 885 0 discriminator 2
 205 0048 8B42     		cmp	r3, r1
 206 004a F7D1     		bne	.L18
 207              	.LVL20:
 208              	.L17:
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 209              		.loc 1 904 0
 210 004c 0027     		movs	r7, #0
 211 004e 84F84370 		strb	r7, [r4, #67]
 212 0052 089B     		ldr	r3, [sp, #32]
 213 0054 372B     		cmp	r3, #55
 214 0056 28BF     		it	cs
ARM GAS  /tmp/cch6Oc3v.s 			page 74


 215 0058 3723     		movcs	r3, #55
 216 005a 9946     		mov	r9, r3
 217              	.LVL21:
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 218              		.loc 1 917 0
 219 005c E362     		str	r3, [r4, #44]
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 220              		.loc 1 920 0
 221 005e E364     		str	r3, [r4, #76]
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 222              		.loc 1 921 0
 223 0060 2765     		str	r7, [r4, #80]
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 224              		.loc 1 925 0
 225 0062 201D     		adds	r0, r4, #4
 226 0064 FFF7FEFF 		bl	vListInitialiseItem
 227              	.LVL22:
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 228              		.loc 1 926 0
 229 0068 04F11800 		add	r0, r4, #24
 230 006c FFF7FEFF 		bl	vListInitialiseItem
 231              	.LVL23:
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 232              		.loc 1 930 0
 233 0070 2461     		str	r4, [r4, #16]
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 234              		.loc 1 933 0
 235 0072 C9F13803 		rsb	r3, r9, #56
 236 0076 A361     		str	r3, [r4, #24]
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 237              		.loc 1 934 0
 238 0078 6462     		str	r4, [r4, #36]
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 239              		.loc 1 976 0
 240 007a 6765     		str	r7, [r4, #84]
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 241              		.loc 1 977 0
 242 007c 84F85870 		strb	r7, [r4, #88]
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 243              		.loc 1 1004 0
 244 0080 4246     		mov	r2, r8
 245 0082 5146     		mov	r1, r10
 246 0084 2846     		mov	r0, r5
 247 0086 FFF7FEFF 		bl	pxPortInitialiseStack
 248              	.LVL24:
 249 008a 2060     		str	r0, [r4]
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 250              		.loc 1 1008 0
 251 008c 06B1     		cbz	r6, .L16
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 252              		.loc 1 1012 0
 253 008e 3460     		str	r4, [r6]
 254              	.L16:
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 255              		.loc 1 1018 0
 256 0090 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 257              		.cfi_endproc
ARM GAS  /tmp/cch6Oc3v.s 			page 75


 258              	.LFE6:
 260              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 261              		.align	1
 262              		.syntax unified
 263              		.thumb
 264              		.thumb_func
 265              		.fpu fpv4-sp-d16
 267              	prvAddNewTaskToReadyList:
 268              	.LFB7:
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 269              		.loc 1 1022 0
 270              		.cfi_startproc
 271              		@ args = 0, pretend = 0, frame = 0
 272              		@ frame_needed = 0, uses_anonymous_args = 0
 273              	.LVL25:
 274 0000 70B5     		push	{r4, r5, r6, lr}
 275              	.LCFI1:
 276              		.cfi_def_cfa_offset 16
 277              		.cfi_offset 4, -16
 278              		.cfi_offset 5, -12
 279              		.cfi_offset 6, -8
 280              		.cfi_offset 14, -4
 281 0002 0546     		mov	r5, r0
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 282              		.loc 1 1025 0
 283 0004 FFF7FEFF 		bl	vPortEnterCritical
 284              	.LVL26:
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 285              		.loc 1 1027 0
 286 0008 2F4A     		ldr	r2, .L31
 287 000a 1368     		ldr	r3, [r2]
 288 000c 0133     		adds	r3, r3, #1
 289 000e 1360     		str	r3, [r2]
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 290              		.loc 1 1028 0
 291 0010 2E4B     		ldr	r3, .L31+4
 292 0012 1B68     		ldr	r3, [r3]
 293 0014 002B     		cmp	r3, #0
 294 0016 32D0     		beq	.L30
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 295              		.loc 1 1051 0
 296 0018 2D4B     		ldr	r3, .L31+8
 297 001a 1B68     		ldr	r3, [r3]
 298 001c 3BB9     		cbnz	r3, .L24
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 299              		.loc 1 1053 0
 300 001e 2B4B     		ldr	r3, .L31+4
 301 0020 1B68     		ldr	r3, [r3]
 302 0022 DA6A     		ldr	r2, [r3, #44]
 303 0024 EB6A     		ldr	r3, [r5, #44]
 304 0026 9A42     		cmp	r2, r3
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 305              		.loc 1 1055 0
 306 0028 9CBF     		itt	ls
 307 002a 284B     		ldrls	r3, .L31+4
 308 002c 1D60     		strls	r5, [r3]
 309              	.L24:
ARM GAS  /tmp/cch6Oc3v.s 			page 76


1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 310              		.loc 1 1068 0
 311 002e 294A     		ldr	r2, .L31+12
 312 0030 1368     		ldr	r3, [r2]
 313 0032 0133     		adds	r3, r3, #1
 314 0034 1360     		str	r3, [r2]
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 315              		.loc 1 1073 0
 316 0036 6B64     		str	r3, [r5, #68]
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 317              		.loc 1 1078 0
 318 0038 E86A     		ldr	r0, [r5, #44]
 319 003a 274B     		ldr	r3, .L31+16
 320 003c 1B68     		ldr	r3, [r3]
 321 003e 9842     		cmp	r0, r3
 322 0040 84BF     		itt	hi
 323 0042 254B     		ldrhi	r3, .L31+16
 324 0044 1860     		strhi	r0, [r3]
 325 0046 00EB8000 		add	r0, r0, r0, lsl #2
 326 004a 291D     		adds	r1, r5, #4
 327 004c 234B     		ldr	r3, .L31+20
 328 004e 03EB8000 		add	r0, r3, r0, lsl #2
 329 0052 FFF7FEFF 		bl	vListInsertEnd
 330              	.LVL27:
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 331              		.loc 1 1082 0
 332 0056 FFF7FEFF 		bl	vPortExitCritical
 333              	.LVL28:
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 334              		.loc 1 1084 0
 335 005a 1D4B     		ldr	r3, .L31+8
 336 005c 1B68     		ldr	r3, [r3]
 337 005e 6BB1     		cbz	r3, .L22
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 338              		.loc 1 1088 0
 339 0060 1A4B     		ldr	r3, .L31+4
 340 0062 1B68     		ldr	r3, [r3]
 341 0064 DA6A     		ldr	r2, [r3, #44]
 342 0066 EB6A     		ldr	r3, [r5, #44]
 343 0068 9A42     		cmp	r2, r3
 344 006a 07D2     		bcs	.L22
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 345              		.loc 1 1090 0
 346 006c 1C4B     		ldr	r3, .L31+24
 347 006e 4FF08052 		mov	r2, #268435456
 348 0072 1A60     		str	r2, [r3]
 349              		.syntax unified
 350              	@ 1090 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 351 0074 BFF34F8F 		dsb
 352              	@ 0 "" 2
 353              	@ 1090 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 354 0078 BFF36F8F 		isb
 355              	@ 0 "" 2
 356              		.thumb
 357              		.syntax unified
 358              	.L22:
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/cch6Oc3v.s 			page 77


 359              		.loc 1 1101 0
 360 007c 70BD     		pop	{r4, r5, r6, pc}
 361              	.LVL29:
 362              	.L30:
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363              		.loc 1 1032 0
 364 007e 134B     		ldr	r3, .L31+4
 365 0080 1D60     		str	r5, [r3]
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 366              		.loc 1 1034 0
 367 0082 1368     		ldr	r3, [r2]
 368 0084 012B     		cmp	r3, #1
 369 0086 D2D1     		bne	.L24
 370 0088 144C     		ldr	r4, .L31+20
 371 008a 04F58C66 		add	r6, r4, #1120
 372              	.L25:
 373              	.LBB117:
 374              	.LBB118:
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 375              		.loc 1 3436 0
 376 008e 2046     		mov	r0, r4
 377 0090 FFF7FEFF 		bl	vListInitialise
 378              	.LVL30:
 379 0094 1434     		adds	r4, r4, #20
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 380              		.loc 1 3434 0
 381 0096 B442     		cmp	r4, r6
 382 0098 F9D1     		bne	.L25
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 383              		.loc 1 3439 0
 384 009a 124E     		ldr	r6, .L31+28
 385 009c 3046     		mov	r0, r6
 386 009e FFF7FEFF 		bl	vListInitialise
 387              	.LVL31:
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 388              		.loc 1 3440 0
 389 00a2 114C     		ldr	r4, .L31+32
 390 00a4 2046     		mov	r0, r4
 391 00a6 FFF7FEFF 		bl	vListInitialise
 392              	.LVL32:
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393              		.loc 1 3441 0
 394 00aa 1048     		ldr	r0, .L31+36
 395 00ac FFF7FEFF 		bl	vListInitialise
 396              	.LVL33:
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 397              		.loc 1 3445 0
 398 00b0 0F48     		ldr	r0, .L31+40
 399 00b2 FFF7FEFF 		bl	vListInitialise
 400              	.LVL34:
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 401              		.loc 1 3451 0
 402 00b6 0F48     		ldr	r0, .L31+44
 403 00b8 FFF7FEFF 		bl	vListInitialise
 404              	.LVL35:
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 405              		.loc 1 3457 0
ARM GAS  /tmp/cch6Oc3v.s 			page 78


 406 00bc 0E4B     		ldr	r3, .L31+48
 407 00be 1E60     		str	r6, [r3]
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 408              		.loc 1 3458 0
 409 00c0 0E4B     		ldr	r3, .L31+52
 410 00c2 1C60     		str	r4, [r3]
 411 00c4 B3E7     		b	.L24
 412              	.L32:
 413 00c6 00BF     		.align	2
 414              	.L31:
 415 00c8 00000000 		.word	.LANCHOR4
 416 00cc 00000000 		.word	.LANCHOR5
 417 00d0 00000000 		.word	.LANCHOR11
 418 00d4 00000000 		.word	.LANCHOR12
 419 00d8 00000000 		.word	.LANCHOR13
 420 00dc 00000000 		.word	.LANCHOR6
 421 00e0 04ED00E0 		.word	-536810236
 422 00e4 00000000 		.word	.LANCHOR7
 423 00e8 00000000 		.word	.LANCHOR8
 424 00ec 00000000 		.word	.LANCHOR1
 425 00f0 00000000 		.word	.LANCHOR9
 426 00f4 00000000 		.word	.LANCHOR0
 427 00f8 00000000 		.word	.LANCHOR2
 428 00fc 00000000 		.word	.LANCHOR10
 429              	.LBE118:
 430              	.LBE117:
 431              		.cfi_endproc
 432              	.LFE7:
 434              		.section	.text.prvDeleteTCB,"ax",%progbits
 435              		.align	1
 436              		.syntax unified
 437              		.thumb
 438              		.thumb_func
 439              		.fpu fpv4-sp-d16
 441              	prvDeleteTCB:
 442              	.LFB48:
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 443              		.loc 1 3671 0
 444              		.cfi_startproc
 445              		@ args = 0, pretend = 0, frame = 0
 446              		@ frame_needed = 0, uses_anonymous_args = 0
 447              	.LVL36:
 448 0000 10B5     		push	{r4, lr}
 449              	.LCFI2:
 450              		.cfi_def_cfa_offset 8
 451              		.cfi_offset 4, -8
 452              		.cfi_offset 14, -4
 453 0002 0446     		mov	r4, r0
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 454              		.loc 1 3697 0
 455 0004 90F85930 		ldrb	r3, [r0, #89]	@ zero_extendqisi2
 456 0008 33B9     		cbnz	r3, .L34
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 457              		.loc 1 3701 0
 458 000a 006B     		ldr	r0, [r0, #48]
 459              	.LVL37:
 460 000c FFF7FEFF 		bl	vPortFree
ARM GAS  /tmp/cch6Oc3v.s 			page 79


 461              	.LVL38:
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 462              		.loc 1 3702 0
 463 0010 2046     		mov	r0, r4
 464 0012 FFF7FEFF 		bl	vPortFree
 465              	.LVL39:
 466              	.L33:
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 467              		.loc 1 3719 0
 468 0016 10BD     		pop	{r4, pc}
 469              	.LVL40:
 470              	.L34:
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 471              		.loc 1 3704 0
 472 0018 012B     		cmp	r3, #1
 473 001a 0AD0     		beq	.L39
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 474              		.loc 1 3714 0
 475 001c 022B     		cmp	r3, #2
 476 001e FAD0     		beq	.L33
 477              	.LBB119:
 478              	.LBB120:
 479              		.loc 2 195 0
 480              		.syntax unified
 481              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 482 0020 4FF05003 			mov r3, #80												
 483 0024 83F31188 		msr basepri, r3											
 484 0028 BFF36F8F 		isb														
 485 002c BFF34F8F 		dsb														
 486              	
 487              	@ 0 "" 2
 488              	.LVL41:
 489              		.thumb
 490              		.syntax unified
 491              	.L37:
 492 0030 FEE7     		b	.L37
 493              	.L39:
 494              	.LBE120:
 495              	.LBE119:
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 496              		.loc 1 3708 0
 497 0032 FFF7FEFF 		bl	vPortFree
 498              	.LVL42:
 499 0036 EEE7     		b	.L33
 500              		.cfi_endproc
 501              	.LFE48:
 503              		.section	.text.prvIdleTask,"ax",%progbits
 504              		.align	1
 505              		.syntax unified
 506              		.thumb
 507              		.thumb_func
 508              		.fpu fpv4-sp-d16
 510              	prvIdleTask:
 511              	.LFB41:
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 512              		.loc 1 3219 0
 513              		.cfi_startproc
ARM GAS  /tmp/cch6Oc3v.s 			page 80


 514              		@ Volatile: function does not return.
 515              		@ args = 0, pretend = 0, frame = 0
 516              		@ frame_needed = 0, uses_anonymous_args = 0
 517              	.LVL43:
 518 0000 80B5     		push	{r7, lr}
 519              	.LCFI3:
 520              		.cfi_def_cfa_offset 8
 521              		.cfi_offset 7, -8
 522              		.cfi_offset 14, -4
 523              	.LBB124:
 524              	.LBB125:
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 525              		.loc 1 3473 0
 526 0002 144C     		ldr	r4, .L48
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 527              		.loc 1 3477 0
 528 0004 144F     		ldr	r7, .L48+4
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 529              		.loc 1 3479 0
 530 0006 154E     		ldr	r6, .L48+8
 531              	.LBE125:
 532              	.LBE124:
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 533              		.loc 1 3260 0
 534 0008 DFF85880 		ldr	r8, .L48+16
 535              	.LVL44:
 536              	.L43:
 537              	.LBB127:
 538              	.LBB126:
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 539              		.loc 1 3473 0
 540 000c 2368     		ldr	r3, [r4]
 541 000e A3B1     		cbz	r3, .L41
 542              	.L42:
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 543              		.loc 1 3475 0
 544 0010 FFF7FEFF 		bl	vPortEnterCritical
 545              	.LVL45:
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 546              		.loc 1 3477 0
 547 0014 FB68     		ldr	r3, [r7, #12]
 548 0016 DD68     		ldr	r5, [r3, #12]
 549              	.LVL46:
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 550              		.loc 1 3478 0
 551 0018 281D     		adds	r0, r5, #4
 552 001a FFF7FEFF 		bl	uxListRemove
 553              	.LVL47:
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 554              		.loc 1 3479 0
 555 001e 3368     		ldr	r3, [r6]
 556 0020 013B     		subs	r3, r3, #1
 557 0022 3360     		str	r3, [r6]
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 558              		.loc 1 3480 0
 559 0024 2368     		ldr	r3, [r4]
 560 0026 013B     		subs	r3, r3, #1
ARM GAS  /tmp/cch6Oc3v.s 			page 81


 561 0028 2360     		str	r3, [r4]
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 562              		.loc 1 3482 0
 563 002a FFF7FEFF 		bl	vPortExitCritical
 564              	.LVL48:
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 565              		.loc 1 3484 0
 566 002e 2846     		mov	r0, r5
 567 0030 FFF7FEFF 		bl	prvDeleteTCB
 568              	.LVL49:
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 569              		.loc 1 3473 0
 570 0034 2368     		ldr	r3, [r4]
 571 0036 002B     		cmp	r3, #0
 572 0038 EAD1     		bne	.L42
 573              	.LVL50:
 574              	.L41:
 575              	.LBE126:
 576              	.LBE127:
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 577              		.loc 1 3258 0
 578 003a 094B     		ldr	r3, .L48+12
 579 003c 1B68     		ldr	r3, [r3]
 580 003e 012B     		cmp	r3, #1
 581 0040 E4D9     		bls	.L43
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 582              		.loc 1 3260 0
 583 0042 4FF08053 		mov	r3, #268435456
 584 0046 C8F80030 		str	r3, [r8]
 585              		.syntax unified
 586              	@ 3260 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 587 004a BFF34F8F 		dsb
 588              	@ 0 "" 2
 589              	@ 3260 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 590 004e BFF36F8F 		isb
 591              	@ 0 "" 2
 592              		.thumb
 593              		.syntax unified
 594 0052 DBE7     		b	.L43
 595              	.L49:
 596              		.align	2
 597              	.L48:
 598 0054 00000000 		.word	.LANCHOR14
 599 0058 00000000 		.word	.LANCHOR9
 600 005c 00000000 		.word	.LANCHOR4
 601 0060 00000000 		.word	.LANCHOR6
 602 0064 04ED00E0 		.word	-536810236
 603              		.cfi_endproc
 604              	.LFE41:
 606              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 607              		.align	1
 608              		.syntax unified
 609              		.thumb
 610              		.thumb_func
 611              		.fpu fpv4-sp-d16
 613              	prvAddCurrentTaskToDelayedList:
 614              	.LFB63:
ARM GAS  /tmp/cch6Oc3v.s 			page 82


3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
ARM GAS  /tmp/cch6Oc3v.s 			page 83


3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
ARM GAS  /tmp/cch6Oc3v.s 			page 84


3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready list. */
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/cch6Oc3v.s 			page 85


3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cch6Oc3v.s 			page 86


3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
ARM GAS  /tmp/cch6Oc3v.s 			page 87


4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/cch6Oc3v.s 			page 88


4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
ARM GAS  /tmp/cch6Oc3v.s 			page 89


4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
ARM GAS  /tmp/cch6Oc3v.s 			page 90


4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = 0x00;
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/cch6Oc3v.s 			page 91


4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0 )
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
ARM GAS  /tmp/cch6Oc3v.s 			page 92


4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cch6Oc3v.s 			page 93


4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
ARM GAS  /tmp/cch6Oc3v.s 			page 94


4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
ARM GAS  /tmp/cch6Oc3v.s 			page 95


4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/cch6Oc3v.s 			page 96


4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/cch6Oc3v.s 			page 97


4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cch6Oc3v.s 			page 98


4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
ARM GAS  /tmp/cch6Oc3v.s 			page 99


4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  /tmp/cch6Oc3v.s 			page 100


4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
ARM GAS  /tmp/cch6Oc3v.s 			page 101


4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  /tmp/cch6Oc3v.s 			page 102


4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 615              		.loc 1 4907 0
 616              		.cfi_startproc
 617              		@ args = 0, pretend = 0, frame = 0
 618              		@ frame_needed = 0, uses_anonymous_args = 0
 619              	.LVL51:
 620 0000 70B5     		push	{r4, r5, r6, lr}
 621              	.LCFI4:
 622              		.cfi_def_cfa_offset 16
 623              		.cfi_offset 4, -16
 624              		.cfi_offset 5, -12
 625              		.cfi_offset 6, -8
 626              		.cfi_offset 14, -4
 627 0002 0446     		mov	r4, r0
 628 0004 0E46     		mov	r6, r1
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 629              		.loc 1 4909 0
 630 0006 174B     		ldr	r3, .L57
 631 0008 1D68     		ldr	r5, [r3]
 632              	.LVL52:
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 633              		.loc 1 4922 0
 634 000a 174B     		ldr	r3, .L57+4
ARM GAS  /tmp/cch6Oc3v.s 			page 103


 635 000c 1868     		ldr	r0, [r3]
 636              	.LVL53:
 637 000e 0430     		adds	r0, r0, #4
 638 0010 FFF7FEFF 		bl	uxListRemove
 639              	.LVL54:
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 640              		.loc 1 4935 0
 641 0014 B4F1FF3F 		cmp	r4, #-1
 642 0018 13D0     		beq	.L55
 643              	.L51:
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 644              		.loc 1 4947 0
 645 001a 2C44     		add	r4, r4, r5
 646              	.LVL55:
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 647              		.loc 1 4950 0
 648 001c 124B     		ldr	r3, .L57+4
 649 001e 1B68     		ldr	r3, [r3]
 650 0020 5C60     		str	r4, [r3, #4]
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 651              		.loc 1 4952 0
 652 0022 A542     		cmp	r5, r4
 653 0024 16D8     		bhi	.L56
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
ARM GAS  /tmp/cch6Oc3v.s 			page 104


4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 654              		.loc 1 4962 0
 655 0026 114B     		ldr	r3, .L57+8
 656 0028 1868     		ldr	r0, [r3]
 657 002a 0F4B     		ldr	r3, .L57+4
 658 002c 1968     		ldr	r1, [r3]
 659 002e 0431     		adds	r1, r1, #4
 660 0030 FFF7FEFF 		bl	vListInsert
 661              	.LVL56:
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 662              		.loc 1 4967 0
 663 0034 0E4B     		ldr	r3, .L57+12
 664 0036 1B68     		ldr	r3, [r3]
 665 0038 A342     		cmp	r3, r4
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 666              		.loc 1 4969 0
 667 003a 84BF     		itt	hi
 668 003c 0C4B     		ldrhi	r3, .L57+12
 669 003e 1C60     		strhi	r4, [r3]
 670              	.LVL57:
 671              	.L50:
4970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
4983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
4999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
ARM GAS  /tmp/cch6Oc3v.s 			page 105


5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 672              		.loc 1 5015 0
 673 0040 70BD     		pop	{r4, r5, r6, pc}
 674              	.LVL58:
 675              	.L55:
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 676              		.loc 1 4935 0 discriminator 1
 677 0042 002E     		cmp	r6, #0
 678 0044 E9D0     		beq	.L51
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 679              		.loc 1 4940 0
 680 0046 084B     		ldr	r3, .L57+4
 681 0048 1968     		ldr	r1, [r3]
 682 004a 0431     		adds	r1, r1, #4
 683 004c 0948     		ldr	r0, .L57+16
 684 004e FFF7FEFF 		bl	vListInsertEnd
 685              	.LVL59:
 686 0052 F5E7     		b	.L50
 687              	.LVL60:
 688              	.L56:
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 689              		.loc 1 4956 0
 690 0054 084B     		ldr	r3, .L57+20
 691 0056 1868     		ldr	r0, [r3]
 692 0058 034B     		ldr	r3, .L57+4
 693 005a 1968     		ldr	r1, [r3]
 694 005c 0431     		adds	r1, r1, #4
 695 005e FFF7FEFF 		bl	vListInsert
 696              	.LVL61:
 697 0062 EDE7     		b	.L50
 698              	.L58:
 699              		.align	2
 700              	.L57:
 701 0064 00000000 		.word	.LANCHOR15
 702 0068 00000000 		.word	.LANCHOR5
 703 006c 00000000 		.word	.LANCHOR2
 704 0070 00000000 		.word	.LANCHOR3
 705 0074 00000000 		.word	.LANCHOR0
 706 0078 00000000 		.word	.LANCHOR10
 707              		.cfi_endproc
 708              	.LFE63:
 710              		.section	.text.xTaskCreateStatic,"ax",%progbits
ARM GAS  /tmp/cch6Oc3v.s 			page 106


 711              		.align	1
 712              		.global	xTaskCreateStatic
 713              		.syntax unified
 714              		.thumb
 715              		.thumb_func
 716              		.fpu fpv4-sp-d16
 718              	xTaskCreateStatic:
 719              	.LFB4:
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 720              		.loc 1 582 0
 721              		.cfi_startproc
 722              		@ args = 12, pretend = 0, frame = 8
 723              		@ frame_needed = 0, uses_anonymous_args = 0
 724              	.LVL62:
 725 0000 70B5     		push	{r4, r5, r6, lr}
 726              	.LCFI5:
 727              		.cfi_def_cfa_offset 16
 728              		.cfi_offset 4, -16
 729              		.cfi_offset 5, -12
 730              		.cfi_offset 6, -8
 731              		.cfi_offset 14, -4
 732 0002 86B0     		sub	sp, sp, #24
 733              	.LCFI6:
 734              		.cfi_def_cfa_offset 40
 735 0004 0B9D     		ldr	r5, [sp, #44]
 736 0006 0C9C     		ldr	r4, [sp, #48]
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 737              		.loc 1 586 0
 738 0008 45B9     		cbnz	r5, .L60
 739              	.LBB128:
 740              	.LBB129:
 741              		.loc 2 195 0
 742              		.syntax unified
 743              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 744 000a 4FF05003 			mov r3, #80												
 745 000e 83F31188 		msr basepri, r3											
 746 0012 BFF36F8F 		isb														
 747 0016 BFF34F8F 		dsb														
 748              	
 749              	@ 0 "" 2
 750              	.LVL63:
 751              		.thumb
 752              		.syntax unified
 753              	.L61:
 754 001a FEE7     		b	.L61
 755              	.LVL64:
 756              	.L60:
 757              	.LBE129:
 758              	.LBE128:
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 759              		.loc 1 587 0
 760 001c 44B9     		cbnz	r4, .L62
 761              	.LBB130:
 762              	.LBB131:
 763              		.loc 2 195 0
 764              		.syntax unified
 765              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  /tmp/cch6Oc3v.s 			page 107


 766 001e 4FF05003 			mov r3, #80												
 767 0022 83F31188 		msr basepri, r3											
 768 0026 BFF36F8F 		isb														
 769 002a BFF34F8F 		dsb														
 770              	
 771              	@ 0 "" 2
 772              	.LVL65:
 773              		.thumb
 774              		.syntax unified
 775              	.L63:
 776 002e FEE7     		b	.L63
 777              	.LVL66:
 778              	.L62:
 779              	.LBE131:
 780              	.LBE130:
 781              	.LBB132:
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 782              		.loc 1 594 0
 783 0030 5C26     		movs	r6, #92
 784 0032 0496     		str	r6, [sp, #16]
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 785              		.loc 1 595 0
 786 0034 049E     		ldr	r6, [sp, #16]
 787 0036 5C2E     		cmp	r6, #92
 788 0038 08D0     		beq	.L64
 789              	.LBB133:
 790              	.LBB134:
 791              		.loc 2 195 0
 792              		.syntax unified
 793              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 794 003a 4FF05003 			mov r3, #80												
 795 003e 83F31188 		msr basepri, r3											
 796 0042 BFF36F8F 		isb														
 797 0046 BFF34F8F 		dsb														
 798              	
 799              	@ 0 "" 2
 800              	.LVL67:
 801              		.thumb
 802              		.syntax unified
 803              	.L65:
 804 004a FEE7     		b	.L65
 805              	.LVL68:
 806              	.L64:
 807              	.LBE134:
 808              	.LBE133:
 809              	.LBE132:
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 810              		.loc 1 605 0
 811 004c 2563     		str	r5, [r4, #48]
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 812              		.loc 1 611 0
 813 004e 0225     		movs	r5, #2
 814 0050 84F85950 		strb	r5, [r4, #89]
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 815              		.loc 1 615 0
 816 0054 0025     		movs	r5, #0
 817 0056 0395     		str	r5, [sp, #12]
ARM GAS  /tmp/cch6Oc3v.s 			page 108


 818 0058 0294     		str	r4, [sp, #8]
 819 005a 05AD     		add	r5, sp, #20
 820 005c 0195     		str	r5, [sp, #4]
 821 005e 0A9D     		ldr	r5, [sp, #40]
 822 0060 0095     		str	r5, [sp]
 823 0062 FFF7FEFF 		bl	prvInitialiseNewTask
 824              	.LVL69:
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 825              		.loc 1 616 0
 826 0066 2046     		mov	r0, r4
 827 0068 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 828              	.LVL70:
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 829              		.loc 1 624 0
 830 006c 0598     		ldr	r0, [sp, #20]
 831 006e 06B0     		add	sp, sp, #24
 832              	.LCFI7:
 833              		.cfi_def_cfa_offset 16
 834              		@ sp needed
 835 0070 70BD     		pop	{r4, r5, r6, pc}
 836              		.cfi_endproc
 837              	.LFE4:
 839              		.section	.text.xTaskCreate,"ax",%progbits
 840              		.align	1
 841              		.global	xTaskCreate
 842              		.syntax unified
 843              		.thumb
 844              		.thumb_func
 845              		.fpu fpv4-sp-d16
 847              	xTaskCreate:
 848              	.LFB5:
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 849              		.loc 1 732 0
 850              		.cfi_startproc
 851              		@ args = 8, pretend = 0, frame = 0
 852              		@ frame_needed = 0, uses_anonymous_args = 0
 853              	.LVL71:
 854 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 855              	.LCFI8:
 856              		.cfi_def_cfa_offset 28
 857              		.cfi_offset 4, -28
 858              		.cfi_offset 5, -24
 859              		.cfi_offset 6, -20
 860              		.cfi_offset 7, -16
 861              		.cfi_offset 8, -12
 862              		.cfi_offset 9, -8
 863              		.cfi_offset 14, -4
 864 0004 85B0     		sub	sp, sp, #20
 865              	.LCFI9:
 866              		.cfi_def_cfa_offset 48
 867 0006 0746     		mov	r7, r0
 868 0008 8846     		mov	r8, r1
 869 000a 1546     		mov	r5, r2
 870 000c 9946     		mov	r9, r3
 871              	.LBB135:
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 872              		.loc 1 766 0
ARM GAS  /tmp/cch6Oc3v.s 			page 109


 873 000e 9000     		lsls	r0, r2, #2
 874              	.LVL72:
 875 0010 FFF7FEFF 		bl	pvPortMalloc
 876              	.LVL73:
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 877              		.loc 1 768 0
 878 0014 10B3     		cbz	r0, .L70
 879 0016 0646     		mov	r6, r0
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 880              		.loc 1 771 0
 881 0018 5C20     		movs	r0, #92
 882              	.LVL74:
 883 001a FFF7FEFF 		bl	pvPortMalloc
 884              	.LVL75:
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 885              		.loc 1 773 0
 886 001e 0446     		mov	r4, r0
 887 0020 B0B1     		cbz	r0, .L69
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 888              		.loc 1 776 0
 889 0022 0663     		str	r6, [r0, #48]
 890              	.LBE135:
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 891              		.loc 1 798 0
 892 0024 0023     		movs	r3, #0
 893 0026 80F85930 		strb	r3, [r0, #89]
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 894              		.loc 1 802 0
 895 002a 0393     		str	r3, [sp, #12]
 896 002c 0290     		str	r0, [sp, #8]
 897 002e 0D9B     		ldr	r3, [sp, #52]
 898 0030 0193     		str	r3, [sp, #4]
 899 0032 0C9B     		ldr	r3, [sp, #48]
 900 0034 0093     		str	r3, [sp]
 901 0036 4B46     		mov	r3, r9
 902 0038 2A46     		mov	r2, r5
 903 003a 4146     		mov	r1, r8
 904 003c 3846     		mov	r0, r7
 905              	.LVL76:
 906 003e FFF7FEFF 		bl	prvInitialiseNewTask
 907              	.LVL77:
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 908              		.loc 1 803 0
 909 0042 2046     		mov	r0, r4
 910 0044 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 911              	.LVL78:
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 912              		.loc 1 804 0
 913 0048 0120     		movs	r0, #1
 914              	.LVL79:
 915              	.L67:
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 916              		.loc 1 812 0
 917 004a 05B0     		add	sp, sp, #20
 918              	.LCFI10:
 919              		.cfi_remember_state
 920              		.cfi_def_cfa_offset 28
ARM GAS  /tmp/cch6Oc3v.s 			page 110


 921              		@ sp needed
 922 004c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 923              	.LVL80:
 924              	.L69:
 925              	.LCFI11:
 926              		.cfi_restore_state
 927              	.LBB136:
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 928              		.loc 1 782 0
 929 0050 3046     		mov	r0, r6
 930              	.LVL81:
 931 0052 FFF7FEFF 		bl	vPortFree
 932              	.LVL82:
 933              	.LBE136:
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 934              		.loc 1 808 0
 935 0056 4FF0FF30 		mov	r0, #-1
 936 005a F6E7     		b	.L67
 937              	.LVL83:
 938              	.L70:
 939 005c 4FF0FF30 		mov	r0, #-1
 940              	.LVL84:
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 941              		.loc 1 811 0
 942 0060 F3E7     		b	.L67
 943              		.cfi_endproc
 944              	.LFE5:
 946              		.section	.text.vTaskDelete,"ax",%progbits
 947              		.align	1
 948              		.global	vTaskDelete
 949              		.syntax unified
 950              		.thumb
 951              		.thumb_func
 952              		.fpu fpv4-sp-d16
 954              	vTaskDelete:
 955              	.LFB8:
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 956              		.loc 1 1107 0
 957              		.cfi_startproc
 958              		@ args = 0, pretend = 0, frame = 0
 959              		@ frame_needed = 0, uses_anonymous_args = 0
 960              	.LVL85:
 961 0000 38B5     		push	{r3, r4, r5, lr}
 962              	.LCFI12:
 963              		.cfi_def_cfa_offset 16
 964              		.cfi_offset 3, -16
 965              		.cfi_offset 4, -12
 966              		.cfi_offset 5, -8
 967              		.cfi_offset 14, -4
 968 0002 0446     		mov	r4, r0
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 969              		.loc 1 1110 0
 970 0004 FFF7FEFF 		bl	vPortEnterCritical
 971              	.LVL86:
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 972              		.loc 1 1114 0
 973 0008 24B3     		cbz	r4, .L81
ARM GAS  /tmp/cch6Oc3v.s 			page 111


 974              	.LVL87:
 975              	.L73:
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 976              		.loc 1 1117 0 discriminator 4
 977 000a 251D     		adds	r5, r4, #4
 978 000c 2846     		mov	r0, r5
 979 000e FFF7FEFF 		bl	uxListRemove
 980              	.LVL88:
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 981              		.loc 1 1127 0 discriminator 4
 982 0012 A36A     		ldr	r3, [r4, #40]
 983 0014 1BB1     		cbz	r3, .L74
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 984              		.loc 1 1129 0
 985 0016 04F11800 		add	r0, r4, #24
 986 001a FFF7FEFF 		bl	uxListRemove
 987              	.LVL89:
 988              	.L74:
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 989              		.loc 1 1140 0
 990 001e 1E4A     		ldr	r2, .L84
 991 0020 1368     		ldr	r3, [r2]
 992 0022 0133     		adds	r3, r3, #1
 993 0024 1360     		str	r3, [r2]
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 994              		.loc 1 1142 0
 995 0026 1D4B     		ldr	r3, .L84+4
 996 0028 1B68     		ldr	r3, [r3]
 997 002a A342     		cmp	r3, r4
 998 002c 15D0     		beq	.L82
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 999              		.loc 1 1165 0
 1000 002e 1C4A     		ldr	r2, .L84+8
 1001 0030 1368     		ldr	r3, [r2]
 1002 0032 013B     		subs	r3, r3, #1
 1003 0034 1360     		str	r3, [r2]
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1004              		.loc 1 1166 0
 1005 0036 2046     		mov	r0, r4
 1006 0038 FFF7FEFF 		bl	prvDeleteTCB
 1007              	.LVL90:
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1008              		.loc 1 1170 0
 1009 003c FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1010              	.LVL91:
 1011              	.L76:
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1012              		.loc 1 1175 0
 1013 0040 FFF7FEFF 		bl	vPortExitCritical
 1014              	.LVL92:
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1015              		.loc 1 1179 0
 1016 0044 174B     		ldr	r3, .L84+12
 1017 0046 1B68     		ldr	r3, [r3]
 1018 0048 1BB1     		cbz	r3, .L72
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1019              		.loc 1 1181 0
ARM GAS  /tmp/cch6Oc3v.s 			page 112


 1020 004a 144B     		ldr	r3, .L84+4
 1021 004c 1B68     		ldr	r3, [r3]
 1022 004e A342     		cmp	r3, r4
 1023 0050 0CD0     		beq	.L83
 1024              	.L72:
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1025              		.loc 1 1191 0
 1026 0052 38BD     		pop	{r3, r4, r5, pc}
 1027              	.LVL93:
 1028              	.L81:
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1029              		.loc 1 1114 0 discriminator 1
 1030 0054 114B     		ldr	r3, .L84+4
 1031 0056 1C68     		ldr	r4, [r3]
 1032              	.LVL94:
 1033 0058 D7E7     		b	.L73
 1034              	.LVL95:
 1035              	.L82:
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1036              		.loc 1 1149 0
 1037 005a 2946     		mov	r1, r5
 1038 005c 1248     		ldr	r0, .L84+16
 1039 005e FFF7FEFF 		bl	vListInsertEnd
 1040              	.LVL96:
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1041              		.loc 1 1154 0
 1042 0062 124A     		ldr	r2, .L84+20
 1043 0064 1368     		ldr	r3, [r2]
 1044 0066 0133     		adds	r3, r3, #1
 1045 0068 1360     		str	r3, [r2]
 1046 006a E9E7     		b	.L76
 1047              	.L83:
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1048              		.loc 1 1183 0
 1049 006c 104B     		ldr	r3, .L84+24
 1050 006e 1B68     		ldr	r3, [r3]
 1051 0070 43B1     		cbz	r3, .L78
 1052              	.LBB137:
 1053              	.LBB138:
 1054              		.loc 2 195 0
 1055              		.syntax unified
 1056              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1057 0072 4FF05003 			mov r3, #80												
 1058 0076 83F31188 		msr basepri, r3											
 1059 007a BFF36F8F 		isb														
 1060 007e BFF34F8F 		dsb														
 1061              	
 1062              	@ 0 "" 2
 1063              	.LVL97:
 1064              		.thumb
 1065              		.syntax unified
 1066              	.L79:
 1067 0082 FEE7     		b	.L79
 1068              	.L78:
 1069              	.LBE138:
 1070              	.LBE137:
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/cch6Oc3v.s 			page 113


 1071              		.loc 1 1184 0
 1072 0084 0B4B     		ldr	r3, .L84+28
 1073 0086 4FF08052 		mov	r2, #268435456
 1074 008a 1A60     		str	r2, [r3]
 1075              		.syntax unified
 1076              	@ 1184 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1077 008c BFF34F8F 		dsb
 1078              	@ 0 "" 2
 1079              	@ 1184 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1080 0090 BFF36F8F 		isb
 1081              	@ 0 "" 2
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1082              		.loc 1 1191 0
 1083              		.thumb
 1084              		.syntax unified
 1085 0094 DDE7     		b	.L72
 1086              	.L85:
 1087 0096 00BF     		.align	2
 1088              	.L84:
 1089 0098 00000000 		.word	.LANCHOR12
 1090 009c 00000000 		.word	.LANCHOR5
 1091 00a0 00000000 		.word	.LANCHOR4
 1092 00a4 00000000 		.word	.LANCHOR11
 1093 00a8 00000000 		.word	.LANCHOR9
 1094 00ac 00000000 		.word	.LANCHOR14
 1095 00b0 00000000 		.word	.LANCHOR16
 1096 00b4 04ED00E0 		.word	-536810236
 1097              		.cfi_endproc
 1098              	.LFE8:
 1100              		.section	.text.eTaskGetState,"ax",%progbits
 1101              		.align	1
 1102              		.global	eTaskGetState
 1103              		.syntax unified
 1104              		.thumb
 1105              		.thumb_func
 1106              		.fpu fpv4-sp-d16
 1108              	eTaskGetState:
 1109              	.LFB11:
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
 1110              		.loc 1 1328 0
 1111              		.cfi_startproc
 1112              		@ args = 0, pretend = 0, frame = 0
 1113              		@ frame_needed = 0, uses_anonymous_args = 0
 1114              	.LVL98:
 1115 0000 38B5     		push	{r3, r4, r5, lr}
 1116              	.LCFI13:
 1117              		.cfi_def_cfa_offset 16
 1118              		.cfi_offset 3, -16
 1119              		.cfi_offset 4, -12
 1120              		.cfi_offset 5, -8
 1121              		.cfi_offset 14, -4
 1122              	.LVL99:
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1123              		.loc 1 1333 0
 1124 0002 E0B1     		cbz	r0, .L98
 1125 0004 0546     		mov	r5, r0
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/cch6Oc3v.s 			page 114


 1126              		.loc 1 1335 0
 1127 0006 194B     		ldr	r3, .L100
 1128 0008 1B68     		ldr	r3, [r3]
 1129 000a 8342     		cmp	r3, r0
 1130 000c 26D0     		beq	.L91
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1131              		.loc 1 1342 0
 1132 000e FFF7FEFF 		bl	vPortEnterCritical
 1133              	.LVL100:
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1134              		.loc 1 1344 0
 1135 0012 6C69     		ldr	r4, [r5, #20]
 1136              	.LVL101:
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1137              		.loc 1 1346 0
 1138 0014 FFF7FEFF 		bl	vPortExitCritical
 1139              	.LVL102:
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1140              		.loc 1 1348 0
 1141 0018 154B     		ldr	r3, .L100+4
 1142 001a 1B68     		ldr	r3, [r3]
 1143 001c A342     		cmp	r3, r4
 1144 001e 1FD0     		beq	.L92
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1145              		.loc 1 1348 0 is_stmt 0 discriminator 1
 1146 0020 144B     		ldr	r3, .L100+8
 1147 0022 1B68     		ldr	r3, [r3]
 1148 0024 A342     		cmp	r3, r4
 1149 0026 1DD0     		beq	.L93
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1150              		.loc 1 1356 0 is_stmt 1
 1151 0028 134B     		ldr	r3, .L100+12
 1152 002a 9C42     		cmp	r4, r3
 1153 002c 10D0     		beq	.L99
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1154              		.loc 1 1373 0
 1155 002e 134B     		ldr	r3, .L100+16
 1156 0030 9C42     		cmp	r4, r3
 1157 0032 19D0     		beq	.L95
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1158              		.loc 1 1386 0 discriminator 1
 1159 0034 002C     		cmp	r4, #0
 1160 0036 0CBF     		ite	eq
 1161 0038 0420     		moveq	r0, #4
 1162 003a 0120     		movne	r0, #1
 1163              	.LVL103:
 1164              	.L89:
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1165              		.loc 1 1391 0
 1166 003c 38BD     		pop	{r3, r4, r5, pc}
 1167              	.LVL104:
 1168              	.L98:
 1169              	.LBB139:
 1170              	.LBB140:
 1171              		.loc 2 195 0
 1172              		.syntax unified
 1173              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  /tmp/cch6Oc3v.s 			page 115


 1174 003e 4FF05003 			mov r3, #80												
 1175 0042 83F31188 		msr basepri, r3											
 1176 0046 BFF36F8F 		isb														
 1177 004a BFF34F8F 		dsb														
 1178              	
 1179              	@ 0 "" 2
 1180              	.LVL105:
 1181              		.thumb
 1182              		.syntax unified
 1183              	.L88:
 1184 004e FEE7     		b	.L88
 1185              	.LVL106:
 1186              	.L99:
 1187              	.LBE140:
 1188              	.LBE139:
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1189              		.loc 1 1361 0
 1190 0050 AB6A     		ldr	r3, [r5, #40]
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1191              		.loc 1 1367 0
 1192 0052 002B     		cmp	r3, #0
 1193 0054 0CBF     		ite	eq
 1194 0056 0320     		moveq	r0, #3
 1195 0058 0220     		movne	r0, #2
 1196 005a EFE7     		b	.L89
 1197              	.LVL107:
 1198              	.L91:
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1199              		.loc 1 1338 0
 1200 005c 0020     		movs	r0, #0
 1201              	.LVL108:
 1202 005e EDE7     		b	.L89
 1203              	.LVL109:
 1204              	.L92:
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1205              		.loc 1 1352 0
 1206 0060 0220     		movs	r0, #2
 1207 0062 EBE7     		b	.L89
 1208              	.L93:
 1209 0064 0220     		movs	r0, #2
 1210 0066 E9E7     		b	.L89
 1211              	.L95:
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1212              		.loc 1 1378 0
 1213 0068 0420     		movs	r0, #4
 1214 006a E7E7     		b	.L89
 1215              	.L101:
 1216              		.align	2
 1217              	.L100:
 1218 006c 00000000 		.word	.LANCHOR5
 1219 0070 00000000 		.word	.LANCHOR2
 1220 0074 00000000 		.word	.LANCHOR10
 1221 0078 00000000 		.word	.LANCHOR0
 1222 007c 00000000 		.word	.LANCHOR9
 1223              		.cfi_endproc
 1224              	.LFE11:
 1226              		.section	.text.uxTaskPriorityGet,"ax",%progbits
ARM GAS  /tmp/cch6Oc3v.s 			page 116


 1227              		.align	1
 1228              		.global	uxTaskPriorityGet
 1229              		.syntax unified
 1230              		.thumb
 1231              		.thumb_func
 1232              		.fpu fpv4-sp-d16
 1234              	uxTaskPriorityGet:
 1235              	.LFB12:
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1236              		.loc 1 1399 0
 1237              		.cfi_startproc
 1238              		@ args = 0, pretend = 0, frame = 0
 1239              		@ frame_needed = 0, uses_anonymous_args = 0
 1240              	.LVL110:
 1241 0000 10B5     		push	{r4, lr}
 1242              	.LCFI14:
 1243              		.cfi_def_cfa_offset 8
 1244              		.cfi_offset 4, -8
 1245              		.cfi_offset 14, -4
 1246 0002 0446     		mov	r4, r0
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1247              		.loc 1 1403 0
 1248 0004 FFF7FEFF 		bl	vPortEnterCritical
 1249              	.LVL111:
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1250              		.loc 1 1407 0
 1251 0008 24B1     		cbz	r4, .L105
 1252              	.LVL112:
 1253              	.L103:
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1254              		.loc 1 1408 0 discriminator 4
 1255 000a E46A     		ldr	r4, [r4, #44]
 1256              	.LVL113:
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1257              		.loc 1 1410 0 discriminator 4
 1258 000c FFF7FEFF 		bl	vPortExitCritical
 1259              	.LVL114:
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1260              		.loc 1 1413 0 discriminator 4
 1261 0010 2046     		mov	r0, r4
 1262 0012 10BD     		pop	{r4, pc}
 1263              	.LVL115:
 1264              	.L105:
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1265              		.loc 1 1407 0 discriminator 1
 1266 0014 014B     		ldr	r3, .L106
 1267 0016 1C68     		ldr	r4, [r3]
 1268              	.LVL116:
 1269 0018 F7E7     		b	.L103
 1270              	.L107:
 1271 001a 00BF     		.align	2
 1272              	.L106:
 1273 001c 00000000 		.word	.LANCHOR5
 1274              		.cfi_endproc
 1275              	.LFE12:
 1277              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1278              		.align	1
ARM GAS  /tmp/cch6Oc3v.s 			page 117


 1279              		.global	uxTaskPriorityGetFromISR
 1280              		.syntax unified
 1281              		.thumb
 1282              		.thumb_func
 1283              		.fpu fpv4-sp-d16
 1285              	uxTaskPriorityGetFromISR:
 1286              	.LFB13:
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1287              		.loc 1 1421 0
 1288              		.cfi_startproc
 1289              		@ args = 0, pretend = 0, frame = 0
 1290              		@ frame_needed = 0, uses_anonymous_args = 0
 1291              	.LVL117:
 1292 0000 10B5     		push	{r4, lr}
 1293              	.LCFI15:
 1294              		.cfi_def_cfa_offset 8
 1295              		.cfi_offset 4, -8
 1296              		.cfi_offset 14, -4
 1297 0002 0446     		mov	r4, r0
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1298              		.loc 1 1441 0
 1299 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1300              	.LVL118:
 1301              	.LBB141:
 1302              	.LBB142:
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1303              		.loc 2 211 0
 1304              		.syntax unified
 1305              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1306 0008 EFF31183 			mrs r3, basepri											
 1307 000c 4FF05002 		mov r2, #80												
 1308 0010 82F31188 		msr basepri, r2											
 1309 0014 BFF36F8F 		isb														
 1310 0018 BFF34F8F 		dsb														
 1311              	
 1312              	@ 0 "" 2
 1313              		.thumb
 1314              		.syntax unified
 1315              	.LBE142:
 1316              	.LBE141:
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1317              		.loc 1 1447 0
ARM GAS  /tmp/cch6Oc3v.s 			page 118


 1318 001c 1CB1     		cbz	r4, .L111
 1319              	.LVL119:
 1320              	.L109:
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1321              		.loc 1 1448 0 discriminator 4
 1322 001e E06A     		ldr	r0, [r4, #44]
 1323              	.LVL120:
 1324              	.LBB143:
 1325              	.LBB144:
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1326              		.loc 2 229 0 discriminator 4
 1327              		.syntax unified
 1328              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1329 0020 83F31188 			msr basepri, r3	
 1330              	@ 0 "" 2
 1331              	.LVL121:
 1332              		.thumb
 1333              		.syntax unified
 1334              	.LBE144:
 1335              	.LBE143:
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1336              		.loc 1 1453 0 discriminator 4
 1337 0024 10BD     		pop	{r4, pc}
 1338              	.LVL122:
 1339              	.L111:
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1340              		.loc 1 1447 0 discriminator 1
 1341 0026 014A     		ldr	r2, .L112
 1342 0028 1468     		ldr	r4, [r2]
 1343              	.LVL123:
 1344 002a F8E7     		b	.L109
 1345              	.L113:
 1346              		.align	2
 1347              	.L112:
 1348 002c 00000000 		.word	.LANCHOR5
 1349              		.cfi_endproc
 1350              	.LFE13:
 1352              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1353              		.align	1
 1354              		.global	vTaskPrioritySet
ARM GAS  /tmp/cch6Oc3v.s 			page 119


 1355              		.syntax unified
 1356              		.thumb
 1357              		.thumb_func
 1358              		.fpu fpv4-sp-d16
 1360              	vTaskPrioritySet:
 1361              	.LFB14:
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1362              		.loc 1 1461 0
 1363              		.cfi_startproc
 1364              		@ args = 0, pretend = 0, frame = 0
 1365              		@ frame_needed = 0, uses_anonymous_args = 0
 1366              	.LVL124:
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1367              		.loc 1 1466 0
 1368 0000 3729     		cmp	r1, #55
 1369 0002 08D9     		bls	.L115
 1370              	.LBB145:
 1371              	.LBB146:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1372              		.loc 2 195 0
 1373              		.syntax unified
 1374              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1375 0004 4FF05003 			mov r3, #80												
 1376 0008 83F31188 		msr basepri, r3											
 1377 000c BFF36F8F 		isb														
 1378 0010 BFF34F8F 		dsb														
 1379              	
 1380              	@ 0 "" 2
 1381              	.LVL125:
 1382              		.thumb
 1383              		.syntax unified
 1384              	.L116:
 1385 0014 FEE7     		b	.L116
 1386              	.L115:
 1387              	.LBE146:
 1388              	.LBE145:
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1389              		.loc 1 1461 0
 1390 0016 70B5     		push	{r4, r5, r6, lr}
 1391              	.LCFI16:
 1392              		.cfi_def_cfa_offset 16
 1393              		.cfi_offset 4, -16
 1394              		.cfi_offset 5, -12
 1395              		.cfi_offset 6, -8
 1396              		.cfi_offset 14, -4
 1397 0018 0446     		mov	r4, r0
 1398 001a 0D46     		mov	r5, r1
 1399              	.LVL126:
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1400              		.loc 1 1478 0
 1401 001c FFF7FEFF 		bl	vPortEnterCritical
 1402              	.LVL127:
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1403              		.loc 1 1482 0
 1404 0020 0CB9     		cbnz	r4, .L117
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1405              		.loc 1 1482 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/cch6Oc3v.s 			page 120


 1406 0022 254B     		ldr	r3, .L128
 1407 0024 1C68     		ldr	r4, [r3]
 1408              	.LVL128:
 1409              	.L117:
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1410              		.loc 1 1488 0 is_stmt 1 discriminator 4
 1411 0026 E26C     		ldr	r2, [r4, #76]
 1412              	.LVL129:
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1413              		.loc 1 1496 0 discriminator 4
 1414 0028 9542     		cmp	r5, r2
 1415 002a 38D0     		beq	.L118
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1416              		.loc 1 1500 0
 1417 002c 3AD9     		bls	.L119
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1418              		.loc 1 1502 0
 1419 002e 224B     		ldr	r3, .L128
 1420 0030 1B68     		ldr	r3, [r3]
 1421 0032 A342     		cmp	r3, r4
 1422 0034 3DD0     		beq	.L125
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1423              		.loc 1 1507 0
 1424 0036 204B     		ldr	r3, .L128
 1425 0038 1B68     		ldr	r3, [r3]
 1426 003a DE6A     		ldr	r6, [r3, #44]
 1427 003c AE42     		cmp	r6, r5
 1428 003e 8CBF     		ite	hi
 1429 0040 0026     		movhi	r6, #0
 1430 0042 0126     		movls	r6, #1
 1431              	.L120:
 1432              	.LVL130:
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1433              		.loc 1 1540 0
 1434 0044 E36A     		ldr	r3, [r4, #44]
 1435              	.LVL131:
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1436              		.loc 1 1546 0
 1437 0046 9A42     		cmp	r2, r3
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1438              		.loc 1 1548 0
 1439 0048 08BF     		it	eq
 1440 004a E562     		streq	r5, [r4, #44]
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1441              		.loc 1 1556 0
 1442 004c E564     		str	r5, [r4, #76]
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1443              		.loc 1 1566 0
 1444 004e A269     		ldr	r2, [r4, #24]
 1445              	.LVL132:
 1446 0050 002A     		cmp	r2, #0
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1447              		.loc 1 1568 0
 1448 0052 A4BF     		itt	ge
 1449 0054 C5F13805 		rsbge	r5, r5, #56
 1450              	.LVL133:
 1451 0058 A561     		strge	r5, [r4, #24]
ARM GAS  /tmp/cch6Oc3v.s 			page 121


1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1452              		.loc 1 1579 0
 1453 005a 184A     		ldr	r2, .L128+4
 1454 005c 1421     		movs	r1, #20
 1455 005e 01FB0323 		mla	r3, r1, r3, r2
 1456              	.LVL134:
 1457 0062 6269     		ldr	r2, [r4, #20]
 1458 0064 9A42     		cmp	r2, r3
 1459 0066 11D1     		bne	.L123
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1460              		.loc 1 1584 0
 1461 0068 251D     		adds	r5, r4, #4
 1462 006a 2846     		mov	r0, r5
 1463 006c FFF7FEFF 		bl	uxListRemove
 1464              	.LVL135:
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1465              		.loc 1 1595 0
 1466 0070 E36A     		ldr	r3, [r4, #44]
 1467 0072 134A     		ldr	r2, .L128+8
 1468 0074 1268     		ldr	r2, [r2]
 1469 0076 9342     		cmp	r3, r2
 1470 0078 84BF     		itt	hi
 1471 007a 114A     		ldrhi	r2, .L128+8
 1472 007c 1360     		strhi	r3, [r2]
 1473 007e 2946     		mov	r1, r5
 1474 0080 0E4A     		ldr	r2, .L128+4
 1475 0082 1420     		movs	r0, #20
 1476 0084 00FB0320 		mla	r0, r0, r3, r2
 1477 0088 FFF7FEFF 		bl	vListInsertEnd
 1478              	.LVL136:
 1479              	.L123:
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1480              		.loc 1 1602 0
 1481 008c 3EB1     		cbz	r6, .L118
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1482              		.loc 1 1604 0
 1483 008e 0D4B     		ldr	r3, .L128+12
 1484 0090 4FF08052 		mov	r2, #268435456
 1485 0094 1A60     		str	r2, [r3]
 1486              		.syntax unified
 1487              	@ 1604 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1488 0096 BFF34F8F 		dsb
 1489              	@ 0 "" 2
 1490              	@ 1604 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1491 009a BFF36F8F 		isb
 1492              	@ 0 "" 2
 1493              	.LVL137:
 1494              		.thumb
 1495              		.syntax unified
 1496              	.L118:
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1497              		.loc 1 1616 0
 1498 009e FFF7FEFF 		bl	vPortExitCritical
 1499              	.LVL138:
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1500              		.loc 1 1617 0
 1501 00a2 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/cch6Oc3v.s 			page 122


 1502              	.LVL139:
 1503              	.L119:
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1504              		.loc 1 1523 0
 1505 00a4 044B     		ldr	r3, .L128
 1506 00a6 1E68     		ldr	r6, [r3]
 1507 00a8 A642     		cmp	r6, r4
 1508 00aa 14BF     		ite	ne
 1509 00ac 0026     		movne	r6, #0
 1510 00ae 0126     		moveq	r6, #1
 1511 00b0 C8E7     		b	.L120
 1512              	.L125:
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1513              		.loc 1 1464 0
 1514 00b2 0026     		movs	r6, #0
 1515 00b4 C6E7     		b	.L120
 1516              	.L129:
 1517 00b6 00BF     		.align	2
 1518              	.L128:
 1519 00b8 00000000 		.word	.LANCHOR5
 1520 00bc 00000000 		.word	.LANCHOR6
 1521 00c0 00000000 		.word	.LANCHOR13
 1522 00c4 04ED00E0 		.word	-536810236
 1523              		.cfi_endproc
 1524              	.LFE14:
 1526              		.section	.text.vTaskResume,"ax",%progbits
 1527              		.align	1
 1528              		.global	vTaskResume
 1529              		.syntax unified
 1530              		.thumb
 1531              		.thumb_func
 1532              		.fpu fpv4-sp-d16
 1534              	vTaskResume:
 1535              	.LFB17:
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1536              		.loc 1 1772 0
 1537              		.cfi_startproc
 1538              		@ args = 0, pretend = 0, frame = 0
 1539              		@ frame_needed = 0, uses_anonymous_args = 0
 1540              	.LVL140:
 1541 0000 38B5     		push	{r3, r4, r5, lr}
 1542              	.LCFI17:
 1543              		.cfi_def_cfa_offset 16
 1544              		.cfi_offset 3, -16
 1545              		.cfi_offset 4, -12
 1546              		.cfi_offset 5, -8
 1547              		.cfi_offset 14, -4
 1548              	.LVL141:
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1549              		.loc 1 1776 0
 1550 0002 68B1     		cbz	r0, .L137
 1551 0004 0446     		mov	r4, r0
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1552              		.loc 1 1780 0 discriminator 1
 1553 0006 1B4B     		ldr	r3, .L139
 1554 0008 1B68     		ldr	r3, [r3]
 1555 000a 8342     		cmp	r3, r0
ARM GAS  /tmp/cch6Oc3v.s 			page 123


 1556 000c 07D0     		beq	.L130
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1557              		.loc 1 1782 0
 1558 000e FFF7FEFF 		bl	vPortEnterCritical
 1559              	.LVL142:
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1560              		.loc 1 1784 0
 1561 0012 2046     		mov	r0, r4
 1562 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1563              	.LVL143:
 1564 0018 58B9     		cbnz	r0, .L138
 1565              	.L134:
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1566              		.loc 1 1811 0
 1567 001a FFF7FEFF 		bl	vPortExitCritical
 1568              	.LVL144:
 1569              	.L130:
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1570              		.loc 1 1817 0
 1571 001e 38BD     		pop	{r3, r4, r5, pc}
 1572              	.LVL145:
 1573              	.L137:
 1574              	.LBB147:
 1575              	.LBB148:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1576              		.loc 2 195 0
 1577              		.syntax unified
 1578              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1579 0020 4FF05003 			mov r3, #80												
 1580 0024 83F31188 		msr basepri, r3											
 1581 0028 BFF36F8F 		isb														
 1582 002c BFF34F8F 		dsb														
 1583              	
 1584              	@ 0 "" 2
 1585              	.LVL146:
 1586              		.thumb
 1587              		.syntax unified
 1588              	.L132:
 1589 0030 FEE7     		b	.L132
 1590              	.LVL147:
 1591              	.L138:
 1592              	.LBE148:
 1593              	.LBE147:
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1594              		.loc 1 1790 0
 1595 0032 251D     		adds	r5, r4, #4
 1596 0034 2846     		mov	r0, r5
 1597 0036 FFF7FEFF 		bl	uxListRemove
 1598              	.LVL148:
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1599              		.loc 1 1791 0
 1600 003a E36A     		ldr	r3, [r4, #44]
 1601 003c 0E4A     		ldr	r2, .L139+4
 1602 003e 1268     		ldr	r2, [r2]
 1603 0040 9342     		cmp	r3, r2
 1604 0042 84BF     		itt	hi
 1605 0044 0C4A     		ldrhi	r2, .L139+4
ARM GAS  /tmp/cch6Oc3v.s 			page 124


 1606 0046 1360     		strhi	r3, [r2]
 1607 0048 2946     		mov	r1, r5
 1608 004a 0C4A     		ldr	r2, .L139+8
 1609 004c 1420     		movs	r0, #20
 1610 004e 00FB0320 		mla	r0, r0, r3, r2
 1611 0052 FFF7FEFF 		bl	vListInsertEnd
 1612              	.LVL149:
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1613              		.loc 1 1794 0
 1614 0056 074B     		ldr	r3, .L139
 1615 0058 1B68     		ldr	r3, [r3]
 1616 005a E26A     		ldr	r2, [r4, #44]
 1617 005c DB6A     		ldr	r3, [r3, #44]
 1618 005e 9A42     		cmp	r2, r3
 1619 0060 DBD3     		bcc	.L134
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1620              		.loc 1 1799 0
 1621 0062 074B     		ldr	r3, .L139+12
 1622 0064 4FF08052 		mov	r2, #268435456
 1623 0068 1A60     		str	r2, [r3]
 1624              		.syntax unified
 1625              	@ 1799 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1626 006a BFF34F8F 		dsb
 1627              	@ 0 "" 2
 1628              	@ 1799 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1629 006e BFF36F8F 		isb
 1630              	@ 0 "" 2
 1631              		.thumb
 1632              		.syntax unified
 1633 0072 D2E7     		b	.L134
 1634              	.L140:
 1635              		.align	2
 1636              	.L139:
 1637 0074 00000000 		.word	.LANCHOR5
 1638 0078 00000000 		.word	.LANCHOR13
 1639 007c 00000000 		.word	.LANCHOR6
 1640 0080 04ED00E0 		.word	-536810236
 1641              		.cfi_endproc
 1642              	.LFE17:
 1644              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1645              		.align	1
 1646              		.global	xTaskResumeFromISR
 1647              		.syntax unified
 1648              		.thumb
 1649              		.thumb_func
 1650              		.fpu fpv4-sp-d16
 1652              	xTaskResumeFromISR:
 1653              	.LFB18:
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1654              		.loc 1 1826 0
 1655              		.cfi_startproc
 1656              		@ args = 0, pretend = 0, frame = 0
 1657              		@ frame_needed = 0, uses_anonymous_args = 0
 1658              	.LVL150:
 1659 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1660              	.LCFI18:
 1661              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/cch6Oc3v.s 			page 125


 1662              		.cfi_offset 3, -24
 1663              		.cfi_offset 4, -20
 1664              		.cfi_offset 5, -16
 1665              		.cfi_offset 6, -12
 1666              		.cfi_offset 7, -8
 1667              		.cfi_offset 14, -4
 1668              	.LVL151:
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1669              		.loc 1 1831 0
 1670 0002 40B9     		cbnz	r0, .L142
 1671              	.LBB149:
 1672              	.LBB150:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1673              		.loc 2 195 0
 1674              		.syntax unified
 1675              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1676 0004 4FF05003 			mov r3, #80												
 1677 0008 83F31188 		msr basepri, r3											
 1678 000c BFF36F8F 		isb														
 1679 0010 BFF34F8F 		dsb														
 1680              	
 1681              	@ 0 "" 2
 1682              	.LVL152:
 1683              		.thumb
 1684              		.syntax unified
 1685              	.L143:
 1686 0014 FEE7     		b	.L143
 1687              	.L142:
 1688 0016 0446     		mov	r4, r0
 1689              	.LBE150:
 1690              	.LBE149:
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1691              		.loc 1 1849 0
 1692 0018 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1693              	.LVL153:
 1694              	.LBB151:
 1695              	.LBB152:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1696              		.loc 2 211 0
 1697              		.syntax unified
 1698              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1699 001c EFF31187 			mrs r7, basepri											
 1700 0020 4FF05003 		mov r3, #80												
 1701 0024 83F31188 		msr basepri, r3											
 1702 0028 BFF36F8F 		isb														
 1703 002c BFF34F8F 		dsb														
 1704              	
 1705              	@ 0 "" 2
 1706              		.thumb
 1707              		.syntax unified
 1708              	.LBE152:
 1709              	.LBE151:
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1710              		.loc 1 1853 0
 1711 0030 2046     		mov	r0, r4
 1712 0032 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1713              	.LVL154:
ARM GAS  /tmp/cch6Oc3v.s 			page 126


 1714 0036 38B3     		cbz	r0, .L147
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1715              		.loc 1 1858 0
 1716 0038 144B     		ldr	r3, .L149
 1717 003a 1B68     		ldr	r3, [r3]
 1718 003c EBB9     		cbnz	r3, .L145
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1719              		.loc 1 1862 0
 1720 003e 144B     		ldr	r3, .L149+4
 1721 0040 1B68     		ldr	r3, [r3]
 1722 0042 E56A     		ldr	r5, [r4, #44]
 1723 0044 DB6A     		ldr	r3, [r3, #44]
 1724 0046 9D42     		cmp	r5, r3
 1725 0048 34BF     		ite	cc
 1726 004a 0025     		movcc	r5, #0
 1727 004c 0125     		movcs	r5, #1
 1728              	.LVL155:
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1729              		.loc 1 1871 0
 1730 004e 261D     		adds	r6, r4, #4
 1731 0050 3046     		mov	r0, r6
 1732 0052 FFF7FEFF 		bl	uxListRemove
 1733              	.LVL156:
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1734              		.loc 1 1872 0
 1735 0056 E36A     		ldr	r3, [r4, #44]
 1736 0058 0E4A     		ldr	r2, .L149+8
 1737 005a 1268     		ldr	r2, [r2]
 1738 005c 9342     		cmp	r3, r2
 1739 005e 84BF     		itt	hi
 1740 0060 0C4A     		ldrhi	r2, .L149+8
 1741 0062 1360     		strhi	r3, [r2]
 1742 0064 3146     		mov	r1, r6
 1743 0066 0C4A     		ldr	r2, .L149+12
 1744 0068 1420     		movs	r0, #20
 1745 006a 00FB0320 		mla	r0, r0, r3, r2
 1746 006e FFF7FEFF 		bl	vListInsertEnd
 1747              	.LVL157:
 1748              	.L144:
 1749              	.LBB153:
 1750              	.LBB154:
 1751              		.loc 2 229 0
 1752              		.syntax unified
 1753              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1754 0072 87F31188 			msr basepri, r7	
 1755              	@ 0 "" 2
 1756              	.LVL158:
 1757              		.thumb
 1758              		.syntax unified
 1759              	.LBE154:
 1760              	.LBE153:
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1761              		.loc 1 1890 0
 1762 0076 2846     		mov	r0, r5
 1763 0078 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1764              	.LVL159:
 1765              	.L145:
ARM GAS  /tmp/cch6Oc3v.s 			page 127


1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1766              		.loc 1 1879 0
 1767 007a 04F11801 		add	r1, r4, #24
 1768 007e 0748     		ldr	r0, .L149+16
 1769 0080 FFF7FEFF 		bl	vListInsertEnd
 1770              	.LVL160:
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1771              		.loc 1 1827 0
 1772 0084 0025     		movs	r5, #0
 1773 0086 F4E7     		b	.L144
 1774              	.L147:
 1775 0088 0025     		movs	r5, #0
 1776 008a F2E7     		b	.L144
 1777              	.L150:
 1778              		.align	2
 1779              	.L149:
 1780 008c 00000000 		.word	.LANCHOR16
 1781 0090 00000000 		.word	.LANCHOR5
 1782 0094 00000000 		.word	.LANCHOR13
 1783 0098 00000000 		.word	.LANCHOR6
 1784 009c 00000000 		.word	.LANCHOR1
 1785              		.cfi_endproc
 1786              	.LFE18:
 1788              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1789              		.align	1
 1790              		.global	vTaskStartScheduler
 1791              		.syntax unified
 1792              		.thumb
 1793              		.thumb_func
 1794              		.fpu fpv4-sp-d16
 1796              	vTaskStartScheduler:
 1797              	.LFB19:
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1798              		.loc 1 1896 0
 1799              		.cfi_startproc
 1800              		@ args = 0, pretend = 0, frame = 16
 1801              		@ frame_needed = 0, uses_anonymous_args = 0
 1802 0000 10B5     		push	{r4, lr}
 1803              	.LCFI19:
 1804              		.cfi_def_cfa_offset 8
 1805              		.cfi_offset 4, -8
 1806              		.cfi_offset 14, -4
 1807 0002 88B0     		sub	sp, sp, #32
 1808              	.LCFI20:
 1809              		.cfi_def_cfa_offset 40
 1810              	.LBB155:
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 1811              		.loc 1 1902 0
 1812 0004 0024     		movs	r4, #0
 1813 0006 0594     		str	r4, [sp, #20]
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
 1814              		.loc 1 1903 0
 1815 0008 0694     		str	r4, [sp, #24]
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 1816              		.loc 1 1908 0
 1817 000a 07AA     		add	r2, sp, #28
 1818 000c 06A9     		add	r1, sp, #24
ARM GAS  /tmp/cch6Oc3v.s 			page 128


 1819 000e 05A8     		add	r0, sp, #20
 1820 0010 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
 1821              	.LVL161:
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
 1822              		.loc 1 1909 0
 1823 0014 059B     		ldr	r3, [sp, #20]
 1824 0016 0293     		str	r3, [sp, #8]
 1825 0018 069B     		ldr	r3, [sp, #24]
 1826 001a 0193     		str	r3, [sp, #4]
 1827 001c 0094     		str	r4, [sp]
 1828 001e 2346     		mov	r3, r4
 1829 0020 079A     		ldr	r2, [sp, #28]
 1830 0022 1549     		ldr	r1, .L159
 1831 0024 1548     		ldr	r0, .L159+4
 1832 0026 FFF7FEFF 		bl	xTaskCreateStatic
 1833              	.LVL162:
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1834              		.loc 1 1917 0
 1835 002a B0B1     		cbz	r0, .L151
 1836              	.LVL163:
 1837              	.LBE155:
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1838              		.loc 1 1942 0
 1839 002c FFF7FEFF 		bl	xTimerCreateTimerTask
 1840              	.LVL164:
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1841              		.loc 1 1951 0
 1842 0030 0128     		cmp	r0, #1
 1843 0032 14D1     		bne	.L157
 1844              	.LBB156:
 1845              	.LBB157:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1846              		.loc 2 195 0
 1847              		.syntax unified
 1848              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1849 0034 4FF05003 			mov r3, #80												
 1850 0038 83F31188 		msr basepri, r3											
 1851 003c BFF36F8F 		isb														
 1852 0040 BFF34F8F 		dsb														
 1853              	
 1854              	@ 0 "" 2
 1855              		.thumb
 1856              		.syntax unified
 1857              	.LBE157:
 1858              	.LBE156:
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1859              		.loc 1 1977 0
 1860 0044 0E4B     		ldr	r3, .L159+8
 1861 0046 4FF0FF32 		mov	r2, #-1
 1862 004a 1A60     		str	r2, [r3]
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1863              		.loc 1 1978 0
 1864 004c 0D4B     		ldr	r3, .L159+12
 1865 004e 0122     		movs	r2, #1
 1866 0050 1A60     		str	r2, [r3]
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1867              		.loc 1 1979 0
ARM GAS  /tmp/cch6Oc3v.s 			page 129


 1868 0052 0D4B     		ldr	r3, .L159+16
 1869 0054 1C60     		str	r4, [r3]
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1870              		.loc 1 1991 0
 1871 0056 FFF7FEFF 		bl	xPortStartScheduler
 1872              	.LVL165:
 1873              	.L151:
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1874              		.loc 1 2012 0
 1875 005a 08B0     		add	sp, sp, #32
 1876              	.LCFI21:
 1877              		.cfi_remember_state
 1878              		.cfi_def_cfa_offset 8
 1879              		@ sp needed
 1880 005c 10BD     		pop	{r4, pc}
 1881              	.LVL166:
 1882              	.L157:
 1883              	.LCFI22:
 1884              		.cfi_restore_state
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1885              		.loc 1 2006 0
 1886 005e B0F1FF3F 		cmp	r0, #-1
 1887 0062 FAD1     		bne	.L151
 1888              	.LBB158:
 1889              	.LBB159:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1890              		.loc 2 195 0
 1891              		.syntax unified
 1892              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1893 0064 4FF05003 			mov r3, #80												
 1894 0068 83F31188 		msr basepri, r3											
 1895 006c BFF36F8F 		isb														
 1896 0070 BFF34F8F 		dsb														
 1897              	
 1898              	@ 0 "" 2
 1899              	.LVL167:
 1900              		.thumb
 1901              		.syntax unified
 1902              	.L156:
 1903 0074 FEE7     		b	.L156
 1904              	.L160:
 1905 0076 00BF     		.align	2
 1906              	.L159:
 1907 0078 00000000 		.word	.LC0
 1908 007c 00000000 		.word	prvIdleTask
 1909 0080 00000000 		.word	.LANCHOR3
 1910 0084 00000000 		.word	.LANCHOR11
 1911 0088 00000000 		.word	.LANCHOR15
 1912              	.LBE159:
 1913              	.LBE158:
 1914              		.cfi_endproc
 1915              	.LFE19:
 1917              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1918              		.align	1
 1919              		.global	vTaskEndScheduler
 1920              		.syntax unified
 1921              		.thumb
ARM GAS  /tmp/cch6Oc3v.s 			page 130


 1922              		.thumb_func
 1923              		.fpu fpv4-sp-d16
 1925              	vTaskEndScheduler:
 1926              	.LFB20:
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1927              		.loc 1 2016 0
 1928              		.cfi_startproc
 1929              		@ args = 0, pretend = 0, frame = 0
 1930              		@ frame_needed = 0, uses_anonymous_args = 0
 1931 0000 08B5     		push	{r3, lr}
 1932              	.LCFI23:
 1933              		.cfi_def_cfa_offset 8
 1934              		.cfi_offset 3, -8
 1935              		.cfi_offset 14, -4
 1936              	.LBB160:
 1937              	.LBB161:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1938              		.loc 2 195 0
 1939              		.syntax unified
 1940              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1941 0002 4FF05003 			mov r3, #80												
 1942 0006 83F31188 		msr basepri, r3											
 1943 000a BFF36F8F 		isb														
 1944 000e BFF34F8F 		dsb														
 1945              	
 1946              	@ 0 "" 2
 1947              		.thumb
 1948              		.syntax unified
 1949              	.LBE161:
 1950              	.LBE160:
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 1951              		.loc 1 2021 0
 1952 0012 034B     		ldr	r3, .L163
 1953 0014 0022     		movs	r2, #0
 1954 0016 1A60     		str	r2, [r3]
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1955              		.loc 1 2022 0
 1956 0018 FFF7FEFF 		bl	vPortEndScheduler
 1957              	.LVL168:
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 1958              		.loc 1 2023 0
 1959 001c 08BD     		pop	{r3, pc}
 1960              	.L164:
 1961 001e 00BF     		.align	2
 1962              	.L163:
 1963 0020 00000000 		.word	.LANCHOR11
 1964              		.cfi_endproc
 1965              	.LFE20:
 1967              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1968              		.align	1
 1969              		.global	vTaskSuspendAll
 1970              		.syntax unified
 1971              		.thumb
 1972              		.thumb_func
 1973              		.fpu fpv4-sp-d16
 1975              	vTaskSuspendAll:
 1976              	.LFB21:
ARM GAS  /tmp/cch6Oc3v.s 			page 131


2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 1977              		.loc 1 2027 0
 1978              		.cfi_startproc
 1979              		@ args = 0, pretend = 0, frame = 0
 1980              		@ frame_needed = 0, uses_anonymous_args = 0
 1981              		@ link register save eliminated.
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1982              		.loc 1 2032 0
 1983 0000 024A     		ldr	r2, .L166
 1984 0002 1368     		ldr	r3, [r2]
 1985 0004 0133     		adds	r3, r3, #1
 1986 0006 1360     		str	r3, [r2]
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 1987              		.loc 1 2033 0
 1988 0008 7047     		bx	lr
 1989              	.L167:
 1990 000a 00BF     		.align	2
 1991              	.L166:
 1992 000c 00000000 		.word	.LANCHOR16
 1993              		.cfi_endproc
 1994              	.LFE21:
 1996              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1997              		.align	1
 1998              		.global	xTaskGetTickCount
 1999              		.syntax unified
 2000              		.thumb
 2001              		.thumb_func
 2002              		.fpu fpv4-sp-d16
 2004              	xTaskGetTickCount:
 2005              	.LFB23:
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 2006              		.loc 1 2210 0
 2007              		.cfi_startproc
 2008              		@ args = 0, pretend = 0, frame = 0
 2009              		@ frame_needed = 0, uses_anonymous_args = 0
 2010              		@ link register save eliminated.
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2011              		.loc 1 2216 0
 2012 0000 014B     		ldr	r3, .L169
 2013 0002 1868     		ldr	r0, [r3]
 2014              	.LVL169:
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2015              		.loc 1 2221 0
 2016 0004 7047     		bx	lr
 2017              	.L170:
 2018 0006 00BF     		.align	2
 2019              	.L169:
 2020 0008 00000000 		.word	.LANCHOR15
 2021              		.cfi_endproc
 2022              	.LFE23:
 2024              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2025              		.align	1
 2026              		.global	xTaskGetTickCountFromISR
 2027              		.syntax unified
 2028              		.thumb
 2029              		.thumb_func
 2030              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cch6Oc3v.s 			page 132


 2032              	xTaskGetTickCountFromISR:
 2033              	.LFB24:
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 2034              		.loc 1 2225 0
 2035              		.cfi_startproc
 2036              		@ args = 0, pretend = 0, frame = 0
 2037              		@ frame_needed = 0, uses_anonymous_args = 0
 2038 0000 08B5     		push	{r3, lr}
 2039              	.LCFI24:
 2040              		.cfi_def_cfa_offset 8
 2041              		.cfi_offset 3, -8
 2042              		.cfi_offset 14, -4
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2043              		.loc 1 2243 0
 2044 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2045              	.LVL170:
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2046              		.loc 1 2247 0
 2047 0006 014B     		ldr	r3, .L173
 2048 0008 1868     		ldr	r0, [r3]
 2049              	.LVL171:
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2050              		.loc 1 2252 0
 2051 000a 08BD     		pop	{r3, pc}
 2052              	.L174:
 2053              		.align	2
 2054              	.L173:
 2055 000c 00000000 		.word	.LANCHOR15
 2056              		.cfi_endproc
 2057              	.LFE24:
 2059              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2060              		.align	1
 2061              		.global	uxTaskGetNumberOfTasks
 2062              		.syntax unified
 2063              		.thumb
 2064              		.thumb_func
 2065              		.fpu fpv4-sp-d16
 2067              	uxTaskGetNumberOfTasks:
 2068              	.LFB25:
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 2069              		.loc 1 2256 0
 2070              		.cfi_startproc
 2071              		@ args = 0, pretend = 0, frame = 0
 2072              		@ frame_needed = 0, uses_anonymous_args = 0
 2073              		@ link register save eliminated.
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2074              		.loc 1 2259 0
 2075 0000 014B     		ldr	r3, .L176
 2076 0002 1868     		ldr	r0, [r3]
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2077              		.loc 1 2260 0
 2078 0004 7047     		bx	lr
 2079              	.L177:
 2080 0006 00BF     		.align	2
 2081              	.L176:
 2082 0008 00000000 		.word	.LANCHOR4
 2083              		.cfi_endproc
ARM GAS  /tmp/cch6Oc3v.s 			page 133


 2084              	.LFE25:
 2086              		.section	.text.pcTaskGetName,"ax",%progbits
 2087              		.align	1
 2088              		.global	pcTaskGetName
 2089              		.syntax unified
 2090              		.thumb
 2091              		.thumb_func
 2092              		.fpu fpv4-sp-d16
 2094              	pcTaskGetName:
 2095              	.LFB26:
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 2096              		.loc 1 2264 0
 2097              		.cfi_startproc
 2098              		@ args = 0, pretend = 0, frame = 0
 2099              		@ frame_needed = 0, uses_anonymous_args = 0
 2100              		@ link register save eliminated.
 2101              	.LVL172:
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2102              		.loc 1 2269 0
 2103 0000 0346     		mov	r3, r0
 2104 0002 10B1     		cbz	r0, .L181
 2105              	.LVL173:
 2106              	.L179:
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2107              		.loc 1 2272 0
 2108 0004 03F13400 		add	r0, r3, #52
 2109 0008 7047     		bx	lr
 2110              	.LVL174:
 2111              	.L181:
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2112              		.loc 1 2269 0 discriminator 1
 2113 000a 064B     		ldr	r3, .L182
 2114 000c 1B68     		ldr	r3, [r3]
 2115              	.LVL175:
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2116              		.loc 1 2270 0 discriminator 1
 2117 000e 002B     		cmp	r3, #0
 2118 0010 F8D1     		bne	.L179
 2119              	.LBB162:
 2120              	.LBB163:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2121              		.loc 2 195 0
 2122              		.syntax unified
 2123              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2124 0012 4FF05003 			mov r3, #80												
 2125 0016 83F31188 		msr basepri, r3											
 2126 001a BFF36F8F 		isb														
 2127 001e BFF34F8F 		dsb														
 2128              	
 2129              	@ 0 "" 2
 2130              	.LVL176:
 2131              		.thumb
 2132              		.syntax unified
 2133              	.L180:
 2134 0022 FEE7     		b	.L180
 2135              	.L183:
 2136              		.align	2
ARM GAS  /tmp/cch6Oc3v.s 			page 134


 2137              	.L182:
 2138 0024 00000000 		.word	.LANCHOR5
 2139              	.LBE163:
 2140              	.LBE162:
 2141              		.cfi_endproc
 2142              	.LFE26:
 2144              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2145              		.align	1
 2146              		.global	xTaskIncrementTick
 2147              		.syntax unified
 2148              		.thumb
 2149              		.thumb_func
 2150              		.fpu fpv4-sp-d16
 2152              	xTaskIncrementTick:
 2153              	.LFB28:
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 2154              		.loc 1 2584 0
 2155              		.cfi_startproc
 2156              		@ args = 0, pretend = 0, frame = 0
 2157              		@ frame_needed = 0, uses_anonymous_args = 0
 2158 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2159              	.LCFI25:
 2160              		.cfi_def_cfa_offset 32
 2161              		.cfi_offset 4, -32
 2162              		.cfi_offset 5, -28
 2163              		.cfi_offset 6, -24
 2164              		.cfi_offset 7, -20
 2165              		.cfi_offset 8, -16
 2166              		.cfi_offset 9, -12
 2167              		.cfi_offset 10, -8
 2168              		.cfi_offset 14, -4
 2169              	.LVL177:
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2170              		.loc 1 2593 0
 2171 0004 3D4B     		ldr	r3, .L202
 2172 0006 1B68     		ldr	r3, [r3]
 2173 0008 002B     		cmp	r3, #0
 2174 000a 69D1     		bne	.L185
 2175              	.LBB164:
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2176              		.loc 1 2597 0
 2177 000c 3C4B     		ldr	r3, .L202+4
 2178 000e 1D68     		ldr	r5, [r3]
 2179 0010 0135     		adds	r5, r5, #1
 2180              	.LVL178:
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2181              		.loc 1 2601 0
 2182 0012 1D60     		str	r5, [r3]
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2183              		.loc 1 2603 0
 2184 0014 C5B9     		cbnz	r5, .L186
 2185              	.LBB165:
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2186              		.loc 1 2605 0
 2187 0016 3B4B     		ldr	r3, .L202+8
 2188 0018 1B68     		ldr	r3, [r3]
 2189 001a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cch6Oc3v.s 			page 135


 2190 001c 43B1     		cbz	r3, .L187
 2191              	.LBB166:
 2192              	.LBB167:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2193              		.loc 2 195 0
 2194              		.syntax unified
 2195              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2196 001e 4FF05003 			mov r3, #80												
 2197 0022 83F31188 		msr basepri, r3											
 2198 0026 BFF36F8F 		isb														
 2199 002a BFF34F8F 		dsb														
 2200              	
 2201              	@ 0 "" 2
 2202              	.LVL179:
 2203              		.thumb
 2204              		.syntax unified
 2205              	.L188:
 2206 002e FEE7     		b	.L188
 2207              	.L187:
 2208              	.LBE167:
 2209              	.LBE166:
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2210              		.loc 1 2605 0 discriminator 2
 2211 0030 344A     		ldr	r2, .L202+8
 2212 0032 1168     		ldr	r1, [r2]
 2213              	.LVL180:
 2214 0034 344B     		ldr	r3, .L202+12
 2215 0036 1868     		ldr	r0, [r3]
 2216 0038 1060     		str	r0, [r2]
 2217 003a 1960     		str	r1, [r3]
 2218 003c 334A     		ldr	r2, .L202+16
 2219 003e 1368     		ldr	r3, [r2]
 2220 0040 0133     		adds	r3, r3, #1
 2221 0042 1360     		str	r3, [r2]
 2222 0044 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2223              	.LVL181:
 2224              	.L186:
 2225              	.LBE165:
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2226              		.loc 1 2616 0
 2227 0048 314B     		ldr	r3, .L202+20
 2228 004a 1B68     		ldr	r3, [r3]
 2229 004c AB42     		cmp	r3, r5
 2230 004e 0CD9     		bls	.L198
 2231              	.LBE164:
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2232              		.loc 1 2587 0
 2233 0050 0024     		movs	r4, #0
 2234              	.LVL182:
 2235              	.L190:
 2236              	.LBB168:
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2237              		.loc 1 2699 0
 2238 0052 304B     		ldr	r3, .L202+24
 2239 0054 1B68     		ldr	r3, [r3]
 2240 0056 DB6A     		ldr	r3, [r3, #44]
 2241 0058 03EB8303 		add	r3, r3, r3, lsl #2
ARM GAS  /tmp/cch6Oc3v.s 			page 136


 2242 005c 9B00     		lsls	r3, r3, #2
 2243 005e 2E4A     		ldr	r2, .L202+28
 2244 0060 D358     		ldr	r3, [r2, r3]
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2245              		.loc 1 2701 0
 2246 0062 022B     		cmp	r3, #2
 2247 0064 28BF     		it	cs
 2248 0066 0124     		movcs	r4, #1
 2249              	.LVL183:
 2250 0068 3FE0     		b	.L196
 2251              	.LVL184:
 2252              	.L198:
 2253              	.LBE168:
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2254              		.loc 1 2587 0
 2255 006a 0024     		movs	r4, #0
 2256              	.LBB169:
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2257              		.loc 1 2620 0
 2258 006c DFF89480 		ldr	r8, .L202+8
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2259              		.loc 1 2670 0
 2260 0070 2A4F     		ldr	r7, .L202+32
 2261 0072 DFF8A4A0 		ldr	r10, .L202+28
 2262 0076 1AE0     		b	.L189
 2263              	.LVL185:
 2264              	.L200:
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 2265              		.loc 1 2627 0
 2266 0078 254B     		ldr	r3, .L202+20
 2267 007a 4FF0FF32 		mov	r2, #-1
 2268 007e 1A60     		str	r2, [r3]
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2269              		.loc 1 2628 0
 2270 0080 E7E7     		b	.L190
 2271              	.LVL186:
 2272              	.L201:
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
 2273              		.loc 1 2646 0
 2274 0082 234A     		ldr	r2, .L202+20
 2275 0084 1360     		str	r3, [r2]
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2276              		.loc 1 2647 0
 2277 0086 E4E7     		b	.L190
 2278              	.LVL187:
 2279              	.L193:
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2280              		.loc 1 2670 0
 2281 0088 F06A     		ldr	r0, [r6, #44]
 2282 008a 3B68     		ldr	r3, [r7]
 2283 008c 9842     		cmp	r0, r3
 2284 008e 88BF     		it	hi
 2285 0090 3860     		strhi	r0, [r7]
 2286 0092 00EB8000 		add	r0, r0, r0, lsl #2
 2287 0096 4946     		mov	r1, r9
 2288 0098 0AEB8000 		add	r0, r10, r0, lsl #2
 2289 009c FFF7FEFF 		bl	vListInsertEnd
ARM GAS  /tmp/cch6Oc3v.s 			page 137


 2290              	.LVL188:
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 2291              		.loc 1 2680 0
 2292 00a0 1C4B     		ldr	r3, .L202+24
 2293 00a2 1B68     		ldr	r3, [r3]
 2294 00a4 F26A     		ldr	r2, [r6, #44]
 2295 00a6 DB6A     		ldr	r3, [r3, #44]
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 2296              		.loc 1 2682 0
 2297 00a8 9A42     		cmp	r2, r3
 2298 00aa 28BF     		it	cs
 2299 00ac 0124     		movcs	r4, #1
 2300              	.LVL189:
 2301              	.L189:
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2302              		.loc 1 2620 0
 2303 00ae D8F80030 		ldr	r3, [r8]
 2304 00b2 1B68     		ldr	r3, [r3]
 2305 00b4 002B     		cmp	r3, #0
 2306 00b6 DFD0     		beq	.L200
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2307              		.loc 1 2636 0
 2308 00b8 D8F80030 		ldr	r3, [r8]
 2309 00bc DB68     		ldr	r3, [r3, #12]
 2310 00be DE68     		ldr	r6, [r3, #12]
 2311              	.LVL190:
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2312              		.loc 1 2637 0
 2313 00c0 7368     		ldr	r3, [r6, #4]
 2314              	.LVL191:
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2315              		.loc 1 2639 0
 2316 00c2 9D42     		cmp	r5, r3
 2317 00c4 DDD3     		bcc	.L201
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2318              		.loc 1 2655 0
 2319 00c6 06F10409 		add	r9, r6, #4
 2320 00ca 4846     		mov	r0, r9
 2321 00cc FFF7FEFF 		bl	uxListRemove
 2322              	.LVL192:
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2323              		.loc 1 2659 0
 2324 00d0 B36A     		ldr	r3, [r6, #40]
 2325 00d2 002B     		cmp	r3, #0
 2326 00d4 D8D0     		beq	.L193
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2327              		.loc 1 2661 0
 2328 00d6 06F11800 		add	r0, r6, #24
 2329 00da FFF7FEFF 		bl	uxListRemove
 2330              	.LVL193:
 2331 00de D3E7     		b	.L193
 2332              	.LVL194:
 2333              	.L185:
 2334              	.LBE169:
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2335              		.loc 1 2727 0
 2336 00e0 0F4A     		ldr	r2, .L202+36
ARM GAS  /tmp/cch6Oc3v.s 			page 138


 2337 00e2 1368     		ldr	r3, [r2]
 2338 00e4 0133     		adds	r3, r3, #1
 2339 00e6 1360     		str	r3, [r2]
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2340              		.loc 1 2587 0
 2341 00e8 0024     		movs	r4, #0
 2342              	.LVL195:
 2343              	.L196:
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2344              		.loc 1 2740 0
 2345 00ea 0E4B     		ldr	r3, .L202+40
 2346 00ec 1B68     		ldr	r3, [r3]
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2347              		.loc 1 2742 0
 2348 00ee 002B     		cmp	r3, #0
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2349              		.loc 1 2752 0
 2350 00f0 0CBF     		ite	eq
 2351 00f2 2046     		moveq	r0, r4
 2352 00f4 0120     		movne	r0, #1
 2353 00f6 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2354              	.LVL196:
 2355              	.L203:
 2356 00fa 00BF     		.align	2
 2357              	.L202:
 2358 00fc 00000000 		.word	.LANCHOR16
 2359 0100 00000000 		.word	.LANCHOR15
 2360 0104 00000000 		.word	.LANCHOR2
 2361 0108 00000000 		.word	.LANCHOR10
 2362 010c 00000000 		.word	.LANCHOR17
 2363 0110 00000000 		.word	.LANCHOR3
 2364 0114 00000000 		.word	.LANCHOR5
 2365 0118 00000000 		.word	.LANCHOR6
 2366 011c 00000000 		.word	.LANCHOR13
 2367 0120 00000000 		.word	.LANCHOR18
 2368 0124 00000000 		.word	.LANCHOR19
 2369              		.cfi_endproc
 2370              	.LFE28:
 2372              		.section	.text.xTaskResumeAll,"ax",%progbits
 2373              		.align	1
 2374              		.global	xTaskResumeAll
 2375              		.syntax unified
 2376              		.thumb
 2377              		.thumb_func
 2378              		.fpu fpv4-sp-d16
 2380              	xTaskResumeAll:
 2381              	.LFB22:
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2382              		.loc 1 2100 0
 2383              		.cfi_startproc
 2384              		@ args = 0, pretend = 0, frame = 0
 2385              		@ frame_needed = 0, uses_anonymous_args = 0
 2386              	.LVL197:
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2387              		.loc 1 2106 0
 2388 0000 344B     		ldr	r3, .L223
 2389 0002 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cch6Oc3v.s 			page 139


 2390 0004 43B9     		cbnz	r3, .L205
 2391              	.LBB170:
 2392              	.LBB171:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2393              		.loc 2 195 0
 2394              		.syntax unified
 2395              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2396 0006 4FF05003 			mov r3, #80												
 2397 000a 83F31188 		msr basepri, r3											
 2398 000e BFF36F8F 		isb														
 2399 0012 BFF34F8F 		dsb														
 2400              	
 2401              	@ 0 "" 2
 2402              	.LVL198:
 2403              		.thumb
 2404              		.syntax unified
 2405              	.L206:
 2406 0016 FEE7     		b	.L206
 2407              	.L205:
 2408              	.LBE171:
 2409              	.LBE170:
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2410              		.loc 1 2100 0
 2411 0018 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2412              	.LCFI26:
 2413              		.cfi_def_cfa_offset 24
 2414              		.cfi_offset 4, -24
 2415              		.cfi_offset 5, -20
 2416              		.cfi_offset 6, -16
 2417              		.cfi_offset 7, -12
 2418              		.cfi_offset 8, -8
 2419              		.cfi_offset 14, -4
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2420              		.loc 1 2113 0
 2421 001c FFF7FEFF 		bl	vPortEnterCritical
 2422              	.LVL199:
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2423              		.loc 1 2115 0
 2424 0020 2C4B     		ldr	r3, .L223
 2425 0022 1A68     		ldr	r2, [r3]
 2426 0024 013A     		subs	r2, r2, #1
 2427 0026 1A60     		str	r2, [r3]
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2428              		.loc 1 2117 0
 2429 0028 1B68     		ldr	r3, [r3]
 2430 002a 002B     		cmp	r3, #0
 2431 002c 4DD1     		bne	.L216
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2432              		.loc 1 2119 0
 2433 002e 2A4B     		ldr	r3, .L223+4
 2434 0030 1B68     		ldr	r3, [r3]
 2435 0032 2BB9     		cbnz	r3, .L217
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2436              		.loc 1 2102 0
 2437 0034 0024     		movs	r4, #0
 2438              	.LVL200:
 2439              	.L207:
ARM GAS  /tmp/cch6Oc3v.s 			page 140


2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2440              		.loc 1 2203 0
 2441 0036 FFF7FEFF 		bl	vPortExitCritical
 2442              	.LVL201:
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2443              		.loc 1 2206 0
 2444 003a 2046     		mov	r0, r4
 2445 003c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2446              	.LVL202:
 2447              	.L217:
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2448              		.loc 1 2101 0
 2449 0040 0024     		movs	r4, #0
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2450              		.loc 1 2123 0
 2451 0042 264E     		ldr	r6, .L223+8
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2452              		.loc 1 2128 0
 2453 0044 264D     		ldr	r5, .L223+12
 2454 0046 DFF8AC80 		ldr	r8, .L223+32
 2455              	.LVL203:
 2456              	.L208:
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2457              		.loc 1 2123 0
 2458 004a 3368     		ldr	r3, [r6]
 2459 004c FBB1     		cbz	r3, .L222
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2460              		.loc 1 2125 0
 2461 004e F368     		ldr	r3, [r6, #12]
 2462 0050 DC68     		ldr	r4, [r3, #12]
 2463              	.LVL204:
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2464              		.loc 1 2126 0
 2465 0052 04F11800 		add	r0, r4, #24
 2466 0056 FFF7FEFF 		bl	uxListRemove
 2467              	.LVL205:
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2468              		.loc 1 2127 0
 2469 005a 271D     		adds	r7, r4, #4
 2470 005c 3846     		mov	r0, r7
 2471 005e FFF7FEFF 		bl	uxListRemove
 2472              	.LVL206:
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2473              		.loc 1 2128 0
 2474 0062 E06A     		ldr	r0, [r4, #44]
 2475 0064 2B68     		ldr	r3, [r5]
 2476 0066 9842     		cmp	r0, r3
 2477 0068 88BF     		it	hi
 2478 006a 2860     		strhi	r0, [r5]
 2479 006c 00EB8000 		add	r0, r0, r0, lsl #2
 2480 0070 3946     		mov	r1, r7
 2481 0072 08EB8000 		add	r0, r8, r0, lsl #2
 2482 0076 FFF7FEFF 		bl	vListInsertEnd
 2483              	.LVL207:
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2484              		.loc 1 2132 0
 2485 007a 1A4B     		ldr	r3, .L223+16
ARM GAS  /tmp/cch6Oc3v.s 			page 141


 2486 007c 1B68     		ldr	r3, [r3]
 2487 007e E26A     		ldr	r2, [r4, #44]
 2488 0080 DB6A     		ldr	r3, [r3, #44]
 2489 0082 9A42     		cmp	r2, r3
 2490 0084 E1D3     		bcc	.L208
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2491              		.loc 1 2134 0
 2492 0086 184B     		ldr	r3, .L223+20
 2493 0088 0122     		movs	r2, #1
 2494 008a 1A60     		str	r2, [r3]
 2495 008c DDE7     		b	.L208
 2496              	.LVL208:
 2497              	.L222:
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2498              		.loc 1 2142 0
 2499 008e 0CB1     		cbz	r4, .L212
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2500              		.loc 1 2150 0
 2501 0090 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2502              	.LVL209:
 2503              	.L212:
 2504              	.LBB172:
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2505              		.loc 1 2158 0
 2506 0094 154B     		ldr	r3, .L223+24
 2507 0096 1C68     		ldr	r4, [r3]
 2508              	.LVL210:
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2509              		.loc 1 2160 0
 2510 0098 54B1     		cbz	r4, .L213
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2511              		.loc 1 2166 0
 2512 009a 134E     		ldr	r6, .L223+20
 2513 009c 0125     		movs	r5, #1
 2514              	.L215:
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 2515              		.loc 1 2164 0
 2516 009e FFF7FEFF 		bl	xTaskIncrementTick
 2517              	.LVL211:
 2518 00a2 00B1     		cbz	r0, .L214
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2519              		.loc 1 2166 0
 2520 00a4 3560     		str	r5, [r6]
 2521              	.L214:
 2522              	.LVL212:
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2523              		.loc 1 2173 0
 2524 00a6 013C     		subs	r4, r4, #1
 2525              	.LVL213:
 2526 00a8 F9D1     		bne	.L215
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2527              		.loc 1 2175 0
 2528 00aa 104B     		ldr	r3, .L223+24
 2529 00ac 0022     		movs	r2, #0
 2530 00ae 1A60     		str	r2, [r3]
 2531              	.L213:
 2532              	.LBE172:
ARM GAS  /tmp/cch6Oc3v.s 			page 142


2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2533              		.loc 1 2183 0
 2534 00b0 0D4B     		ldr	r3, .L223+20
 2535 00b2 1B68     		ldr	r3, [r3]
 2536 00b4 5BB1     		cbz	r3, .L218
 2537              	.LVL214:
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2538              		.loc 1 2190 0
 2539 00b6 0E4B     		ldr	r3, .L223+28
 2540 00b8 4FF08052 		mov	r2, #268435456
 2541 00bc 1A60     		str	r2, [r3]
 2542              		.syntax unified
 2543              	@ 2190 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2544 00be BFF34F8F 		dsb
 2545              	@ 0 "" 2
 2546              	@ 2190 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2547 00c2 BFF36F8F 		isb
 2548              	@ 0 "" 2
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2549              		.loc 1 2187 0
 2550              		.thumb
 2551              		.syntax unified
 2552 00c6 0124     		movs	r4, #1
 2553              	.LVL215:
 2554 00c8 B5E7     		b	.L207
 2555              	.LVL216:
 2556              	.L216:
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2557              		.loc 1 2102 0
 2558 00ca 0024     		movs	r4, #0
 2559 00cc B3E7     		b	.L207
 2560              	.LVL217:
 2561              	.L218:
 2562 00ce 0024     		movs	r4, #0
 2563              	.LVL218:
 2564 00d0 B1E7     		b	.L207
 2565              	.L224:
 2566 00d2 00BF     		.align	2
 2567              	.L223:
 2568 00d4 00000000 		.word	.LANCHOR16
 2569 00d8 00000000 		.word	.LANCHOR4
 2570 00dc 00000000 		.word	.LANCHOR1
 2571 00e0 00000000 		.word	.LANCHOR13
 2572 00e4 00000000 		.word	.LANCHOR5
 2573 00e8 00000000 		.word	.LANCHOR19
 2574 00ec 00000000 		.word	.LANCHOR18
 2575 00f0 04ED00E0 		.word	-536810236
 2576 00f4 00000000 		.word	.LANCHOR6
 2577              		.cfi_endproc
 2578              	.LFE22:
 2580              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2581              		.align	1
 2582              		.global	vTaskDelayUntil
 2583              		.syntax unified
 2584              		.thumb
 2585              		.thumb_func
 2586              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cch6Oc3v.s 			page 143


 2588              	vTaskDelayUntil:
 2589              	.LFB9:
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
 2590              		.loc 1 1199 0
 2591              		.cfi_startproc
 2592              		@ args = 0, pretend = 0, frame = 0
 2593              		@ frame_needed = 0, uses_anonymous_args = 0
 2594              	.LVL219:
 2595 0000 38B5     		push	{r3, r4, r5, lr}
 2596              	.LCFI27:
 2597              		.cfi_def_cfa_offset 16
 2598              		.cfi_offset 3, -16
 2599              		.cfi_offset 4, -12
 2600              		.cfi_offset 5, -8
 2601              		.cfi_offset 14, -4
 2602              	.LVL220:
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2603              		.loc 1 1203 0
 2604 0002 50B1     		cbz	r0, .L241
 2605 0004 0546     		mov	r5, r0
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2606              		.loc 1 1204 0
 2607 0006 89B9     		cbnz	r1, .L228
 2608              	.LBB173:
 2609              	.LBB174:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2610              		.loc 2 195 0
 2611              		.syntax unified
 2612              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2613 0008 4FF05003 			mov r3, #80												
 2614 000c 83F31188 		msr basepri, r3											
 2615 0010 BFF36F8F 		isb														
 2616 0014 BFF34F8F 		dsb														
 2617              	
 2618              	@ 0 "" 2
 2619              	.LVL221:
 2620              		.thumb
 2621              		.syntax unified
 2622              	.L229:
 2623 0018 FEE7     		b	.L229
 2624              	.L241:
 2625              	.LBE174:
 2626              	.LBE173:
 2627              	.LBB175:
 2628              	.LBB176:
 2629              		.syntax unified
 2630              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2631 001a 4FF05003 			mov r3, #80												
 2632 001e 83F31188 		msr basepri, r3											
 2633 0022 BFF36F8F 		isb														
 2634 0026 BFF34F8F 		dsb														
 2635              	
 2636              	@ 0 "" 2
 2637              	.LVL222:
 2638              		.thumb
 2639              		.syntax unified
 2640              	.L227:
ARM GAS  /tmp/cch6Oc3v.s 			page 144


 2641 002a FEE7     		b	.L227
 2642              	.L228:
 2643              	.LBE176:
 2644              	.LBE175:
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2645              		.loc 1 1205 0
 2646 002c 1A4B     		ldr	r3, .L242
 2647 002e 1B68     		ldr	r3, [r3]
 2648 0030 43B1     		cbz	r3, .L230
 2649              	.LBB177:
 2650              	.LBB178:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2651              		.loc 2 195 0
 2652              		.syntax unified
 2653              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2654 0032 4FF05003 			mov r3, #80												
 2655 0036 83F31188 		msr basepri, r3											
 2656 003a BFF36F8F 		isb														
 2657 003e BFF34F8F 		dsb														
 2658              	
 2659              	@ 0 "" 2
 2660              	.LVL223:
 2661              		.thumb
 2662              		.syntax unified
 2663              	.L231:
 2664 0042 FEE7     		b	.L231
 2665              	.L230:
 2666 0044 0C46     		mov	r4, r1
 2667              	.LBE178:
 2668              	.LBE177:
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2669              		.loc 1 1207 0
 2670 0046 FFF7FEFF 		bl	vTaskSuspendAll
 2671              	.LVL224:
 2672              	.LBB179:
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2673              		.loc 1 1211 0
 2674 004a 144B     		ldr	r3, .L242+4
 2675 004c 1868     		ldr	r0, [r3]
 2676              	.LVL225:
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2677              		.loc 1 1214 0
 2678 004e 2A68     		ldr	r2, [r5]
 2679 0050 1444     		add	r4, r4, r2
 2680              	.LVL226:
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2681              		.loc 1 1216 0
 2682 0052 8242     		cmp	r2, r0
 2683 0054 18D9     		bls	.L232
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2684              		.loc 1 1223 0
 2685 0056 A242     		cmp	r2, r4
 2686 0058 0CD8     		bhi	.L233
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2687              		.loc 1 1248 0
 2688 005a 2C60     		str	r4, [r5]
 2689              	.LVL227:
ARM GAS  /tmp/cch6Oc3v.s 			page 145


 2690              	.L234:
 2691              	.LBE179:
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2692              		.loc 1 1263 0
 2693 005c FFF7FEFF 		bl	xTaskResumeAll
 2694              	.LVL228:
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2695              		.loc 1 1267 0
 2696 0060 38B9     		cbnz	r0, .L225
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2697              		.loc 1 1269 0
 2698 0062 0F4B     		ldr	r3, .L242+8
 2699 0064 4FF08052 		mov	r2, #268435456
 2700 0068 1A60     		str	r2, [r3]
 2701              		.syntax unified
 2702              	@ 1269 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2703 006a BFF34F8F 		dsb
 2704              	@ 0 "" 2
 2705              	@ 1269 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2706 006e BFF36F8F 		isb
 2707              	@ 0 "" 2
 2708              		.thumb
 2709              		.syntax unified
 2710              	.L225:
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2711              		.loc 1 1275 0
 2712 0072 38BD     		pop	{r3, r4, r5, pc}
 2713              	.LVL229:
 2714              	.L233:
 2715              	.LBB180:
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2716              		.loc 1 1223 0 discriminator 1
 2717 0074 A042     		cmp	r0, r4
 2718 0076 01D3     		bcc	.L235
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2719              		.loc 1 1248 0
 2720 0078 2C60     		str	r4, [r5]
 2721 007a EFE7     		b	.L234
 2722              	.L235:
 2723              	.LVL230:
 2724 007c 2C60     		str	r4, [r5]
 2725              	.L236:
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2726              		.loc 1 1256 0
 2727 007e 0021     		movs	r1, #0
 2728 0080 201A     		subs	r0, r4, r0
 2729              	.LVL231:
 2730 0082 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2731              	.LVL232:
 2732 0086 E9E7     		b	.L234
 2733              	.LVL233:
 2734              	.L232:
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2735              		.loc 1 1237 0
 2736 0088 A242     		cmp	r2, r4
 2737 008a 01D8     		bhi	.L237
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/cch6Oc3v.s 			page 146


 2738              		.loc 1 1237 0 is_stmt 0 discriminator 1
 2739 008c A042     		cmp	r0, r4
 2740 008e 01D2     		bcs	.L238
 2741              	.L237:
 2742              	.LVL234:
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2743              		.loc 1 1248 0 is_stmt 1
 2744 0090 2C60     		str	r4, [r5]
 2745 0092 F4E7     		b	.L236
 2746              	.LVL235:
 2747              	.L238:
 2748 0094 2C60     		str	r4, [r5]
 2749 0096 E1E7     		b	.L234
 2750              	.L243:
 2751              		.align	2
 2752              	.L242:
 2753 0098 00000000 		.word	.LANCHOR16
 2754 009c 00000000 		.word	.LANCHOR15
 2755 00a0 04ED00E0 		.word	-536810236
 2756              	.LBE180:
 2757              		.cfi_endproc
 2758              	.LFE9:
 2760              		.section	.text.vTaskDelay,"ax",%progbits
 2761              		.align	1
 2762              		.global	vTaskDelay
 2763              		.syntax unified
 2764              		.thumb
 2765              		.thumb_func
 2766              		.fpu fpv4-sp-d16
 2768              	vTaskDelay:
 2769              	.LFB10:
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2770              		.loc 1 1283 0
 2771              		.cfi_startproc
 2772              		@ args = 0, pretend = 0, frame = 0
 2773              		@ frame_needed = 0, uses_anonymous_args = 0
 2774              	.LVL236:
 2775 0000 10B5     		push	{r4, lr}
 2776              	.LCFI28:
 2777              		.cfi_def_cfa_offset 8
 2778              		.cfi_offset 4, -8
 2779              		.cfi_offset 14, -4
 2780              	.LVL237:
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2781              		.loc 1 1287 0
 2782 0002 A8B1     		cbz	r0, .L245
 2783 0004 0446     		mov	r4, r0
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2784              		.loc 1 1289 0
 2785 0006 0F4B     		ldr	r3, .L250
 2786 0008 1B68     		ldr	r3, [r3]
 2787 000a 43B1     		cbz	r3, .L246
 2788              	.LBB181:
 2789              	.LBB182:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2790              		.loc 2 195 0
 2791              		.syntax unified
ARM GAS  /tmp/cch6Oc3v.s 			page 147


 2792              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2793 000c 4FF05003 			mov r3, #80												
 2794 0010 83F31188 		msr basepri, r3											
 2795 0014 BFF36F8F 		isb														
 2796 0018 BFF34F8F 		dsb														
 2797              	
 2798              	@ 0 "" 2
 2799              	.LVL238:
 2800              		.thumb
 2801              		.syntax unified
 2802              	.L247:
 2803 001c FEE7     		b	.L247
 2804              	.L246:
 2805              	.LBE182:
 2806              	.LBE181:
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2807              		.loc 1 1290 0
 2808 001e FFF7FEFF 		bl	vTaskSuspendAll
 2809              	.LVL239:
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2810              		.loc 1 1301 0
 2811 0022 0021     		movs	r1, #0
 2812 0024 2046     		mov	r0, r4
 2813 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2814              	.LVL240:
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2815              		.loc 1 1303 0
 2816 002a FFF7FEFF 		bl	xTaskResumeAll
 2817              	.LVL241:
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2818              		.loc 1 1312 0
 2819 002e 38B9     		cbnz	r0, .L244
 2820              	.LVL242:
 2821              	.L245:
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2822              		.loc 1 1314 0
 2823 0030 054B     		ldr	r3, .L250+4
 2824 0032 4FF08052 		mov	r2, #268435456
 2825 0036 1A60     		str	r2, [r3]
 2826              		.syntax unified
 2827              	@ 1314 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2828 0038 BFF34F8F 		dsb
 2829              	@ 0 "" 2
 2830              	@ 1314 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2831 003c BFF36F8F 		isb
 2832              	@ 0 "" 2
 2833              		.thumb
 2834              		.syntax unified
 2835              	.L244:
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2836              		.loc 1 1320 0
 2837 0040 10BD     		pop	{r4, pc}
 2838              	.L251:
 2839 0042 00BF     		.align	2
 2840              	.L250:
 2841 0044 00000000 		.word	.LANCHOR16
 2842 0048 04ED00E0 		.word	-536810236
ARM GAS  /tmp/cch6Oc3v.s 			page 148


 2843              		.cfi_endproc
 2844              	.LFE10:
 2846              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2847              		.align	1
 2848              		.global	vTaskSwitchContext
 2849              		.syntax unified
 2850              		.thumb
 2851              		.thumb_func
 2852              		.fpu fpv4-sp-d16
 2854              	vTaskSwitchContext:
 2855              	.LFB29:
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2856              		.loc 1 2846 0
 2857              		.cfi_startproc
 2858              		@ args = 0, pretend = 0, frame = 0
 2859              		@ frame_needed = 0, uses_anonymous_args = 0
 2860              		@ link register save eliminated.
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2861              		.loc 1 2847 0
 2862 0000 234B     		ldr	r3, .L266
 2863 0002 1B68     		ldr	r3, [r3]
 2864 0004 1BB1     		cbz	r3, .L253
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2865              		.loc 1 2851 0
 2866 0006 234B     		ldr	r3, .L266+4
 2867 0008 0122     		movs	r2, #1
 2868 000a 1A60     		str	r2, [r3]
 2869 000c 7047     		bx	lr
 2870              	.L253:
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2871              		.loc 1 2855 0
 2872 000e 214B     		ldr	r3, .L266+4
 2873 0010 0022     		movs	r2, #0
 2874 0012 1A60     		str	r2, [r3]
 2875              	.LBB183:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2876              		.loc 1 2890 0
 2877 0014 204B     		ldr	r3, .L266+8
 2878 0016 1B68     		ldr	r3, [r3]
 2879              	.LVL243:
 2880 0018 03EB8302 		add	r2, r3, r3, lsl #2
 2881 001c 9200     		lsls	r2, r2, #2
 2882 001e 1F49     		ldr	r1, .L266+12
 2883 0020 8A58     		ldr	r2, [r1, r2]
 2884 0022 92B9     		cbnz	r2, .L255
 2885 0024 43B1     		cbz	r3, .L256
 2886 0026 0A46     		mov	r2, r1
 2887              	.L257:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2888              		.loc 1 2890 0 is_stmt 0 discriminator 3
 2889 0028 013B     		subs	r3, r3, #1
 2890              	.LVL244:
 2891 002a 03EB8301 		add	r1, r3, r3, lsl #2
 2892 002e 52F82110 		ldr	r1, [r2, r1, lsl #2]
 2893 0032 51B9     		cbnz	r1, .L255
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2894              		.loc 1 2890 0 discriminator 5
ARM GAS  /tmp/cch6Oc3v.s 			page 149


 2895 0034 002B     		cmp	r3, #0
 2896 0036 F7D1     		bne	.L257
 2897              	.L256:
 2898              	.LBB184:
 2899              	.LBB185:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2900              		.loc 2 195 0 is_stmt 1
 2901              		.syntax unified
 2902              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2903 0038 4FF05003 			mov r3, #80												
 2904 003c 83F31188 		msr basepri, r3											
 2905 0040 BFF36F8F 		isb														
 2906 0044 BFF34F8F 		dsb														
 2907              	
 2908              	@ 0 "" 2
 2909              	.LVL245:
 2910              		.thumb
 2911              		.syntax unified
 2912              	.L258:
 2913 0048 FEE7     		b	.L258
 2914              	.LVL246:
 2915              	.L255:
 2916              	.LBE185:
 2917              	.LBE184:
 2918              	.LBE183:
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2919              		.loc 1 2846 0 discriminator 6
 2920 004a 10B4     		push	{r4}
 2921              	.LCFI29:
 2922              		.cfi_def_cfa_offset 4
 2923              		.cfi_offset 4, -4
 2924              	.LVL247:
 2925              	.LBB188:
 2926              	.LBB186:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2927              		.loc 1 2890 0 discriminator 6
 2928 004c 134A     		ldr	r2, .L266+12
 2929 004e 9900     		lsls	r1, r3, #2
 2930 0050 C818     		adds	r0, r1, r3
 2931 0052 02EB8000 		add	r0, r2, r0, lsl #2
 2932 0056 4468     		ldr	r4, [r0, #4]
 2933 0058 6468     		ldr	r4, [r4, #4]
 2934 005a 4460     		str	r4, [r0, #4]
 2935 005c 0246     		mov	r2, r0
 2936 005e 0832     		adds	r2, r2, #8
 2937 0060 9442     		cmp	r4, r2
 2938 0062 0DD0     		beq	.L265
 2939              	.L260:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2940              		.loc 1 2890 0 is_stmt 0 discriminator 9
 2941 0064 03EB8301 		add	r1, r3, r3, lsl #2
 2942 0068 0C4A     		ldr	r2, .L266+12
 2943 006a 02EB8102 		add	r2, r2, r1, lsl #2
 2944 006e 5268     		ldr	r2, [r2, #4]
 2945 0070 D168     		ldr	r1, [r2, #12]
 2946 0072 0B4A     		ldr	r2, .L266+16
 2947 0074 1160     		str	r1, [r2]
ARM GAS  /tmp/cch6Oc3v.s 			page 150


 2948              	.LBE186:
 2949 0076 084A     		ldr	r2, .L266+8
 2950 0078 1360     		str	r3, [r2]
 2951              	.LBE188:
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2952              		.loc 1 2901 0 is_stmt 1 discriminator 9
 2953 007a 5DF8044B 		ldr	r4, [sp], #4
 2954              	.LCFI30:
 2955              		.cfi_remember_state
 2956              		.cfi_restore 4
 2957              		.cfi_def_cfa_offset 0
 2958 007e 7047     		bx	lr
 2959              	.L265:
 2960              	.LCFI31:
 2961              		.cfi_restore_state
 2962              	.LBB189:
 2963              	.LBB187:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2964              		.loc 1 2890 0 discriminator 7
 2965 0080 6168     		ldr	r1, [r4, #4]
 2966 0082 0648     		ldr	r0, .L266+12
 2967 0084 1422     		movs	r2, #20
 2968 0086 02FB0302 		mla	r2, r2, r3, r0
 2969 008a 5160     		str	r1, [r2, #4]
 2970 008c EAE7     		b	.L260
 2971              	.L267:
 2972 008e 00BF     		.align	2
 2973              	.L266:
 2974 0090 00000000 		.word	.LANCHOR16
 2975 0094 00000000 		.word	.LANCHOR19
 2976 0098 00000000 		.word	.LANCHOR13
 2977 009c 00000000 		.word	.LANCHOR6
 2978 00a0 00000000 		.word	.LANCHOR5
 2979              	.LBE187:
 2980              	.LBE189:
 2981              		.cfi_endproc
 2982              	.LFE29:
 2984              		.section	.text.vTaskSuspend,"ax",%progbits
 2985              		.align	1
 2986              		.global	vTaskSuspend
 2987              		.syntax unified
 2988              		.thumb
 2989              		.thumb_func
 2990              		.fpu fpv4-sp-d16
 2992              	vTaskSuspend:
 2993              	.LFB15:
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 2994              		.loc 1 1625 0
 2995              		.cfi_startproc
 2996              		@ args = 0, pretend = 0, frame = 0
 2997              		@ frame_needed = 0, uses_anonymous_args = 0
 2998              	.LVL248:
 2999 0000 38B5     		push	{r3, r4, r5, lr}
 3000              	.LCFI32:
 3001              		.cfi_def_cfa_offset 16
 3002              		.cfi_offset 3, -16
 3003              		.cfi_offset 4, -12
ARM GAS  /tmp/cch6Oc3v.s 			page 151


 3004              		.cfi_offset 5, -8
 3005              		.cfi_offset 14, -4
 3006 0002 0446     		mov	r4, r0
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3007              		.loc 1 1628 0
 3008 0004 FFF7FEFF 		bl	vPortEnterCritical
 3009              	.LVL249:
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3010              		.loc 1 1632 0
 3011 0008 FCB1     		cbz	r4, .L279
 3012              	.LVL250:
 3013              	.L269:
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3014              		.loc 1 1638 0 discriminator 4
 3015 000a 251D     		adds	r5, r4, #4
 3016 000c 2846     		mov	r0, r5
 3017 000e FFF7FEFF 		bl	uxListRemove
 3018              	.LVL251:
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3019              		.loc 1 1648 0 discriminator 4
 3020 0012 A36A     		ldr	r3, [r4, #40]
 3021 0014 1BB1     		cbz	r3, .L270
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3022              		.loc 1 1650 0
 3023 0016 04F11800 		add	r0, r4, #24
 3024 001a FFF7FEFF 		bl	uxListRemove
 3025              	.LVL252:
 3026              	.L270:
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3027              		.loc 1 1657 0
 3028 001e 2946     		mov	r1, r5
 3029 0020 2148     		ldr	r0, .L282
 3030 0022 FFF7FEFF 		bl	vListInsertEnd
 3031              	.LVL253:
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3032              		.loc 1 1661 0
 3033 0026 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 3034 002a DBB2     		uxtb	r3, r3
 3035 002c 012B     		cmp	r3, #1
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3036              		.loc 1 1665 0
 3037 002e 04BF     		itt	eq
 3038 0030 0023     		moveq	r3, #0
 3039 0032 84F85830 		strbeq	r3, [r4, #88]
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3040              		.loc 1 1670 0
 3041 0036 FFF7FEFF 		bl	vPortExitCritical
 3042              	.LVL254:
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3043              		.loc 1 1672 0
 3044 003a 1C4B     		ldr	r3, .L282+4
 3045 003c 1B68     		ldr	r3, [r3]
 3046 003e 3BB9     		cbnz	r3, .L280
 3047              	.L272:
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3048              		.loc 1 1687 0
 3049 0040 1B4B     		ldr	r3, .L282+8
ARM GAS  /tmp/cch6Oc3v.s 			page 152


 3050 0042 1B68     		ldr	r3, [r3]
 3051 0044 A342     		cmp	r3, r4
 3052 0046 0AD0     		beq	.L281
 3053              	.L268:
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3054              		.loc 1 1718 0
 3055 0048 38BD     		pop	{r3, r4, r5, pc}
 3056              	.LVL255:
 3057              	.L279:
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3058              		.loc 1 1632 0 discriminator 1
 3059 004a 194B     		ldr	r3, .L282+8
 3060 004c 1C68     		ldr	r4, [r3]
 3061              	.LVL256:
 3062 004e DCE7     		b	.L269
 3063              	.LVL257:
 3064              	.L280:
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3065              		.loc 1 1676 0
 3066 0050 FFF7FEFF 		bl	vPortEnterCritical
 3067              	.LVL258:
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3068              		.loc 1 1678 0
 3069 0054 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3070              	.LVL259:
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3071              		.loc 1 1680 0
 3072 0058 FFF7FEFF 		bl	vPortExitCritical
 3073              	.LVL260:
 3074 005c F0E7     		b	.L272
 3075              	.L281:
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3076              		.loc 1 1689 0
 3077 005e 134B     		ldr	r3, .L282+4
 3078 0060 1B68     		ldr	r3, [r3]
 3079 0062 A3B1     		cbz	r3, .L274
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3080              		.loc 1 1692 0
 3081 0064 134B     		ldr	r3, .L282+12
 3082 0066 1B68     		ldr	r3, [r3]
 3083 0068 43B1     		cbz	r3, .L275
 3084              	.LBB190:
 3085              	.LBB191:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3086              		.loc 2 195 0
 3087              		.syntax unified
 3088              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3089 006a 4FF05003 			mov r3, #80												
 3090 006e 83F31188 		msr basepri, r3											
 3091 0072 BFF36F8F 		isb														
 3092 0076 BFF34F8F 		dsb														
 3093              	
 3094              	@ 0 "" 2
 3095              	.LVL261:
 3096              		.thumb
 3097              		.syntax unified
 3098              	.L276:
ARM GAS  /tmp/cch6Oc3v.s 			page 153


 3099 007a FEE7     		b	.L276
 3100              	.L275:
 3101              	.LBE191:
 3102              	.LBE190:
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3103              		.loc 1 1693 0
 3104 007c 0E4B     		ldr	r3, .L282+16
 3105 007e 4FF08052 		mov	r2, #268435456
 3106 0082 1A60     		str	r2, [r3]
 3107              		.syntax unified
 3108              	@ 1693 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3109 0084 BFF34F8F 		dsb
 3110              	@ 0 "" 2
 3111              	@ 1693 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3112 0088 BFF36F8F 		isb
 3113              	@ 0 "" 2
 3114              		.thumb
 3115              		.syntax unified
 3116 008c DCE7     		b	.L268
 3117              	.L274:
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3118              		.loc 1 1700 0
 3119 008e 064B     		ldr	r3, .L282
 3120 0090 1A68     		ldr	r2, [r3]
 3121 0092 0A4B     		ldr	r3, .L282+20
 3122 0094 1B68     		ldr	r3, [r3]
 3123 0096 9A42     		cmp	r2, r3
 3124 0098 03D1     		bne	.L277
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3125              		.loc 1 1706 0
 3126 009a 054B     		ldr	r3, .L282+8
 3127 009c 0022     		movs	r2, #0
 3128 009e 1A60     		str	r2, [r3]
 3129 00a0 D2E7     		b	.L268
 3130              	.L277:
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3131              		.loc 1 1710 0
 3132 00a2 FFF7FEFF 		bl	vTaskSwitchContext
 3133              	.LVL262:
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3134              		.loc 1 1718 0
 3135 00a6 CFE7     		b	.L268
 3136              	.L283:
 3137              		.align	2
 3138              	.L282:
 3139 00a8 00000000 		.word	.LANCHOR0
 3140 00ac 00000000 		.word	.LANCHOR11
 3141 00b0 00000000 		.word	.LANCHOR5
 3142 00b4 00000000 		.word	.LANCHOR16
 3143 00b8 04ED00E0 		.word	-536810236
 3144 00bc 00000000 		.word	.LANCHOR4
 3145              		.cfi_endproc
 3146              	.LFE15:
 3148              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3149              		.align	1
 3150              		.global	vTaskPlaceOnEventList
 3151              		.syntax unified
ARM GAS  /tmp/cch6Oc3v.s 			page 154


 3152              		.thumb
 3153              		.thumb_func
 3154              		.fpu fpv4-sp-d16
 3156              	vTaskPlaceOnEventList:
 3157              	.LFB30:
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3158              		.loc 1 2905 0
 3159              		.cfi_startproc
 3160              		@ args = 0, pretend = 0, frame = 0
 3161              		@ frame_needed = 0, uses_anonymous_args = 0
 3162              	.LVL263:
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3163              		.loc 1 2906 0
 3164 0000 40B9     		cbnz	r0, .L285
 3165              	.LBB192:
 3166              	.LBB193:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3167              		.loc 2 195 0
 3168              		.syntax unified
 3169              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3170 0002 4FF05003 			mov r3, #80												
 3171 0006 83F31188 		msr basepri, r3											
 3172 000a BFF36F8F 		isb														
 3173 000e BFF34F8F 		dsb														
 3174              	
 3175              	@ 0 "" 2
 3176              	.LVL264:
 3177              		.thumb
 3178              		.syntax unified
 3179              	.L286:
 3180 0012 FEE7     		b	.L286
 3181              	.L285:
 3182              	.LBE193:
 3183              	.LBE192:
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3184              		.loc 1 2905 0
 3185 0014 10B5     		push	{r4, lr}
 3186              	.LCFI33:
 3187              		.cfi_def_cfa_offset 8
 3188              		.cfi_offset 4, -8
 3189              		.cfi_offset 14, -4
 3190 0016 0C46     		mov	r4, r1
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3191              		.loc 1 2915 0
 3192 0018 044B     		ldr	r3, .L289
 3193 001a 1968     		ldr	r1, [r3]
 3194              	.LVL265:
 3195 001c 1831     		adds	r1, r1, #24
 3196 001e FFF7FEFF 		bl	vListInsert
 3197              	.LVL266:
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3198              		.loc 1 2917 0
 3199 0022 0121     		movs	r1, #1
 3200 0024 2046     		mov	r0, r4
 3201 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3202              	.LVL267:
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/cch6Oc3v.s 			page 155


 3203              		.loc 1 2918 0
 3204 002a 10BD     		pop	{r4, pc}
 3205              	.LVL268:
 3206              	.L290:
 3207              		.align	2
 3208              	.L289:
 3209 002c 00000000 		.word	.LANCHOR5
 3210              		.cfi_endproc
 3211              	.LFE30:
 3213              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3214              		.align	1
 3215              		.global	vTaskPlaceOnUnorderedEventList
 3216              		.syntax unified
 3217              		.thumb
 3218              		.thumb_func
 3219              		.fpu fpv4-sp-d16
 3221              	vTaskPlaceOnUnorderedEventList:
 3222              	.LFB31:
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3223              		.loc 1 2922 0
 3224              		.cfi_startproc
 3225              		@ args = 0, pretend = 0, frame = 0
 3226              		@ frame_needed = 0, uses_anonymous_args = 0
 3227              	.LVL269:
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3228              		.loc 1 2923 0
 3229 0000 40B9     		cbnz	r0, .L292
 3230              	.LBB194:
 3231              	.LBB195:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3232              		.loc 2 195 0
 3233              		.syntax unified
 3234              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3235 0002 4FF05003 			mov r3, #80												
 3236 0006 83F31188 		msr basepri, r3											
 3237 000a BFF36F8F 		isb														
 3238 000e BFF34F8F 		dsb														
 3239              	
 3240              	@ 0 "" 2
 3241              	.LVL270:
 3242              		.thumb
 3243              		.syntax unified
 3244              	.L293:
 3245 0012 FEE7     		b	.L293
 3246              	.L292:
 3247 0014 0346     		mov	r3, r0
 3248              	.LBE195:
 3249              	.LBE194:
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3250              		.loc 1 2927 0
 3251 0016 0F48     		ldr	r0, .L298
 3252              	.LVL271:
 3253 0018 0068     		ldr	r0, [r0]
 3254 001a 40B9     		cbnz	r0, .L294
 3255              	.LBB196:
 3256              	.LBB197:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  /tmp/cch6Oc3v.s 			page 156


 3257              		.loc 2 195 0
 3258              		.syntax unified
 3259              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3260 001c 4FF05003 			mov r3, #80												
 3261 0020 83F31188 		msr basepri, r3											
 3262 0024 BFF36F8F 		isb														
 3263 0028 BFF34F8F 		dsb														
 3264              	
 3265              	@ 0 "" 2
 3266              	.LVL272:
 3267              		.thumb
 3268              		.syntax unified
 3269              	.L295:
 3270 002c FEE7     		b	.L295
 3271              	.LVL273:
 3272              	.L294:
 3273              	.LBE197:
 3274              	.LBE196:
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3275              		.loc 1 2922 0
 3276 002e 10B5     		push	{r4, lr}
 3277              	.LCFI34:
 3278              		.cfi_def_cfa_offset 8
 3279              		.cfi_offset 4, -8
 3280              		.cfi_offset 14, -4
 3281 0030 1846     		mov	r0, r3
 3282 0032 1446     		mov	r4, r2
 3283 0034 0B46     		mov	r3, r1
 3284              	.LVL274:
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3285              		.loc 1 2932 0
 3286 0036 084A     		ldr	r2, .L298+4
 3287              	.LVL275:
 3288 0038 1168     		ldr	r1, [r2]
 3289              	.LVL276:
 3290 003a 43F00043 		orr	r3, r3, #-2147483648
 3291              	.LVL277:
 3292 003e 8B61     		str	r3, [r1, #24]
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3293              		.loc 1 2939 0
 3294 0040 1168     		ldr	r1, [r2]
 3295 0042 1831     		adds	r1, r1, #24
 3296 0044 FFF7FEFF 		bl	vListInsertEnd
 3297              	.LVL278:
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3298              		.loc 1 2941 0
 3299 0048 0121     		movs	r1, #1
 3300 004a 2046     		mov	r0, r4
 3301 004c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3302              	.LVL279:
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3303              		.loc 1 2942 0
 3304 0050 10BD     		pop	{r4, pc}
 3305              	.LVL280:
 3306              	.L299:
 3307 0052 00BF     		.align	2
 3308              	.L298:
ARM GAS  /tmp/cch6Oc3v.s 			page 157


 3309 0054 00000000 		.word	.LANCHOR16
 3310 0058 00000000 		.word	.LANCHOR5
 3311              		.cfi_endproc
 3312              	.LFE31:
 3314              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 3315              		.align	1
 3316              		.global	vTaskPlaceOnEventListRestricted
 3317              		.syntax unified
 3318              		.thumb
 3319              		.thumb_func
 3320              		.fpu fpv4-sp-d16
 3322              	vTaskPlaceOnEventListRestricted:
 3323              	.LFB32:
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 3324              		.loc 1 2948 0
 3325              		.cfi_startproc
 3326              		@ args = 0, pretend = 0, frame = 0
 3327              		@ frame_needed = 0, uses_anonymous_args = 0
 3328              	.LVL281:
 3329 0000 38B5     		push	{r3, r4, r5, lr}
 3330              	.LCFI35:
 3331              		.cfi_def_cfa_offset 16
 3332              		.cfi_offset 3, -16
 3333              		.cfi_offset 4, -12
 3334              		.cfi_offset 5, -8
 3335              		.cfi_offset 14, -4
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3336              		.loc 1 2949 0
 3337 0002 40B9     		cbnz	r0, .L301
 3338              	.LBB198:
 3339              	.LBB199:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3340              		.loc 2 195 0
 3341              		.syntax unified
 3342              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3343 0004 4FF05003 			mov r3, #80												
 3344 0008 83F31188 		msr basepri, r3											
 3345 000c BFF36F8F 		isb														
 3346 0010 BFF34F8F 		dsb														
 3347              	
 3348              	@ 0 "" 2
 3349              	.LVL282:
 3350              		.thumb
 3351              		.syntax unified
 3352              	.L302:
 3353 0014 FEE7     		b	.L302
 3354              	.L301:
 3355 0016 1446     		mov	r4, r2
 3356 0018 0D46     		mov	r5, r1
 3357              	.LBE199:
 3358              	.LBE198:
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3359              		.loc 1 2961 0
 3360 001a 074B     		ldr	r3, .L305
 3361 001c 1968     		ldr	r1, [r3]
 3362              	.LVL283:
 3363 001e 1831     		adds	r1, r1, #24
ARM GAS  /tmp/cch6Oc3v.s 			page 158


 3364 0020 FFF7FEFF 		bl	vListInsertEnd
 3365              	.LVL284:
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3366              		.loc 1 2968 0
 3367 0024 002C     		cmp	r4, #0
 3368              	.LVL285:
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3369              		.loc 1 2972 0
 3370 0026 2146     		mov	r1, r4
 3371 0028 0CBF     		ite	eq
 3372 002a 2846     		moveq	r0, r5
 3373 002c 4FF0FF30 		movne	r0, #-1
 3374 0030 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3375              	.LVL286:
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3376              		.loc 1 2973 0
 3377 0034 38BD     		pop	{r3, r4, r5, pc}
 3378              	.LVL287:
 3379              	.L306:
 3380 0036 00BF     		.align	2
 3381              	.L305:
 3382 0038 00000000 		.word	.LANCHOR5
 3383              		.cfi_endproc
 3384              	.LFE32:
 3386              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3387              		.align	1
 3388              		.global	xTaskRemoveFromEventList
 3389              		.syntax unified
 3390              		.thumb
 3391              		.thumb_func
 3392              		.fpu fpv4-sp-d16
 3394              	xTaskRemoveFromEventList:
 3395              	.LFB33:
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3396              		.loc 1 2979 0
 3397              		.cfi_startproc
 3398              		@ args = 0, pretend = 0, frame = 0
 3399              		@ frame_needed = 0, uses_anonymous_args = 0
 3400              	.LVL288:
 3401 0000 38B5     		push	{r3, r4, r5, lr}
 3402              	.LCFI36:
 3403              		.cfi_def_cfa_offset 16
 3404              		.cfi_offset 3, -16
 3405              		.cfi_offset 4, -12
 3406              		.cfi_offset 5, -8
 3407              		.cfi_offset 14, -4
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3408              		.loc 1 2996 0
 3409 0002 C368     		ldr	r3, [r0, #12]
 3410 0004 DC68     		ldr	r4, [r3, #12]
 3411              	.LVL289:
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3412              		.loc 1 2997 0
 3413 0006 44B9     		cbnz	r4, .L308
 3414              	.LBB200:
 3415              	.LBB201:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  /tmp/cch6Oc3v.s 			page 159


 3416              		.loc 2 195 0
 3417              		.syntax unified
 3418              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3419 0008 4FF05003 			mov r3, #80												
 3420 000c 83F31188 		msr basepri, r3											
 3421 0010 BFF36F8F 		isb														
 3422 0014 BFF34F8F 		dsb														
 3423              	
 3424              	@ 0 "" 2
 3425              	.LVL290:
 3426              		.thumb
 3427              		.syntax unified
 3428              	.L309:
 3429 0018 FEE7     		b	.L309
 3430              	.L308:
 3431              	.LBE201:
 3432              	.LBE200:
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3433              		.loc 1 2998 0
 3434 001a 04F11805 		add	r5, r4, #24
 3435 001e 2846     		mov	r0, r5
 3436              	.LVL291:
 3437 0020 FFF7FEFF 		bl	uxListRemove
 3438              	.LVL292:
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3439              		.loc 1 3000 0
 3440 0024 124B     		ldr	r3, .L316
 3441 0026 1B68     		ldr	r3, [r3]
 3442 0028 EBB9     		cbnz	r3, .L310
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3443              		.loc 1 3002 0
 3444 002a 251D     		adds	r5, r4, #4
 3445 002c 2846     		mov	r0, r5
 3446 002e FFF7FEFF 		bl	uxListRemove
 3447              	.LVL293:
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3448              		.loc 1 3003 0
 3449 0032 E06A     		ldr	r0, [r4, #44]
 3450 0034 0F4B     		ldr	r3, .L316+4
 3451 0036 1B68     		ldr	r3, [r3]
 3452 0038 9842     		cmp	r0, r3
 3453 003a 84BF     		itt	hi
 3454 003c 0D4B     		ldrhi	r3, .L316+4
 3455 003e 1860     		strhi	r0, [r3]
 3456 0040 00EB8000 		add	r0, r0, r0, lsl #2
 3457 0044 2946     		mov	r1, r5
 3458 0046 0C4B     		ldr	r3, .L316+8
 3459 0048 03EB8000 		add	r0, r3, r0, lsl #2
 3460 004c FFF7FEFF 		bl	vListInsertEnd
 3461              	.LVL294:
 3462              	.L312:
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3463              		.loc 1 3012 0
 3464 0050 0A4B     		ldr	r3, .L316+12
 3465 0052 1B68     		ldr	r3, [r3]
 3466 0054 E26A     		ldr	r2, [r4, #44]
 3467 0056 DB6A     		ldr	r3, [r3, #44]
ARM GAS  /tmp/cch6Oc3v.s 			page 160


 3468 0058 9A42     		cmp	r2, r3
 3469              	.LVL295:
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3470              		.loc 1 3021 0
 3471 005a 83BF     		ittte	hi
 3472 005c 0120     		movhi	r0, #1
 3473 005e 084B     		ldrhi	r3, .L316+16
 3474 0060 1860     		strhi	r0, [r3]
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3475              		.loc 1 3025 0
 3476 0062 0020     		movls	r0, #0
 3477              	.LVL296:
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3478              		.loc 1 3043 0
 3479 0064 38BD     		pop	{r3, r4, r5, pc}
 3480              	.LVL297:
 3481              	.L310:
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3482              		.loc 1 3009 0
 3483 0066 2946     		mov	r1, r5
 3484 0068 0648     		ldr	r0, .L316+20
 3485 006a FFF7FEFF 		bl	vListInsertEnd
 3486              	.LVL298:
 3487 006e EFE7     		b	.L312
 3488              	.L317:
 3489              		.align	2
 3490              	.L316:
 3491 0070 00000000 		.word	.LANCHOR16
 3492 0074 00000000 		.word	.LANCHOR13
 3493 0078 00000000 		.word	.LANCHOR6
 3494 007c 00000000 		.word	.LANCHOR5
 3495 0080 00000000 		.word	.LANCHOR19
 3496 0084 00000000 		.word	.LANCHOR1
 3497              		.cfi_endproc
 3498              	.LFE33:
 3500              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3501              		.align	1
 3502              		.global	vTaskRemoveFromUnorderedEventList
 3503              		.syntax unified
 3504              		.thumb
 3505              		.thumb_func
 3506              		.fpu fpv4-sp-d16
 3508              	vTaskRemoveFromUnorderedEventList:
 3509              	.LFB34:
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3510              		.loc 1 3047 0
 3511              		.cfi_startproc
 3512              		@ args = 0, pretend = 0, frame = 0
 3513              		@ frame_needed = 0, uses_anonymous_args = 0
 3514              	.LVL299:
 3515 0000 38B5     		push	{r3, r4, r5, lr}
 3516              	.LCFI37:
 3517              		.cfi_def_cfa_offset 16
 3518              		.cfi_offset 3, -16
 3519              		.cfi_offset 4, -12
 3520              		.cfi_offset 5, -8
 3521              		.cfi_offset 14, -4
ARM GAS  /tmp/cch6Oc3v.s 			page 161


3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3522              		.loc 1 3052 0
 3523 0002 1C4B     		ldr	r3, .L327
 3524 0004 1B68     		ldr	r3, [r3]
 3525 0006 43B9     		cbnz	r3, .L319
 3526              	.LBB202:
 3527              	.LBB203:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3528              		.loc 2 195 0
 3529              		.syntax unified
 3530              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3531 0008 4FF05003 			mov r3, #80												
 3532 000c 83F31188 		msr basepri, r3											
 3533 0010 BFF36F8F 		isb														
 3534 0014 BFF34F8F 		dsb														
 3535              	
 3536              	@ 0 "" 2
 3537              	.LVL300:
 3538              		.thumb
 3539              		.syntax unified
 3540              	.L320:
 3541 0018 FEE7     		b	.L320
 3542              	.L319:
 3543              	.LBE203:
 3544              	.LBE202:
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3545              		.loc 1 3055 0
 3546 001a 41F00041 		orr	r1, r1, #-2147483648
 3547              	.LVL301:
 3548 001e 0160     		str	r1, [r0]
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3549              		.loc 1 3059 0
 3550 0020 C468     		ldr	r4, [r0, #12]
 3551              	.LVL302:
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3552              		.loc 1 3060 0
 3553 0022 F4B1     		cbz	r4, .L326
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3554              		.loc 1 3061 0
 3555 0024 FFF7FEFF 		bl	uxListRemove
 3556              	.LVL303:
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3557              		.loc 1 3066 0
 3558 0028 251D     		adds	r5, r4, #4
 3559 002a 2846     		mov	r0, r5
 3560 002c FFF7FEFF 		bl	uxListRemove
 3561              	.LVL304:
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3562              		.loc 1 3067 0
 3563 0030 E06A     		ldr	r0, [r4, #44]
 3564 0032 114B     		ldr	r3, .L327+4
 3565 0034 1B68     		ldr	r3, [r3]
 3566 0036 9842     		cmp	r0, r3
 3567 0038 84BF     		itt	hi
 3568 003a 0F4B     		ldrhi	r3, .L327+4
 3569 003c 1860     		strhi	r0, [r3]
 3570 003e 00EB8000 		add	r0, r0, r0, lsl #2
ARM GAS  /tmp/cch6Oc3v.s 			page 162


 3571 0042 2946     		mov	r1, r5
 3572 0044 0D4B     		ldr	r3, .L327+8
 3573 0046 03EB8000 		add	r0, r3, r0, lsl #2
 3574 004a FFF7FEFF 		bl	vListInsertEnd
 3575              	.LVL305:
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3576              		.loc 1 3069 0
 3577 004e 0C4B     		ldr	r3, .L327+12
 3578 0050 1B68     		ldr	r3, [r3]
 3579 0052 E26A     		ldr	r2, [r4, #44]
 3580 0054 DB6A     		ldr	r3, [r3, #44]
 3581 0056 9A42     		cmp	r2, r3
 3582 0058 02D9     		bls	.L318
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3583              		.loc 1 3075 0
 3584 005a 0A4B     		ldr	r3, .L327+16
 3585 005c 0122     		movs	r2, #1
 3586 005e 1A60     		str	r2, [r3]
 3587              	.L318:
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3588              		.loc 1 3077 0
 3589 0060 38BD     		pop	{r3, r4, r5, pc}
 3590              	.LVL306:
 3591              	.L326:
 3592              	.LBB204:
 3593              	.LBB205:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3594              		.loc 2 195 0
 3595              		.syntax unified
 3596              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3597 0062 4FF05003 			mov r3, #80												
 3598 0066 83F31188 		msr basepri, r3											
 3599 006a BFF36F8F 		isb														
 3600 006e BFF34F8F 		dsb														
 3601              	
 3602              	@ 0 "" 2
 3603              	.LVL307:
 3604              		.thumb
 3605              		.syntax unified
 3606              	.L322:
 3607 0072 FEE7     		b	.L322
 3608              	.L328:
 3609              		.align	2
 3610              	.L327:
 3611 0074 00000000 		.word	.LANCHOR16
 3612 0078 00000000 		.word	.LANCHOR13
 3613 007c 00000000 		.word	.LANCHOR6
 3614 0080 00000000 		.word	.LANCHOR5
 3615 0084 00000000 		.word	.LANCHOR19
 3616              	.LBE205:
 3617              	.LBE204:
 3618              		.cfi_endproc
 3619              	.LFE34:
 3621              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3622              		.align	1
 3623              		.global	vTaskSetTimeOutState
 3624              		.syntax unified
ARM GAS  /tmp/cch6Oc3v.s 			page 163


 3625              		.thumb
 3626              		.thumb_func
 3627              		.fpu fpv4-sp-d16
 3629              	vTaskSetTimeOutState:
 3630              	.LFB35:
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3631              		.loc 1 3081 0
 3632              		.cfi_startproc
 3633              		@ args = 0, pretend = 0, frame = 0
 3634              		@ frame_needed = 0, uses_anonymous_args = 0
 3635              	.LVL308:
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3636              		.loc 1 3082 0
 3637 0000 40B9     		cbnz	r0, .L330
 3638              	.LBB206:
 3639              	.LBB207:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3640              		.loc 2 195 0
 3641              		.syntax unified
 3642              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3643 0002 4FF05003 			mov r3, #80												
 3644 0006 83F31188 		msr basepri, r3											
 3645 000a BFF36F8F 		isb														
 3646 000e BFF34F8F 		dsb														
 3647              	
 3648              	@ 0 "" 2
 3649              	.LVL309:
 3650              		.thumb
 3651              		.syntax unified
 3652              	.L331:
 3653 0012 FEE7     		b	.L331
 3654              	.L330:
 3655              	.LBE207:
 3656              	.LBE206:
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3657              		.loc 1 3081 0
 3658 0014 10B5     		push	{r4, lr}
 3659              	.LCFI38:
 3660              		.cfi_def_cfa_offset 8
 3661              		.cfi_offset 4, -8
 3662              		.cfi_offset 14, -4
 3663 0016 0446     		mov	r4, r0
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3664              		.loc 1 3083 0
 3665 0018 FFF7FEFF 		bl	vPortEnterCritical
 3666              	.LVL310:
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3667              		.loc 1 3085 0
 3668 001c 044B     		ldr	r3, .L334
 3669 001e 1B68     		ldr	r3, [r3]
 3670 0020 2360     		str	r3, [r4]
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3671              		.loc 1 3086 0
 3672 0022 044B     		ldr	r3, .L334+4
 3673 0024 1B68     		ldr	r3, [r3]
 3674 0026 6360     		str	r3, [r4, #4]
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  /tmp/cch6Oc3v.s 			page 164


 3675              		.loc 1 3088 0
 3676 0028 FFF7FEFF 		bl	vPortExitCritical
 3677              	.LVL311:
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3678              		.loc 1 3089 0
 3679 002c 10BD     		pop	{r4, pc}
 3680              	.LVL312:
 3681              	.L335:
 3682 002e 00BF     		.align	2
 3683              	.L334:
 3684 0030 00000000 		.word	.LANCHOR17
 3685 0034 00000000 		.word	.LANCHOR15
 3686              		.cfi_endproc
 3687              	.LFE35:
 3689              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3690              		.align	1
 3691              		.global	vTaskInternalSetTimeOutState
 3692              		.syntax unified
 3693              		.thumb
 3694              		.thumb_func
 3695              		.fpu fpv4-sp-d16
 3697              	vTaskInternalSetTimeOutState:
 3698              	.LFB36:
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 3699              		.loc 1 3093 0
 3700              		.cfi_startproc
 3701              		@ args = 0, pretend = 0, frame = 0
 3702              		@ frame_needed = 0, uses_anonymous_args = 0
 3703              		@ link register save eliminated.
 3704              	.LVL313:
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3705              		.loc 1 3095 0
 3706 0000 034B     		ldr	r3, .L337
 3707 0002 1B68     		ldr	r3, [r3]
 3708 0004 0360     		str	r3, [r0]
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3709              		.loc 1 3096 0
 3710 0006 034B     		ldr	r3, .L337+4
 3711 0008 1B68     		ldr	r3, [r3]
 3712 000a 4360     		str	r3, [r0, #4]
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3713              		.loc 1 3097 0
 3714 000c 7047     		bx	lr
 3715              	.L338:
 3716 000e 00BF     		.align	2
 3717              	.L337:
 3718 0010 00000000 		.word	.LANCHOR17
 3719 0014 00000000 		.word	.LANCHOR15
 3720              		.cfi_endproc
 3721              	.LFE36:
 3723              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3724              		.align	1
 3725              		.global	xTaskCheckForTimeOut
 3726              		.syntax unified
 3727              		.thumb
 3728              		.thumb_func
 3729              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cch6Oc3v.s 			page 165


 3731              	xTaskCheckForTimeOut:
 3732              	.LFB37:
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 3733              		.loc 1 3101 0
 3734              		.cfi_startproc
 3735              		@ args = 0, pretend = 0, frame = 0
 3736              		@ frame_needed = 0, uses_anonymous_args = 0
 3737              	.LVL314:
 3738 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3739              	.LCFI39:
 3740              		.cfi_def_cfa_offset 24
 3741              		.cfi_offset 3, -24
 3742              		.cfi_offset 4, -20
 3743              		.cfi_offset 5, -16
 3744              		.cfi_offset 6, -12
 3745              		.cfi_offset 7, -8
 3746              		.cfi_offset 14, -4
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3747              		.loc 1 3104 0
 3748 0002 50B1     		cbz	r0, .L350
 3749 0004 0546     		mov	r5, r0
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3750              		.loc 1 3105 0
 3751 0006 89B9     		cbnz	r1, .L342
 3752              	.LBB208:
 3753              	.LBB209:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3754              		.loc 2 195 0
 3755              		.syntax unified
 3756              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3757 0008 4FF05003 			mov r3, #80												
 3758 000c 83F31188 		msr basepri, r3											
 3759 0010 BFF36F8F 		isb														
 3760 0014 BFF34F8F 		dsb														
 3761              	
 3762              	@ 0 "" 2
 3763              	.LVL315:
 3764              		.thumb
 3765              		.syntax unified
 3766              	.L343:
 3767 0018 FEE7     		b	.L343
 3768              	.L350:
 3769              	.LBE209:
 3770              	.LBE208:
 3771              	.LBB210:
 3772              	.LBB211:
 3773              		.syntax unified
 3774              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3775 001a 4FF05003 			mov r3, #80												
 3776 001e 83F31188 		msr basepri, r3											
 3777 0022 BFF36F8F 		isb														
 3778 0026 BFF34F8F 		dsb														
 3779              	
 3780              	@ 0 "" 2
 3781              	.LVL316:
 3782              		.thumb
 3783              		.syntax unified
ARM GAS  /tmp/cch6Oc3v.s 			page 166


 3784              	.L341:
 3785 002a FEE7     		b	.L341
 3786              	.L342:
 3787 002c 0C46     		mov	r4, r1
 3788              	.LBE211:
 3789              	.LBE210:
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3790              		.loc 1 3107 0
 3791 002e FFF7FEFF 		bl	vPortEnterCritical
 3792              	.LVL317:
 3793              	.LBB212:
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3794              		.loc 1 3110 0
 3795 0032 114B     		ldr	r3, .L352
 3796 0034 1968     		ldr	r1, [r3]
 3797              	.LVL318:
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3798              		.loc 1 3111 0
 3799 0036 6868     		ldr	r0, [r5, #4]
 3800 0038 0A1A     		subs	r2, r1, r0
 3801              	.LVL319:
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3802              		.loc 1 3125 0
 3803 003a 2368     		ldr	r3, [r4]
 3804 003c B3F1FF3F 		cmp	r3, #-1
 3805 0040 16D0     		beq	.L347
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3806              		.loc 1 3135 0
 3807 0042 0E4E     		ldr	r6, .L352+4
 3808 0044 3668     		ldr	r6, [r6]
 3809 0046 2F68     		ldr	r7, [r5]
 3810 0048 B742     		cmp	r7, r6
 3811 004a 01D0     		beq	.L345
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3812              		.loc 1 3135 0 is_stmt 0 discriminator 1
 3813 004c 8842     		cmp	r0, r1
 3814 004e 11D9     		bls	.L348
 3815              	.L345:
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3816              		.loc 1 3144 0 is_stmt 1
 3817 0050 9342     		cmp	r3, r2
 3818 0052 03D8     		bhi	.L351
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 3819              		.loc 1 3153 0
 3820 0054 0023     		movs	r3, #0
 3821 0056 2360     		str	r3, [r4]
 3822              	.LVL320:
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3823              		.loc 1 3154 0
 3824 0058 0124     		movs	r4, #1
 3825              	.LVL321:
 3826 005a 05E0     		b	.L344
 3827              	.LVL322:
 3828              	.L351:
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3829              		.loc 1 3147 0
 3830 005c 9B1A     		subs	r3, r3, r2
ARM GAS  /tmp/cch6Oc3v.s 			page 167


 3831 005e 2360     		str	r3, [r4]
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 3832              		.loc 1 3148 0
 3833 0060 2846     		mov	r0, r5
 3834 0062 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 3835              	.LVL323:
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3836              		.loc 1 3149 0
 3837 0066 0024     		movs	r4, #0
 3838              	.LVL324:
 3839              	.L344:
 3840              	.LBE212:
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3841              		.loc 1 3157 0
 3842 0068 FFF7FEFF 		bl	vPortExitCritical
 3843              	.LVL325:
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3844              		.loc 1 3160 0
 3845 006c 2046     		mov	r0, r4
 3846 006e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3847              	.LVL326:
 3848              	.L347:
 3849              	.LBB213:
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3850              		.loc 1 3130 0
 3851 0070 0024     		movs	r4, #0
 3852              	.LVL327:
 3853 0072 F9E7     		b	.L344
 3854              	.LVL328:
 3855              	.L348:
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3856              		.loc 1 3142 0
 3857 0074 0124     		movs	r4, #1
 3858              	.LVL329:
 3859 0076 F7E7     		b	.L344
 3860              	.L353:
 3861              		.align	2
 3862              	.L352:
 3863 0078 00000000 		.word	.LANCHOR15
 3864 007c 00000000 		.word	.LANCHOR17
 3865              	.LBE213:
 3866              		.cfi_endproc
 3867              	.LFE37:
 3869              		.section	.text.vTaskMissedYield,"ax",%progbits
 3870              		.align	1
 3871              		.global	vTaskMissedYield
 3872              		.syntax unified
 3873              		.thumb
 3874              		.thumb_func
 3875              		.fpu fpv4-sp-d16
 3877              	vTaskMissedYield:
 3878              	.LFB38:
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 3879              		.loc 1 3164 0
 3880              		.cfi_startproc
 3881              		@ args = 0, pretend = 0, frame = 0
 3882              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cch6Oc3v.s 			page 168


 3883              		@ link register save eliminated.
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3884              		.loc 1 3165 0
 3885 0000 014B     		ldr	r3, .L355
 3886 0002 0122     		movs	r2, #1
 3887 0004 1A60     		str	r2, [r3]
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3888              		.loc 1 3166 0
 3889 0006 7047     		bx	lr
 3890              	.L356:
 3891              		.align	2
 3892              	.L355:
 3893 0008 00000000 		.word	.LANCHOR19
 3894              		.cfi_endproc
 3895              	.LFE38:
 3897              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 3898              		.align	1
 3899              		.global	uxTaskGetTaskNumber
 3900              		.syntax unified
 3901              		.thumb
 3902              		.thumb_func
 3903              		.fpu fpv4-sp-d16
 3905              	uxTaskGetTaskNumber:
 3906              	.LFB39:
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
 3907              		.loc 1 3172 0
 3908              		.cfi_startproc
 3909              		@ args = 0, pretend = 0, frame = 0
 3910              		@ frame_needed = 0, uses_anonymous_args = 0
 3911              		@ link register save eliminated.
 3912              	.LVL330:
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3913              		.loc 1 3176 0
 3914 0000 08B1     		cbz	r0, .L359
 3915              	.LVL331:
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3916              		.loc 1 3179 0
 3917 0002 806C     		ldr	r0, [r0, #72]
 3918              	.LVL332:
 3919 0004 7047     		bx	lr
 3920              	.LVL333:
 3921              	.L359:
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3922              		.loc 1 3183 0
 3923 0006 0020     		movs	r0, #0
 3924              	.LVL334:
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3925              		.loc 1 3187 0
 3926 0008 7047     		bx	lr
 3927              		.cfi_endproc
 3928              	.LFE39:
 3930              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 3931              		.align	1
 3932              		.global	vTaskSetTaskNumber
 3933              		.syntax unified
 3934              		.thumb
 3935              		.thumb_func
ARM GAS  /tmp/cch6Oc3v.s 			page 169


 3936              		.fpu fpv4-sp-d16
 3938              	vTaskSetTaskNumber:
 3939              	.LFB40:
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 3940              		.loc 1 3195 0
 3941              		.cfi_startproc
 3942              		@ args = 0, pretend = 0, frame = 0
 3943              		@ frame_needed = 0, uses_anonymous_args = 0
 3944              		@ link register save eliminated.
 3945              	.LVL335:
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3946              		.loc 1 3198 0
 3947 0000 00B1     		cbz	r0, .L360
 3948              	.LVL336:
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3949              		.loc 1 3201 0
 3950 0002 8164     		str	r1, [r0, #72]
 3951              	.LVL337:
 3952              	.L360:
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3953              		.loc 1 3203 0
 3954 0004 7047     		bx	lr
 3955              		.cfi_endproc
 3956              	.LFE40:
 3958              		.section	.text.vTaskGetInfo,"ax",%progbits
 3959              		.align	1
 3960              		.global	vTaskGetInfo
 3961              		.syntax unified
 3962              		.thumb
 3963              		.thumb_func
 3964              		.fpu fpv4-sp-d16
 3966              	vTaskGetInfo:
 3967              	.LFB44:
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 3968              		.loc 1 3494 0
 3969              		.cfi_startproc
 3970              		@ args = 0, pretend = 0, frame = 0
 3971              		@ frame_needed = 0, uses_anonymous_args = 0
 3972              	.LVL338:
 3973 0000 70B5     		push	{r4, r5, r6, lr}
 3974              	.LCFI40:
 3975              		.cfi_def_cfa_offset 16
 3976              		.cfi_offset 4, -16
 3977              		.cfi_offset 5, -12
 3978              		.cfi_offset 6, -8
 3979              		.cfi_offset 14, -4
 3980 0002 0C46     		mov	r4, r1
 3981 0004 1646     		mov	r6, r2
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3982              		.loc 1 3498 0
 3983 0006 0546     		mov	r5, r0
 3984 0008 D0B1     		cbz	r0, .L375
 3985              	.LVL339:
 3986              	.L363:
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 3987              		.loc 1 3500 0 discriminator 4
 3988 000a 2560     		str	r5, [r4]
ARM GAS  /tmp/cch6Oc3v.s 			page 170


3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 3989              		.loc 1 3501 0 discriminator 4
 3990 000c 05F13402 		add	r2, r5, #52
 3991 0010 6260     		str	r2, [r4, #4]
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 3992              		.loc 1 3502 0 discriminator 4
 3993 0012 EA6A     		ldr	r2, [r5, #44]
 3994 0014 2261     		str	r2, [r4, #16]
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 3995              		.loc 1 3503 0 discriminator 4
 3996 0016 2A6B     		ldr	r2, [r5, #48]
 3997 0018 E261     		str	r2, [r4, #28]
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3998              		.loc 1 3504 0 discriminator 4
 3999 001a 6A6C     		ldr	r2, [r5, #68]
 4000 001c A260     		str	r2, [r4, #8]
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4001              		.loc 1 3508 0 discriminator 4
 4002 001e EA6C     		ldr	r2, [r5, #76]
 4003 0020 6261     		str	r2, [r4, #20]
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4004              		.loc 1 3522 0 discriminator 4
 4005 0022 0022     		movs	r2, #0
 4006 0024 A261     		str	r2, [r4, #24]
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4007              		.loc 1 3529 0 discriminator 4
 4008 0026 052B     		cmp	r3, #5
 4009 0028 19D0     		beq	.L364
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4010              		.loc 1 3531 0
 4011 002a 174A     		ldr	r2, .L379
 4012 002c 1268     		ldr	r2, [r2]
 4013 002e AA42     		cmp	r2, r5
 4014 0030 09D0     		beq	.L376
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4015              		.loc 1 3537 0
 4016 0032 2373     		strb	r3, [r4, #12]
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4017              		.loc 1 3544 0
 4018 0034 032B     		cmp	r3, #3
 4019 0036 09D0     		beq	.L377
 4020              	.LVL340:
 4021              	.L366:
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4022              		.loc 1 3566 0
 4023 0038 B6B9     		cbnz	r6, .L378
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4024              		.loc 1 3580 0
 4025 003a 0023     		movs	r3, #0
 4026 003c 2384     		strh	r3, [r4, #32]	@ movhi
 4027              	.L362:
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4028              		.loc 1 3582 0
 4029 003e 70BD     		pop	{r4, r5, r6, pc}
 4030              	.LVL341:
 4031              	.L375:
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cch6Oc3v.s 			page 171


 4032              		.loc 1 3498 0 discriminator 1
 4033 0040 114A     		ldr	r2, .L379
 4034              	.LVL342:
 4035 0042 1568     		ldr	r5, [r2]
 4036              	.LVL343:
 4037 0044 E1E7     		b	.L363
 4038              	.LVL344:
 4039              	.L376:
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4040              		.loc 1 3533 0
 4041 0046 0023     		movs	r3, #0
 4042              	.LVL345:
 4043 0048 2373     		strb	r3, [r4, #12]
 4044 004a F5E7     		b	.L366
 4045              	.LVL346:
 4046              	.L377:
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 4047              		.loc 1 3546 0
 4048 004c FFF7FEFF 		bl	vTaskSuspendAll
 4049              	.LVL347:
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 4050              		.loc 1 3548 0
 4051 0050 AB6A     		ldr	r3, [r5, #40]
 4052 0052 0BB1     		cbz	r3, .L367
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 4053              		.loc 1 3550 0
 4054 0054 0223     		movs	r3, #2
 4055 0056 2373     		strb	r3, [r4, #12]
 4056              	.L367:
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4057              		.loc 1 3553 0
 4058 0058 FFF7FEFF 		bl	xTaskResumeAll
 4059              	.LVL348:
 4060 005c ECE7     		b	.L366
 4061              	.LVL349:
 4062              	.L364:
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4063              		.loc 1 3561 0
 4064 005e 2846     		mov	r0, r5
 4065 0060 FFF7FEFF 		bl	eTaskGetState
 4066              	.LVL350:
 4067 0064 2073     		strb	r0, [r4, #12]
 4068 0066 E7E7     		b	.L366
 4069              	.L378:
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4070              		.loc 1 3574 0
 4071 0068 286B     		ldr	r0, [r5, #48]
 4072              	.LVL351:
 4073              	.LBB216:
 4074              	.LBB217:
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4075              		.loc 1 3626 0
 4076 006a 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 4077 006c A52B     		cmp	r3, #165
 4078 006e 08D1     		bne	.L372
 4079 0070 431C     		adds	r3, r0, #1
 4080              	.LVL352:
ARM GAS  /tmp/cch6Oc3v.s 			page 172


 4081              	.L370:
 4082 0072 191A     		subs	r1, r3, r0
 4083              	.LVL353:
 4084 0074 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 4085              	.LVL354:
 4086 0078 A52A     		cmp	r2, #165
 4087 007a FAD0     		beq	.L370
 4088              	.LVL355:
 4089              	.L369:
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4090              		.loc 1 3632 0
 4091 007c 8908     		lsrs	r1, r1, #2
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4092              		.loc 1 3634 0
 4093 007e 2184     		strh	r1, [r4, #32]	@ movhi
 4094              	.LBE217:
 4095              	.LBE216:
 4096 0080 DDE7     		b	.L362
 4097              	.LVL356:
 4098              	.L372:
 4099              	.LBB219:
 4100              	.LBB218:
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4101              		.loc 1 3624 0
 4102 0082 0021     		movs	r1, #0
 4103 0084 FAE7     		b	.L369
 4104              	.L380:
 4105 0086 00BF     		.align	2
 4106              	.L379:
 4107 0088 00000000 		.word	.LANCHOR5
 4108              	.LBE218:
 4109              	.LBE219:
 4110              		.cfi_endproc
 4111              	.LFE44:
 4113              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 4114              		.align	1
 4115              		.syntax unified
 4116              		.thumb
 4117              		.thumb_func
 4118              		.fpu fpv4-sp-d16
 4120              	prvListTasksWithinSingleList:
 4121              	.LFB45:
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
 4122              		.loc 1 3590 0
 4123              		.cfi_startproc
 4124              		@ args = 0, pretend = 0, frame = 0
 4125              		@ frame_needed = 0, uses_anonymous_args = 0
 4126              	.LVL357:
 4127 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4128              	.LCFI41:
 4129              		.cfi_def_cfa_offset 40
 4130              		.cfi_offset 3, -40
 4131              		.cfi_offset 4, -36
 4132              		.cfi_offset 5, -32
 4133              		.cfi_offset 6, -28
 4134              		.cfi_offset 7, -24
 4135              		.cfi_offset 8, -20
ARM GAS  /tmp/cch6Oc3v.s 			page 173


 4136              		.cfi_offset 9, -16
 4137              		.cfi_offset 10, -12
 4138              		.cfi_offset 11, -8
 4139              		.cfi_offset 14, -4
 4140              	.LVL358:
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4141              		.loc 1 3594 0
 4142 0004 0B68     		ldr	r3, [r1]
 4143 0006 3BB3     		cbz	r3, .L386
 4144              	.LVL359:
 4145              	.LBB220:
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4146              		.loc 1 3596 0
 4147 0008 4B68     		ldr	r3, [r1, #4]
 4148 000a 5B68     		ldr	r3, [r3, #4]
 4149 000c 4B60     		str	r3, [r1, #4]
 4150 000e 01F10809 		add	r9, r1, #8
 4151 0012 4B45     		cmp	r3, r9
 4152 0014 04BF     		itt	eq
 4153 0016 CB68     		ldreq	r3, [r1, #12]
 4154 0018 4B60     		streq	r3, [r1, #4]
 4155 001a 9046     		mov	r8, r2
 4156 001c 0C46     		mov	r4, r1
 4157 001e 4B68     		ldr	r3, [r1, #4]
 4158 0020 D3F80CB0 		ldr	fp, [r3, #12]
 4159              	.LVL360:
 4160 0024 0546     		mov	r5, r0
 4161              	.LBE220:
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4162              		.loc 1 3592 0
 4163 0026 0027     		movs	r7, #0
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
 4164              		.loc 1 3605 0
 4165 0028 4FF0010A 		mov	r10, #1
 4166              	.LVL361:
 4167              	.L385:
 4168              	.LBB221:
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4169              		.loc 1 3604 0
 4170 002c 6368     		ldr	r3, [r4, #4]
 4171 002e 5B68     		ldr	r3, [r3, #4]
 4172 0030 6360     		str	r3, [r4, #4]
 4173 0032 9945     		cmp	r9, r3
 4174 0034 04BF     		itt	eq
 4175 0036 E368     		ldreq	r3, [r4, #12]
 4176 0038 6360     		streq	r3, [r4, #4]
 4177 003a 6368     		ldr	r3, [r4, #4]
 4178 003c DE68     		ldr	r6, [r3, #12]
 4179              	.LVL362:
 4180              	.LBE221:
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
 4181              		.loc 1 3605 0
 4182 003e 4346     		mov	r3, r8
 4183 0040 5246     		mov	r2, r10
 4184 0042 2946     		mov	r1, r5
 4185 0044 3046     		mov	r0, r6
 4186 0046 FFF7FEFF 		bl	vTaskGetInfo
ARM GAS  /tmp/cch6Oc3v.s 			page 174


 4187              	.LVL363:
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 4188              		.loc 1 3606 0
 4189 004a 0137     		adds	r7, r7, #1
 4190              	.LVL364:
 4191 004c 2435     		adds	r5, r5, #36
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4192              		.loc 1 3607 0
 4193 004e B345     		cmp	fp, r6
 4194 0050 ECD1     		bne	.L385
 4195              	.LVL365:
 4196              	.L381:
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4197              		.loc 1 3615 0
 4198 0052 3846     		mov	r0, r7
 4199 0054 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4200              	.LVL366:
 4201              	.L386:
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4202              		.loc 1 3592 0
 4203 0058 0027     		movs	r7, #0
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4204              		.loc 1 3614 0
 4205 005a FAE7     		b	.L381
 4206              		.cfi_endproc
 4207              	.LFE45:
 4209              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 4210              		.align	1
 4211              		.global	uxTaskGetSystemState
 4212              		.syntax unified
 4213              		.thumb
 4214              		.thumb_func
 4215              		.fpu fpv4-sp-d16
 4217              	uxTaskGetSystemState:
 4218              	.LFB27:
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 4219              		.loc 1 2404 0
 4220              		.cfi_startproc
 4221              		@ args = 0, pretend = 0, frame = 0
 4222              		@ frame_needed = 0, uses_anonymous_args = 0
 4223              	.LVL367:
 4224 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 4225              	.LCFI42:
 4226              		.cfi_def_cfa_offset 32
 4227              		.cfi_offset 3, -32
 4228              		.cfi_offset 4, -28
 4229              		.cfi_offset 5, -24
 4230              		.cfi_offset 6, -20
 4231              		.cfi_offset 7, -16
 4232              		.cfi_offset 8, -12
 4233              		.cfi_offset 9, -8
 4234              		.cfi_offset 14, -4
 4235 0004 0746     		mov	r7, r0
 4236 0006 0C46     		mov	r4, r1
 4237 0008 1646     		mov	r6, r2
 4238              	.LVL368:
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/cch6Oc3v.s 			page 175


 4239              		.loc 1 2407 0
 4240 000a FFF7FEFF 		bl	vTaskSuspendAll
 4241              	.LVL369:
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4242              		.loc 1 2410 0
 4243 000e 244B     		ldr	r3, .L395
 4244 0010 1B68     		ldr	r3, [r3]
 4245 0012 A342     		cmp	r3, r4
 4246 0014 3DD8     		bhi	.L392
 4247 0016 234B     		ldr	r3, .L395+4
 4248 0018 03F24C45 		addw	r5, r3, #1100
 4249 001c A3F11408 		sub	r8, r3, #20
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4250              		.loc 1 2405 0
 4251 0020 0024     		movs	r4, #0
 4252              	.LVL370:
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4253              		.loc 1 2417 0
 4254 0022 4FF00109 		mov	r9, #1
 4255              	.LVL371:
 4256              	.L391:
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4257              		.loc 1 2417 0 is_stmt 0 discriminator 1
 4258 0026 04EBC400 		add	r0, r4, r4, lsl #3
 4259 002a 4A46     		mov	r2, r9
 4260 002c 2946     		mov	r1, r5
 4261 002e 07EB8000 		add	r0, r7, r0, lsl #2
 4262 0032 FFF7FEFF 		bl	prvListTasksWithinSingleList
 4263              	.LVL372:
 4264 0036 0444     		add	r4, r4, r0
 4265              	.LVL373:
 4266 0038 143D     		subs	r5, r5, #20
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4267              		.loc 1 2419 0 is_stmt 1 discriminator 1
 4268 003a 4545     		cmp	r5, r8
 4269 003c F3D1     		bne	.L391
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 4270              		.loc 1 2423 0
 4271 003e 1A4B     		ldr	r3, .L395+8
 4272 0040 1968     		ldr	r1, [r3]
 4273 0042 04EBC400 		add	r0, r4, r4, lsl #3
 4274 0046 0222     		movs	r2, #2
 4275 0048 07EB8000 		add	r0, r7, r0, lsl #2
 4276 004c FFF7FEFF 		bl	prvListTasksWithinSingleList
 4277              	.LVL374:
 4278 0050 0444     		add	r4, r4, r0
 4279              	.LVL375:
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4280              		.loc 1 2424 0
 4281 0052 164B     		ldr	r3, .L395+12
 4282 0054 1968     		ldr	r1, [r3]
 4283 0056 04EBC400 		add	r0, r4, r4, lsl #3
 4284 005a 0222     		movs	r2, #2
 4285 005c 07EB8000 		add	r0, r7, r0, lsl #2
 4286 0060 FFF7FEFF 		bl	prvListTasksWithinSingleList
 4287              	.LVL376:
 4288 0064 0444     		add	r4, r4, r0
ARM GAS  /tmp/cch6Oc3v.s 			page 176


 4289              	.LVL377:
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4290              		.loc 1 2430 0
 4291 0066 04EBC400 		add	r0, r4, r4, lsl #3
 4292 006a 0422     		movs	r2, #4
 4293 006c 1049     		ldr	r1, .L395+16
 4294 006e 07EB8000 		add	r0, r7, r0, lsl #2
 4295 0072 FFF7FEFF 		bl	prvListTasksWithinSingleList
 4296              	.LVL378:
 4297 0076 0444     		add	r4, r4, r0
 4298              	.LVL379:
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4299              		.loc 1 2438 0
 4300 0078 04EBC400 		add	r0, r4, r4, lsl #3
 4301 007c 0322     		movs	r2, #3
 4302 007e 0D49     		ldr	r1, .L395+20
 4303 0080 07EB8000 		add	r0, r7, r0, lsl #2
 4304 0084 FFF7FEFF 		bl	prvListTasksWithinSingleList
 4305              	.LVL380:
 4306 0088 0444     		add	r4, r4, r0
 4307              	.LVL381:
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4308              		.loc 1 2455 0
 4309 008a 1EB1     		cbz	r6, .L390
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4310              		.loc 1 2457 0
 4311 008c 0023     		movs	r3, #0
 4312 008e 3360     		str	r3, [r6]
 4313 0090 00E0     		b	.L390
 4314              	.LVL382:
 4315              	.L392:
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4316              		.loc 1 2405 0
 4317 0092 0024     		movs	r4, #0
 4318              	.LVL383:
 4319              	.L390:
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4320              		.loc 1 2467 0
 4321 0094 FFF7FEFF 		bl	xTaskResumeAll
 4322              	.LVL384:
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4323              		.loc 1 2470 0
 4324 0098 2046     		mov	r0, r4
 4325 009a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 4326              	.LVL385:
 4327              	.L396:
 4328 009e 00BF     		.align	2
 4329              	.L395:
 4330 00a0 00000000 		.word	.LANCHOR4
 4331 00a4 00000000 		.word	.LANCHOR6
 4332 00a8 00000000 		.word	.LANCHOR2
 4333 00ac 00000000 		.word	.LANCHOR10
 4334 00b0 00000000 		.word	.LANCHOR9
 4335 00b4 00000000 		.word	.LANCHOR0
 4336              		.cfi_endproc
 4337              	.LFE27:
 4339              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
ARM GAS  /tmp/cch6Oc3v.s 			page 177


 4340              		.align	1
 4341              		.global	uxTaskGetStackHighWaterMark
 4342              		.syntax unified
 4343              		.thumb
 4344              		.thumb_func
 4345              		.fpu fpv4-sp-d16
 4347              	uxTaskGetStackHighWaterMark:
 4348              	.LFB47:
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4349              		.loc 1 3643 0
 4350              		.cfi_startproc
 4351              		@ args = 0, pretend = 0, frame = 0
 4352              		@ frame_needed = 0, uses_anonymous_args = 0
 4353              		@ link register save eliminated.
 4354              	.LVL386:
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4355              		.loc 1 3648 0
 4356 0000 0346     		mov	r3, r0
 4357 0002 60B1     		cbz	r0, .L403
 4358              	.LVL387:
 4359              	.L398:
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4360              		.loc 1 3652 0 discriminator 4
 4361 0004 196B     		ldr	r1, [r3, #48]
 4362              	.LVL388:
 4363              	.LBB224:
 4364              	.LBB225:
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4365              		.loc 1 3626 0 discriminator 4
 4366 0006 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 4367              	.LVL389:
 4368 0008 A52B     		cmp	r3, #165
 4369 000a 0BD1     		bne	.L401
 4370 000c 4B1C     		adds	r3, r1, #1
 4371              	.LVL390:
 4372              	.L400:
 4373 000e 581A     		subs	r0, r3, r1
 4374              	.LVL391:
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4375              		.loc 1 3626 0 is_stmt 0
 4376 0010 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 4377              	.LVL392:
 4378 0014 A52A     		cmp	r2, #165
 4379 0016 FAD0     		beq	.L400
 4380              	.LVL393:
 4381              	.L399:
 4382              	.LBE225:
 4383              	.LBE224:
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4384              		.loc 1 3663 0 is_stmt 1
 4385 0018 C0F38F00 		ubfx	r0, r0, #2, #16
 4386              	.LVL394:
 4387 001c 7047     		bx	lr
 4388              	.LVL395:
 4389              	.L403:
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4390              		.loc 1 3648 0 discriminator 1
ARM GAS  /tmp/cch6Oc3v.s 			page 178


 4391 001e 024B     		ldr	r3, .L404
 4392 0020 1B68     		ldr	r3, [r3]
 4393              	.LVL396:
 4394 0022 EFE7     		b	.L398
 4395              	.LVL397:
 4396              	.L401:
 4397              	.LBB227:
 4398              	.LBB226:
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4399              		.loc 1 3624 0
 4400 0024 0020     		movs	r0, #0
 4401 0026 F7E7     		b	.L399
 4402              	.L405:
 4403              		.align	2
 4404              	.L404:
 4405 0028 00000000 		.word	.LANCHOR5
 4406              	.LBE226:
 4407              	.LBE227:
 4408              		.cfi_endproc
 4409              	.LFE47:
 4411              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4412              		.align	1
 4413              		.global	xTaskGetCurrentTaskHandle
 4414              		.syntax unified
 4415              		.thumb
 4416              		.thumb_func
 4417              		.fpu fpv4-sp-d16
 4419              	xTaskGetCurrentTaskHandle:
 4420              	.LFB50:
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 4421              		.loc 1 3751 0
 4422              		.cfi_startproc
 4423              		@ args = 0, pretend = 0, frame = 0
 4424              		@ frame_needed = 0, uses_anonymous_args = 0
 4425              		@ link register save eliminated.
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4426              		.loc 1 3757 0
 4427 0000 014B     		ldr	r3, .L407
 4428 0002 1868     		ldr	r0, [r3]
 4429              	.LVL398:
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4430              		.loc 1 3760 0
 4431 0004 7047     		bx	lr
 4432              	.L408:
 4433 0006 00BF     		.align	2
 4434              	.L407:
 4435 0008 00000000 		.word	.LANCHOR5
 4436              		.cfi_endproc
 4437              	.LFE50:
 4439              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4440              		.align	1
 4441              		.global	xTaskGetSchedulerState
 4442              		.syntax unified
 4443              		.thumb
 4444              		.thumb_func
 4445              		.fpu fpv4-sp-d16
 4447              	xTaskGetSchedulerState:
ARM GAS  /tmp/cch6Oc3v.s 			page 179


 4448              	.LFB51:
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4449              		.loc 1 3768 0
 4450              		.cfi_startproc
 4451              		@ args = 0, pretend = 0, frame = 0
 4452              		@ frame_needed = 0, uses_anonymous_args = 0
 4453              		@ link register save eliminated.
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4454              		.loc 1 3771 0
 4455 0000 054B     		ldr	r3, .L413
 4456 0002 1B68     		ldr	r3, [r3]
 4457 0004 33B1     		cbz	r3, .L411
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4458              		.loc 1 3777 0
 4459 0006 054B     		ldr	r3, .L413+4
 4460 0008 1B68     		ldr	r3, [r3]
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4461              		.loc 1 3783 0
 4462 000a 002B     		cmp	r3, #0
 4463 000c 0CBF     		ite	eq
 4464 000e 0220     		moveq	r0, #2
 4465 0010 0020     		movne	r0, #0
 4466 0012 7047     		bx	lr
 4467              	.L411:
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4468              		.loc 1 3773 0
 4469 0014 0120     		movs	r0, #1
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4470              		.loc 1 3788 0
 4471 0016 7047     		bx	lr
 4472              	.L414:
 4473              		.align	2
 4474              	.L413:
 4475 0018 00000000 		.word	.LANCHOR11
 4476 001c 00000000 		.word	.LANCHOR16
 4477              		.cfi_endproc
 4478              	.LFE51:
 4480              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 4481              		.align	1
 4482              		.global	xTaskPriorityInherit
 4483              		.syntax unified
 4484              		.thumb
 4485              		.thumb_func
 4486              		.fpu fpv4-sp-d16
 4488              	xTaskPriorityInherit:
 4489              	.LFB52:
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 4490              		.loc 1 3796 0
 4491              		.cfi_startproc
 4492              		@ args = 0, pretend = 0, frame = 0
 4493              		@ frame_needed = 0, uses_anonymous_args = 0
 4494              	.LVL399:
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4495              		.loc 1 3803 0
 4496 0000 0028     		cmp	r0, #0
 4497 0002 3FD0     		beq	.L422
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
ARM GAS  /tmp/cch6Oc3v.s 			page 180


 4498              		.loc 1 3796 0
 4499 0004 38B5     		push	{r3, r4, r5, lr}
 4500              	.LCFI43:
 4501              		.cfi_def_cfa_offset 16
 4502              		.cfi_offset 3, -16
 4503              		.cfi_offset 4, -12
 4504              		.cfi_offset 5, -8
 4505              		.cfi_offset 14, -4
 4506 0006 0546     		mov	r5, r0
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4507              		.loc 1 3808 0
 4508 0008 C26A     		ldr	r2, [r0, #44]
 4509 000a 1F49     		ldr	r1, .L428
 4510 000c 0968     		ldr	r1, [r1]
 4511 000e C96A     		ldr	r1, [r1, #44]
 4512 0010 8A42     		cmp	r2, r1
 4513 0012 2ED2     		bcs	.L417
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4514              		.loc 1 3813 0
 4515 0014 8169     		ldr	r1, [r0, #24]
 4516 0016 0029     		cmp	r1, #0
 4517 0018 05DB     		blt	.L418
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4518              		.loc 1 3815 0
 4519 001a 1B49     		ldr	r1, .L428
 4520 001c 0968     		ldr	r1, [r1]
 4521 001e C96A     		ldr	r1, [r1, #44]
 4522 0020 C1F13801 		rsb	r1, r1, #56
 4523 0024 8161     		str	r1, [r0, #24]
 4524              	.L418:
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4525              		.loc 1 3824 0
 4526 0026 02EB8202 		add	r2, r2, r2, lsl #2
 4527 002a 1849     		ldr	r1, .L428+4
 4528 002c 01EB8202 		add	r2, r1, r2, lsl #2
 4529 0030 6969     		ldr	r1, [r5, #20]
 4530 0032 9142     		cmp	r1, r2
 4531 0034 05D0     		beq	.L427
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4532              		.loc 1 3842 0
 4533 0036 144A     		ldr	r2, .L428
 4534 0038 1268     		ldr	r2, [r2]
 4535 003a D26A     		ldr	r2, [r2, #44]
 4536 003c EA62     		str	r2, [r5, #44]
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4537              		.loc 1 3848 0
 4538 003e 0120     		movs	r0, #1
 4539              	.LVL400:
 4540 0040 1FE0     		b	.L415
 4541              	.LVL401:
 4542              	.L427:
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4543              		.loc 1 3826 0
 4544 0042 2C1D     		adds	r4, r5, #4
 4545 0044 2046     		mov	r0, r4
 4546              	.LVL402:
 4547 0046 FFF7FEFF 		bl	uxListRemove
ARM GAS  /tmp/cch6Oc3v.s 			page 181


 4548              	.LVL403:
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4549              		.loc 1 3836 0
 4550 004a 0F4B     		ldr	r3, .L428
 4551 004c 1B68     		ldr	r3, [r3]
 4552 004e D86A     		ldr	r0, [r3, #44]
 4553 0050 E862     		str	r0, [r5, #44]
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4554              		.loc 1 3837 0
 4555 0052 0F4B     		ldr	r3, .L428+8
 4556 0054 1B68     		ldr	r3, [r3]
 4557 0056 9842     		cmp	r0, r3
 4558 0058 01D9     		bls	.L421
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4559              		.loc 1 3837 0 is_stmt 0 discriminator 1
 4560 005a 0D4B     		ldr	r3, .L428+8
 4561 005c 1860     		str	r0, [r3]
 4562              	.L421:
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4563              		.loc 1 3837 0 discriminator 3
 4564 005e 00EB8000 		add	r0, r0, r0, lsl #2
 4565 0062 2146     		mov	r1, r4
 4566 0064 094B     		ldr	r3, .L428+4
 4567 0066 03EB8000 		add	r0, r3, r0, lsl #2
 4568 006a FFF7FEFF 		bl	vListInsertEnd
 4569              	.LVL404:
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4570              		.loc 1 3848 0 is_stmt 1 discriminator 3
 4571 006e 0120     		movs	r0, #1
 4572 0070 07E0     		b	.L415
 4573              	.LVL405:
 4574              	.L417:
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4575              		.loc 1 3852 0
 4576 0072 054A     		ldr	r2, .L428
 4577 0074 1268     		ldr	r2, [r2]
 4578 0076 C06C     		ldr	r0, [r0, #76]
 4579              	.LVL406:
 4580 0078 D36A     		ldr	r3, [r2, #44]
 4581 007a 9842     		cmp	r0, r3
 4582 007c 2CBF     		ite	cs
 4583 007e 0020     		movcs	r0, #0
 4584 0080 0120     		movcc	r0, #1
 4585              	.L415:
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4586              		.loc 1 3875 0
 4587 0082 38BD     		pop	{r3, r4, r5, pc}
 4588              	.LVL407:
 4589              	.L422:
 4590              	.LCFI44:
 4591              		.cfi_def_cfa_offset 0
 4592              		.cfi_restore 3
 4593              		.cfi_restore 4
 4594              		.cfi_restore 5
 4595              		.cfi_restore 14
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4596              		.loc 1 3798 0
ARM GAS  /tmp/cch6Oc3v.s 			page 182


 4597 0084 0020     		movs	r0, #0
 4598              	.LVL408:
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4599              		.loc 1 3875 0
 4600 0086 7047     		bx	lr
 4601              	.L429:
 4602              		.align	2
 4603              	.L428:
 4604 0088 00000000 		.word	.LANCHOR5
 4605 008c 00000000 		.word	.LANCHOR6
 4606 0090 00000000 		.word	.LANCHOR13
 4607              		.cfi_endproc
 4608              	.LFE52:
 4610              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4611              		.align	1
 4612              		.global	xTaskPriorityDisinherit
 4613              		.syntax unified
 4614              		.thumb
 4615              		.thumb_func
 4616              		.fpu fpv4-sp-d16
 4618              	xTaskPriorityDisinherit:
 4619              	.LFB53:
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4620              		.loc 1 3883 0
 4621              		.cfi_startproc
 4622              		@ args = 0, pretend = 0, frame = 0
 4623              		@ frame_needed = 0, uses_anonymous_args = 0
 4624              	.LVL409:
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4625              		.loc 1 3887 0
 4626 0000 0028     		cmp	r0, #0
 4627 0002 38D0     		beq	.L437
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4628              		.loc 1 3883 0
 4629 0004 38B5     		push	{r3, r4, r5, lr}
 4630              	.LCFI45:
 4631              		.cfi_def_cfa_offset 16
 4632              		.cfi_offset 3, -16
 4633              		.cfi_offset 4, -12
 4634              		.cfi_offset 5, -8
 4635              		.cfi_offset 14, -4
 4636 0006 0446     		mov	r4, r0
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4637              		.loc 1 3893 0
 4638 0008 1E4A     		ldr	r2, .L444
 4639 000a 1268     		ldr	r2, [r2]
 4640 000c 8242     		cmp	r2, r0
 4641 000e 08D0     		beq	.L432
 4642              	.LBB228:
 4643              	.LBB229:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4644              		.loc 2 195 0
 4645              		.syntax unified
 4646              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4647 0010 4FF05003 			mov r3, #80												
 4648 0014 83F31188 		msr basepri, r3											
 4649 0018 BFF36F8F 		isb														
ARM GAS  /tmp/cch6Oc3v.s 			page 183


 4650 001c BFF34F8F 		dsb														
 4651              	
 4652              	@ 0 "" 2
 4653              	.LVL410:
 4654              		.thumb
 4655              		.syntax unified
 4656              	.L433:
 4657 0020 FEE7     		b	.L433
 4658              	.L432:
 4659              	.LBE229:
 4660              	.LBE228:
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4661              		.loc 1 3894 0
 4662 0022 026D     		ldr	r2, [r0, #80]
 4663 0024 42B9     		cbnz	r2, .L434
 4664              	.LBB230:
 4665              	.LBB231:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4666              		.loc 2 195 0
 4667              		.syntax unified
 4668              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4669 0026 4FF05003 			mov r3, #80												
 4670 002a 83F31188 		msr basepri, r3											
 4671 002e BFF36F8F 		isb														
 4672 0032 BFF34F8F 		dsb														
 4673              	
 4674              	@ 0 "" 2
 4675              	.LVL411:
 4676              		.thumb
 4677              		.syntax unified
 4678              	.L435:
 4679 0036 FEE7     		b	.L435
 4680              	.L434:
 4681              	.LBE231:
 4682              	.LBE230:
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4683              		.loc 1 3895 0
 4684 0038 013A     		subs	r2, r2, #1
 4685 003a 0265     		str	r2, [r0, #80]
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4686              		.loc 1 3899 0
 4687 003c C06A     		ldr	r0, [r0, #44]
 4688              	.LVL412:
 4689 003e E16C     		ldr	r1, [r4, #76]
 4690 0040 8842     		cmp	r0, r1
 4691 0042 1AD0     		beq	.L438
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4692              		.loc 1 3902 0
 4693 0044 DAB9     		cbnz	r2, .L439
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4694              		.loc 1 3909 0
 4695 0046 251D     		adds	r5, r4, #4
 4696 0048 2846     		mov	r0, r5
 4697 004a FFF7FEFF 		bl	uxListRemove
 4698              	.LVL413:
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4699              		.loc 1 3921 0
ARM GAS  /tmp/cch6Oc3v.s 			page 184


 4700 004e E36C     		ldr	r3, [r4, #76]
 4701 0050 E362     		str	r3, [r4, #44]
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4702              		.loc 1 3926 0
 4703 0052 C3F13802 		rsb	r2, r3, #56
 4704 0056 A261     		str	r2, [r4, #24]
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4705              		.loc 1 3927 0
 4706 0058 0B4A     		ldr	r2, .L444+4
 4707 005a 1268     		ldr	r2, [r2]
 4708 005c 9342     		cmp	r3, r2
 4709 005e 84BF     		itt	hi
 4710 0060 094A     		ldrhi	r2, .L444+4
 4711 0062 1360     		strhi	r3, [r2]
 4712 0064 2946     		mov	r1, r5
 4713 0066 094A     		ldr	r2, .L444+8
 4714 0068 1420     		movs	r0, #20
 4715 006a 00FB0320 		mla	r0, r0, r3, r2
 4716 006e FFF7FEFF 		bl	vListInsertEnd
 4717              	.LVL414:
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4718              		.loc 1 3937 0
 4719 0072 0120     		movs	r0, #1
 4720              	.LVL415:
 4721              	.L430:
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4722              		.loc 1 3955 0
 4723 0074 38BD     		pop	{r3, r4, r5, pc}
 4724              	.LVL416:
 4725              	.L437:
 4726              	.LCFI46:
 4727              		.cfi_def_cfa_offset 0
 4728              		.cfi_restore 3
 4729              		.cfi_restore 4
 4730              		.cfi_restore 5
 4731              		.cfi_restore 14
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4732              		.loc 1 3885 0
 4733 0076 0020     		movs	r0, #0
 4734              	.LVL417:
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4735              		.loc 1 3955 0
 4736 0078 7047     		bx	lr
 4737              	.LVL418:
 4738              	.L438:
 4739              	.LCFI47:
 4740              		.cfi_def_cfa_offset 16
 4741              		.cfi_offset 3, -16
 4742              		.cfi_offset 4, -12
 4743              		.cfi_offset 5, -8
 4744              		.cfi_offset 14, -4
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4745              		.loc 1 3885 0
 4746 007a 0020     		movs	r0, #0
 4747 007c FAE7     		b	.L430
 4748              	.L439:
 4749 007e 0020     		movs	r0, #0
ARM GAS  /tmp/cch6Oc3v.s 			page 185


3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4750              		.loc 1 3954 0
 4751 0080 F8E7     		b	.L430
 4752              	.L445:
 4753 0082 00BF     		.align	2
 4754              	.L444:
 4755 0084 00000000 		.word	.LANCHOR5
 4756 0088 00000000 		.word	.LANCHOR13
 4757 008c 00000000 		.word	.LANCHOR6
 4758              		.cfi_endproc
 4759              	.LFE53:
 4761              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 4762              		.align	1
 4763              		.global	vTaskPriorityDisinheritAfterTimeout
 4764              		.syntax unified
 4765              		.thumb
 4766              		.thumb_func
 4767              		.fpu fpv4-sp-d16
 4769              	vTaskPriorityDisinheritAfterTimeout:
 4770              	.LFB54:
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4771              		.loc 1 3963 0
 4772              		.cfi_startproc
 4773              		@ args = 0, pretend = 0, frame = 0
 4774              		@ frame_needed = 0, uses_anonymous_args = 0
 4775              	.LVL419:
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4776              		.loc 1 3968 0
 4777 0000 0028     		cmp	r0, #0
 4778 0002 44D0     		beq	.L455
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4779              		.loc 1 3963 0
 4780 0004 38B5     		push	{r3, r4, r5, lr}
 4781              	.LCFI48:
 4782              		.cfi_def_cfa_offset 16
 4783              		.cfi_offset 3, -16
 4784              		.cfi_offset 4, -12
 4785              		.cfi_offset 5, -8
 4786              		.cfi_offset 14, -4
 4787 0006 0446     		mov	r4, r0
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4788              		.loc 1 3972 0
 4789 0008 006D     		ldr	r0, [r0, #80]
 4790              	.LVL420:
 4791 000a 40B9     		cbnz	r0, .L448
 4792              	.LBB232:
 4793              	.LBB233:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4794              		.loc 2 195 0
 4795              		.syntax unified
 4796              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4797 000c 4FF05003 			mov r3, #80												
 4798 0010 83F31188 		msr basepri, r3											
 4799 0014 BFF36F8F 		isb														
 4800 0018 BFF34F8F 		dsb														
 4801              	
 4802              	@ 0 "" 2
ARM GAS  /tmp/cch6Oc3v.s 			page 186


 4803              	.LVL421:
 4804              		.thumb
 4805              		.syntax unified
 4806              	.L449:
 4807 001c FEE7     		b	.L449
 4808              	.L448:
 4809 001e E26C     		ldr	r2, [r4, #76]
 4810 0020 8A42     		cmp	r2, r1
 4811 0022 38BF     		it	cc
 4812 0024 0A46     		movcc	r2, r1
 4813              	.LVL422:
 4814              	.LBE233:
 4815              	.LBE232:
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4816              		.loc 1 3988 0
 4817 0026 E16A     		ldr	r1, [r4, #44]
 4818              	.LVL423:
 4819 0028 9142     		cmp	r1, r2
 4820 002a 01D0     		beq	.L446
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4821              		.loc 1 3994 0
 4822 002c 0128     		cmp	r0, #1
 4823 002e 00D0     		beq	.L458
 4824              	.LVL424:
 4825              	.L446:
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4826              		.loc 1 4057 0
 4827 0030 38BD     		pop	{r3, r4, r5, pc}
 4828              	.LVL425:
 4829              	.L458:
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4830              		.loc 1 3999 0
 4831 0032 1748     		ldr	r0, .L459
 4832 0034 0068     		ldr	r0, [r0]
 4833 0036 A042     		cmp	r0, r4
 4834 0038 08D1     		bne	.L450
 4835              	.LBB234:
 4836              	.LBB235:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4837              		.loc 2 195 0
 4838              		.syntax unified
 4839              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4840 003a 4FF05003 			mov r3, #80												
 4841 003e 83F31188 		msr basepri, r3											
 4842 0042 BFF36F8F 		isb														
 4843 0046 BFF34F8F 		dsb														
 4844              	
 4845              	@ 0 "" 2
 4846              	.LVL426:
 4847              		.thumb
 4848              		.syntax unified
 4849              	.L451:
 4850 004a FEE7     		b	.L451
 4851              	.L450:
 4852              	.LVL427:
 4853              	.LBE235:
 4854              	.LBE234:
ARM GAS  /tmp/cch6Oc3v.s 			page 187


4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4855              		.loc 1 4006 0
 4856 004c E262     		str	r2, [r4, #44]
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4857              		.loc 1 4010 0
 4858 004e A069     		ldr	r0, [r4, #24]
 4859 0050 0028     		cmp	r0, #0
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4860              		.loc 1 4012 0
 4861 0052 A4BF     		itt	ge
 4862 0054 C2F13802 		rsbge	r2, r2, #56
 4863              	.LVL428:
 4864 0058 A261     		strge	r2, [r4, #24]
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4865              		.loc 1 4025 0
 4866 005a 0E4A     		ldr	r2, .L459+4
 4867 005c 1420     		movs	r0, #20
 4868 005e 00FB0121 		mla	r1, r0, r1, r2
 4869              	.LVL429:
 4870 0062 6269     		ldr	r2, [r4, #20]
 4871 0064 8A42     		cmp	r2, r1
 4872 0066 E3D1     		bne	.L446
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 4873              		.loc 1 4027 0
 4874 0068 251D     		adds	r5, r4, #4
 4875 006a 2846     		mov	r0, r5
 4876 006c FFF7FEFF 		bl	uxListRemove
 4877              	.LVL430:
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4878              		.loc 1 4036 0
 4879 0070 E36A     		ldr	r3, [r4, #44]
 4880 0072 094A     		ldr	r2, .L459+8
 4881 0074 1268     		ldr	r2, [r2]
 4882 0076 9342     		cmp	r3, r2
 4883 0078 84BF     		itt	hi
 4884 007a 074A     		ldrhi	r2, .L459+8
 4885 007c 1360     		strhi	r3, [r2]
 4886 007e 2946     		mov	r1, r5
 4887 0080 044A     		ldr	r2, .L459+4
 4888 0082 1420     		movs	r0, #20
 4889 0084 00FB0320 		mla	r0, r0, r3, r2
 4890 0088 FFF7FEFF 		bl	vListInsertEnd
 4891              	.LVL431:
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4892              		.loc 1 4057 0
 4893 008c D0E7     		b	.L446
 4894              	.LVL432:
 4895              	.L455:
 4896              	.LCFI49:
 4897              		.cfi_def_cfa_offset 0
 4898              		.cfi_restore 3
 4899              		.cfi_restore 4
 4900              		.cfi_restore 5
 4901              		.cfi_restore 14
 4902 008e 7047     		bx	lr
 4903              	.L460:
 4904              		.align	2
ARM GAS  /tmp/cch6Oc3v.s 			page 188


 4905              	.L459:
 4906 0090 00000000 		.word	.LANCHOR5
 4907 0094 00000000 		.word	.LANCHOR6
 4908 0098 00000000 		.word	.LANCHOR13
 4909              		.cfi_endproc
 4910              	.LFE54:
 4912              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4913              		.align	1
 4914              		.global	uxTaskResetEventItemValue
 4915              		.syntax unified
 4916              		.thumb
 4917              		.thumb_func
 4918              		.fpu fpv4-sp-d16
 4920              	uxTaskResetEventItemValue:
 4921              	.LFB55:
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 4922              		.loc 1 4377 0
 4923              		.cfi_startproc
 4924              		@ args = 0, pretend = 0, frame = 0
 4925              		@ frame_needed = 0, uses_anonymous_args = 0
 4926              		@ link register save eliminated.
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4927              		.loc 1 4380 0
 4928 0000 044B     		ldr	r3, .L462
 4929 0002 1A68     		ldr	r2, [r3]
 4930 0004 9069     		ldr	r0, [r2, #24]
 4931              	.LVL433:
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4932              		.loc 1 4384 0
 4933 0006 1968     		ldr	r1, [r3]
 4934 0008 1A68     		ldr	r2, [r3]
 4935 000a CB6A     		ldr	r3, [r1, #44]
 4936 000c C3F13803 		rsb	r3, r3, #56
 4937 0010 9361     		str	r3, [r2, #24]
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4938              		.loc 1 4387 0
 4939 0012 7047     		bx	lr
 4940              	.L463:
 4941              		.align	2
 4942              	.L462:
 4943 0014 00000000 		.word	.LANCHOR5
 4944              		.cfi_endproc
 4945              	.LFE55:
 4947              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 4948              		.align	1
 4949              		.global	pvTaskIncrementMutexHeldCount
 4950              		.syntax unified
 4951              		.thumb
 4952              		.thumb_func
 4953              		.fpu fpv4-sp-d16
 4955              	pvTaskIncrementMutexHeldCount:
 4956              	.LFB56:
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 4957              		.loc 1 4393 0
 4958              		.cfi_startproc
 4959              		@ args = 0, pretend = 0, frame = 0
 4960              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cch6Oc3v.s 			page 189


 4961              		@ link register save eliminated.
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4962              		.loc 1 4396 0
 4963 0000 054B     		ldr	r3, .L466
 4964 0002 1B68     		ldr	r3, [r3]
 4965 0004 23B1     		cbz	r3, .L465
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4966              		.loc 1 4398 0
 4967 0006 044B     		ldr	r3, .L466
 4968 0008 1A68     		ldr	r2, [r3]
 4969 000a 136D     		ldr	r3, [r2, #80]
 4970 000c 0133     		adds	r3, r3, #1
 4971 000e 1365     		str	r3, [r2, #80]
 4972              	.L465:
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4973              		.loc 1 4401 0
 4974 0010 014B     		ldr	r3, .L466
 4975 0012 1868     		ldr	r0, [r3]
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4976              		.loc 1 4402 0
 4977 0014 7047     		bx	lr
 4978              	.L467:
 4979 0016 00BF     		.align	2
 4980              	.L466:
 4981 0018 00000000 		.word	.LANCHOR5
 4982              		.cfi_endproc
 4983              	.LFE56:
 4985              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 4986              		.align	1
 4987              		.global	ulTaskNotifyTake
 4988              		.syntax unified
 4989              		.thumb
 4990              		.thumb_func
 4991              		.fpu fpv4-sp-d16
 4993              	ulTaskNotifyTake:
 4994              	.LFB57:
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 4995              		.loc 1 4410 0
 4996              		.cfi_startproc
 4997              		@ args = 0, pretend = 0, frame = 0
 4998              		@ frame_needed = 0, uses_anonymous_args = 0
 4999              	.LVL434:
 5000 0000 38B5     		push	{r3, r4, r5, lr}
 5001              	.LCFI50:
 5002              		.cfi_def_cfa_offset 16
 5003              		.cfi_offset 3, -16
 5004              		.cfi_offset 4, -12
 5005              		.cfi_offset 5, -8
 5006              		.cfi_offset 14, -4
 5007 0002 0546     		mov	r5, r0
 5008 0004 0C46     		mov	r4, r1
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5009              		.loc 1 4413 0
 5010 0006 FFF7FEFF 		bl	vPortEnterCritical
 5011              	.LVL435:
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5012              		.loc 1 4416 0
ARM GAS  /tmp/cch6Oc3v.s 			page 190


 5013 000a 194B     		ldr	r3, .L475
 5014 000c 1B68     		ldr	r3, [r3]
 5015 000e 5B6D     		ldr	r3, [r3, #84]
 5016 0010 2BB9     		cbnz	r3, .L469
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5017              		.loc 1 4419 0
 5018 0012 174B     		ldr	r3, .L475
 5019 0014 1B68     		ldr	r3, [r3]
 5020 0016 0122     		movs	r2, #1
 5021 0018 83F85820 		strb	r2, [r3, #88]
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5022              		.loc 1 4421 0
 5023 001c ACB9     		cbnz	r4, .L473
 5024              	.L469:
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5025              		.loc 1 4442 0
 5026 001e FFF7FEFF 		bl	vPortExitCritical
 5027              	.LVL436:
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5028              		.loc 1 4444 0
 5029 0022 FFF7FEFF 		bl	vPortEnterCritical
 5030              	.LVL437:
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5031              		.loc 1 4447 0
 5032 0026 124B     		ldr	r3, .L475
 5033 0028 1B68     		ldr	r3, [r3]
 5034 002a 5C6D     		ldr	r4, [r3, #84]
 5035              	.LVL438:
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5036              		.loc 1 4449 0
 5037 002c 24B1     		cbz	r4, .L470
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5038              		.loc 1 4451 0
 5039 002e CDB9     		cbnz	r5, .L474
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5040              		.loc 1 4457 0
 5041 0030 0F4B     		ldr	r3, .L475
 5042 0032 1B68     		ldr	r3, [r3]
 5043 0034 621E     		subs	r2, r4, #1
 5044 0036 5A65     		str	r2, [r3, #84]
 5045              	.L470:
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5046              		.loc 1 4465 0
 5047 0038 0D4B     		ldr	r3, .L475
 5048 003a 1B68     		ldr	r3, [r3]
 5049 003c 0022     		movs	r2, #0
 5050 003e 83F85820 		strb	r2, [r3, #88]
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5051              		.loc 1 4467 0
 5052 0042 FFF7FEFF 		bl	vPortExitCritical
 5053              	.LVL439:
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5054              		.loc 1 4470 0
 5055 0046 2046     		mov	r0, r4
 5056 0048 38BD     		pop	{r3, r4, r5, pc}
 5057              	.LVL440:
 5058              	.L473:
ARM GAS  /tmp/cch6Oc3v.s 			page 191


4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 5059              		.loc 1 4423 0
 5060 004a 1146     		mov	r1, r2
 5061 004c 2046     		mov	r0, r4
 5062 004e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5063              	.LVL441:
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5064              		.loc 1 4430 0
 5065 0052 084B     		ldr	r3, .L475+4
 5066 0054 4FF08052 		mov	r2, #268435456
 5067 0058 1A60     		str	r2, [r3]
 5068              		.syntax unified
 5069              	@ 4430 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5070 005a BFF34F8F 		dsb
 5071              	@ 0 "" 2
 5072              	@ 4430 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5073 005e BFF36F8F 		isb
 5074              	@ 0 "" 2
 5075              		.thumb
 5076              		.syntax unified
 5077 0062 DCE7     		b	.L469
 5078              	.LVL442:
 5079              	.L474:
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5080              		.loc 1 4453 0
 5081 0064 024B     		ldr	r3, .L475
 5082 0066 1B68     		ldr	r3, [r3]
 5083 0068 0022     		movs	r2, #0
 5084 006a 5A65     		str	r2, [r3, #84]
 5085 006c E4E7     		b	.L470
 5086              	.L476:
 5087 006e 00BF     		.align	2
 5088              	.L475:
 5089 0070 00000000 		.word	.LANCHOR5
 5090 0074 04ED00E0 		.word	-536810236
 5091              		.cfi_endproc
 5092              	.LFE57:
 5094              		.section	.text.xTaskNotifyWait,"ax",%progbits
 5095              		.align	1
 5096              		.global	xTaskNotifyWait
 5097              		.syntax unified
 5098              		.thumb
 5099              		.thumb_func
 5100              		.fpu fpv4-sp-d16
 5102              	xTaskNotifyWait:
 5103              	.LFB58:
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 5104              		.loc 1 4478 0
 5105              		.cfi_startproc
 5106              		@ args = 0, pretend = 0, frame = 0
 5107              		@ frame_needed = 0, uses_anonymous_args = 0
 5108              	.LVL443:
 5109 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5110              	.LCFI51:
 5111              		.cfi_def_cfa_offset 24
 5112              		.cfi_offset 3, -24
 5113              		.cfi_offset 4, -20
ARM GAS  /tmp/cch6Oc3v.s 			page 192


 5114              		.cfi_offset 5, -16
 5115              		.cfi_offset 6, -12
 5116              		.cfi_offset 7, -8
 5117              		.cfi_offset 14, -4
 5118 0002 0746     		mov	r7, r0
 5119 0004 0D46     		mov	r5, r1
 5120 0006 1446     		mov	r4, r2
 5121 0008 1E46     		mov	r6, r3
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5122              		.loc 1 4481 0
 5123 000a FFF7FEFF 		bl	vPortEnterCritical
 5124              	.LVL444:
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5125              		.loc 1 4484 0
 5126 000e 204B     		ldr	r3, .L485
 5127 0010 1B68     		ldr	r3, [r3]
 5128 0012 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 5129 0016 DBB2     		uxtb	r3, r3
 5130 0018 022B     		cmp	r3, #2
 5131 001a 0AD0     		beq	.L478
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5132              		.loc 1 4489 0
 5133 001c 1C4B     		ldr	r3, .L485
 5134 001e 1A68     		ldr	r2, [r3]
 5135 0020 506D     		ldr	r0, [r2, #84]
 5136 0022 20EA0700 		bic	r0, r0, r7
 5137 0026 5065     		str	r0, [r2, #84]
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5138              		.loc 1 4492 0
 5139 0028 1B68     		ldr	r3, [r3]
 5140 002a 0122     		movs	r2, #1
 5141 002c 83F85820 		strb	r2, [r3, #88]
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5142              		.loc 1 4494 0
 5143 0030 CEB9     		cbnz	r6, .L483
 5144              	.L478:
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5145              		.loc 1 4515 0
 5146 0032 FFF7FEFF 		bl	vPortExitCritical
 5147              	.LVL445:
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5148              		.loc 1 4517 0
 5149 0036 FFF7FEFF 		bl	vPortEnterCritical
 5150              	.LVL446:
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5151              		.loc 1 4521 0
 5152 003a 1CB1     		cbz	r4, .L479
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5153              		.loc 1 4525 0
 5154 003c 144B     		ldr	r3, .L485
 5155 003e 1B68     		ldr	r3, [r3]
 5156 0040 5B6D     		ldr	r3, [r3, #84]
 5157 0042 2360     		str	r3, [r4]
 5158              	.L479:
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5159              		.loc 1 4532 0
 5160 0044 124B     		ldr	r3, .L485
ARM GAS  /tmp/cch6Oc3v.s 			page 193


 5161 0046 1B68     		ldr	r3, [r3]
 5162 0048 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 5163 004c DBB2     		uxtb	r3, r3
 5164 004e 022B     		cmp	r3, #2
 5165 0050 16D0     		beq	.L484
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5166              		.loc 1 4535 0
 5167 0052 0024     		movs	r4, #0
 5168              	.LVL447:
 5169              	.L480:
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5170              		.loc 1 4545 0
 5171 0054 0E4B     		ldr	r3, .L485
 5172 0056 1B68     		ldr	r3, [r3]
 5173 0058 0022     		movs	r2, #0
 5174 005a 83F85820 		strb	r2, [r3, #88]
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5175              		.loc 1 4547 0
 5176 005e FFF7FEFF 		bl	vPortExitCritical
 5177              	.LVL448:
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5178              		.loc 1 4550 0
 5179 0062 2046     		mov	r0, r4
 5180 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5181              	.LVL449:
 5182              	.L483:
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 5183              		.loc 1 4496 0
 5184 0066 1146     		mov	r1, r2
 5185 0068 3046     		mov	r0, r6
 5186 006a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5187              	.LVL450:
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5188              		.loc 1 4503 0
 5189 006e 094B     		ldr	r3, .L485+4
 5190 0070 4FF08052 		mov	r2, #268435456
 5191 0074 1A60     		str	r2, [r3]
 5192              		.syntax unified
 5193              	@ 4503 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5194 0076 BFF34F8F 		dsb
 5195              	@ 0 "" 2
 5196              	@ 4503 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5197 007a BFF36F8F 		isb
 5198              	@ 0 "" 2
 5199              		.thumb
 5200              		.syntax unified
 5201 007e D8E7     		b	.L478
 5202              	.L484:
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 5203              		.loc 1 4541 0
 5204 0080 034B     		ldr	r3, .L485
 5205 0082 1A68     		ldr	r2, [r3]
 5206 0084 536D     		ldr	r3, [r2, #84]
 5207 0086 23EA0505 		bic	r5, r3, r5
 5208              	.LVL451:
 5209 008a 5565     		str	r5, [r2, #84]
 5210              	.LVL452:
ARM GAS  /tmp/cch6Oc3v.s 			page 194


4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5211              		.loc 1 4542 0
 5212 008c 0124     		movs	r4, #1
 5213              	.LVL453:
 5214 008e E1E7     		b	.L480
 5215              	.L486:
 5216              		.align	2
 5217              	.L485:
 5218 0090 00000000 		.word	.LANCHOR5
 5219 0094 04ED00E0 		.word	-536810236
 5220              		.cfi_endproc
 5221              	.LFE58:
 5223              		.section	.text.xTaskGenericNotify,"ax",%progbits
 5224              		.align	1
 5225              		.global	xTaskGenericNotify
 5226              		.syntax unified
 5227              		.thumb
 5228              		.thumb_func
 5229              		.fpu fpv4-sp-d16
 5231              	xTaskGenericNotify:
 5232              	.LFB59:
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5233              		.loc 1 4558 0
 5234              		.cfi_startproc
 5235              		@ args = 0, pretend = 0, frame = 0
 5236              		@ frame_needed = 0, uses_anonymous_args = 0
 5237              	.LVL454:
 5238 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5239              	.LCFI52:
 5240              		.cfi_def_cfa_offset 24
 5241              		.cfi_offset 3, -24
 5242              		.cfi_offset 4, -20
 5243              		.cfi_offset 5, -16
 5244              		.cfi_offset 6, -12
 5245              		.cfi_offset 7, -8
 5246              		.cfi_offset 14, -4
 5247              	.LVL455:
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5248              		.loc 1 4563 0
 5249 0002 40B9     		cbnz	r0, .L488
 5250              	.LBB236:
 5251              	.LBB237:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5252              		.loc 2 195 0
 5253              		.syntax unified
 5254              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5255 0004 4FF05003 			mov r3, #80												
 5256 0008 83F31188 		msr basepri, r3											
 5257 000c BFF36F8F 		isb														
 5258 0010 BFF34F8F 		dsb														
 5259              	
 5260              	@ 0 "" 2
 5261              	.LVL456:
 5262              		.thumb
 5263              		.syntax unified
 5264              	.L489:
 5265 0014 FEE7     		b	.L489
ARM GAS  /tmp/cch6Oc3v.s 			page 195


 5266              	.LVL457:
 5267              	.L488:
 5268 0016 0446     		mov	r4, r0
 5269 0018 1F46     		mov	r7, r3
 5270 001a 1546     		mov	r5, r2
 5271 001c 0E46     		mov	r6, r1
 5272              	.LVL458:
 5273              	.LBE237:
 5274              	.LBE236:
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5275              		.loc 1 4566 0
 5276 001e FFF7FEFF 		bl	vPortEnterCritical
 5277              	.LVL459:
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5278              		.loc 1 4568 0
 5279 0022 0FB1     		cbz	r7, .L490
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5280              		.loc 1 4570 0
 5281 0024 636D     		ldr	r3, [r4, #84]
 5282 0026 3B60     		str	r3, [r7]
 5283              	.L490:
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5284              		.loc 1 4573 0
 5285 0028 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5286 002c DBB2     		uxtb	r3, r3
 5287              	.LVL460:
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5288              		.loc 1 4575 0
 5289 002e 0222     		movs	r2, #2
 5290 0030 84F85820 		strb	r2, [r4, #88]
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5291              		.loc 1 4577 0
 5292 0034 6A1E     		subs	r2, r5, #1
 5293 0036 032A     		cmp	r2, #3
 5294 0038 06D8     		bhi	.L491
 5295 003a DFE802F0 		tbb	[pc, r2]
 5296              	.L493:
 5297 003e 02       		.byte	(.L492-.L493)/2
 5298 003f 0C       		.byte	(.L494-.L493)/2
 5299 0040 10       		.byte	(.L495-.L493)/2
 5300 0041 12       		.byte	(.L496-.L493)/2
 5301              		.p2align 1
 5302              	.L492:
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5303              		.loc 1 4580 0
 5304 0042 626D     		ldr	r2, [r4, #84]
 5305 0044 1643     		orrs	r6, r6, r2
 5306              	.LVL461:
 5307 0046 6665     		str	r6, [r4, #84]
 5308              	.L491:
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5309              		.loc 1 4613 0
 5310 0048 012B     		cmp	r3, #1
 5311 004a 0ED0     		beq	.L505
 5312 004c 0124     		movs	r4, #1
 5313              	.LVL462:
 5314              	.L497:
ARM GAS  /tmp/cch6Oc3v.s 			page 196


4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5315              		.loc 1 4653 0
 5316 004e FFF7FEFF 		bl	vPortExitCritical
 5317              	.LVL463:
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5318              		.loc 1 4656 0
 5319 0052 2046     		mov	r0, r4
 5320 0054 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5321              	.LVL464:
 5322              	.L494:
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5323              		.loc 1 4584 0
 5324 0056 626D     		ldr	r2, [r4, #84]
 5325 0058 0132     		adds	r2, r2, #1
 5326 005a 6265     		str	r2, [r4, #84]
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5327              		.loc 1 4585 0
 5328 005c F4E7     		b	.L491
 5329              	.L495:
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5330              		.loc 1 4588 0
 5331 005e 6665     		str	r6, [r4, #84]
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5332              		.loc 1 4589 0
 5333 0060 F2E7     		b	.L491
 5334              	.L496:
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5335              		.loc 1 4592 0
 5336 0062 022B     		cmp	r3, #2
 5337 0064 2ED0     		beq	.L501
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5338              		.loc 1 4594 0
 5339 0066 6665     		str	r6, [r4, #84]
 5340 0068 EEE7     		b	.L491
 5341              	.LVL465:
 5342              	.L505:
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5343              		.loc 1 4615 0
 5344 006a 251D     		adds	r5, r4, #4
 5345 006c 2846     		mov	r0, r5
 5346 006e FFF7FEFF 		bl	uxListRemove
 5347              	.LVL466:
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5348              		.loc 1 4616 0
 5349 0072 E36A     		ldr	r3, [r4, #44]
 5350 0074 154A     		ldr	r2, .L506
 5351 0076 1268     		ldr	r2, [r2]
 5352 0078 9342     		cmp	r3, r2
 5353 007a 84BF     		itt	hi
 5354 007c 134A     		ldrhi	r2, .L506
 5355 007e 1360     		strhi	r3, [r2]
 5356 0080 2946     		mov	r1, r5
 5357 0082 134A     		ldr	r2, .L506+4
 5358 0084 1420     		movs	r0, #20
 5359 0086 00FB0320 		mla	r0, r0, r3, r2
 5360 008a FFF7FEFF 		bl	vListInsertEnd
 5361              	.LVL467:
ARM GAS  /tmp/cch6Oc3v.s 			page 197


4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5362              		.loc 1 4619 0
 5363 008e A36A     		ldr	r3, [r4, #40]
 5364 0090 43B1     		cbz	r3, .L499
 5365              	.LBB238:
 5366              	.LBB239:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5367              		.loc 2 195 0
 5368              		.syntax unified
 5369              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5370 0092 4FF05003 			mov r3, #80												
 5371 0096 83F31188 		msr basepri, r3											
 5372 009a BFF36F8F 		isb														
 5373 009e BFF34F8F 		dsb														
 5374              	
 5375              	@ 0 "" 2
 5376              	.LVL468:
 5377              		.thumb
 5378              		.syntax unified
 5379              	.L500:
 5380 00a2 FEE7     		b	.L500
 5381              	.L499:
 5382              	.LBE239:
 5383              	.LBE238:
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5384              		.loc 1 4637 0
 5385 00a4 0B4B     		ldr	r3, .L506+8
 5386 00a6 1B68     		ldr	r3, [r3]
 5387 00a8 E26A     		ldr	r2, [r4, #44]
 5388 00aa DB6A     		ldr	r3, [r3, #44]
 5389 00ac 9A42     		cmp	r2, r3
 5390 00ae 0BD9     		bls	.L503
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5391              		.loc 1 4641 0
 5392 00b0 094B     		ldr	r3, .L506+12
 5393 00b2 4FF08052 		mov	r2, #268435456
 5394 00b6 1A60     		str	r2, [r3]
 5395              		.syntax unified
 5396              	@ 4641 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5397 00b8 BFF34F8F 		dsb
 5398              	@ 0 "" 2
 5399              	@ 4641 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5400 00bc BFF36F8F 		isb
 5401              	@ 0 "" 2
 5402              		.thumb
 5403              		.syntax unified
 5404 00c0 0124     		movs	r4, #1
 5405              	.LVL469:
 5406 00c2 C4E7     		b	.L497
 5407              	.LVL470:
 5408              	.L501:
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5409              		.loc 1 4599 0
 5410 00c4 0024     		movs	r4, #0
 5411              	.LVL471:
 5412 00c6 C2E7     		b	.L497
 5413              	.LVL472:
ARM GAS  /tmp/cch6Oc3v.s 			page 198


 5414              	.L503:
 5415 00c8 0124     		movs	r4, #1
 5416              	.LVL473:
 5417 00ca C0E7     		b	.L497
 5418              	.L507:
 5419              		.align	2
 5420              	.L506:
 5421 00cc 00000000 		.word	.LANCHOR13
 5422 00d0 00000000 		.word	.LANCHOR6
 5423 00d4 00000000 		.word	.LANCHOR5
 5424 00d8 04ED00E0 		.word	-536810236
 5425              		.cfi_endproc
 5426              	.LFE59:
 5428              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 5429              		.align	1
 5430              		.global	xTaskGenericNotifyFromISR
 5431              		.syntax unified
 5432              		.thumb
 5433              		.thumb_func
 5434              		.fpu fpv4-sp-d16
 5436              	xTaskGenericNotifyFromISR:
 5437              	.LFB60:
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5438              		.loc 1 4664 0
 5439              		.cfi_startproc
 5440              		@ args = 4, pretend = 0, frame = 0
 5441              		@ frame_needed = 0, uses_anonymous_args = 0
 5442              	.LVL474:
 5443 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 5444              	.LCFI53:
 5445              		.cfi_def_cfa_offset 32
 5446              		.cfi_offset 3, -32
 5447              		.cfi_offset 4, -28
 5448              		.cfi_offset 5, -24
 5449              		.cfi_offset 6, -20
 5450              		.cfi_offset 7, -16
 5451              		.cfi_offset 8, -12
 5452              		.cfi_offset 9, -8
 5453              		.cfi_offset 14, -4
 5454 0004 089F     		ldr	r7, [sp, #32]
 5455              	.LVL475:
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5456              		.loc 1 4670 0
 5457 0006 40B9     		cbnz	r0, .L509
 5458              	.LBB240:
 5459              	.LBB241:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5460              		.loc 2 195 0
 5461              		.syntax unified
 5462              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5463 0008 4FF05003 			mov r3, #80												
 5464 000c 83F31188 		msr basepri, r3											
 5465 0010 BFF36F8F 		isb														
 5466 0014 BFF34F8F 		dsb														
 5467              	
 5468              	@ 0 "" 2
 5469              	.LVL476:
ARM GAS  /tmp/cch6Oc3v.s 			page 199


 5470              		.thumb
 5471              		.syntax unified
 5472              	.L510:
 5473 0018 FEE7     		b	.L510
 5474              	.LVL477:
 5475              	.L509:
 5476 001a 0446     		mov	r4, r0
 5477 001c 9946     		mov	r9, r3
 5478 001e 1646     		mov	r6, r2
 5479 0020 8846     		mov	r8, r1
 5480              	.LBE241:
 5481              	.LBE240:
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5482              		.loc 1 4688 0
 5483 0022 FFF7FEFF 		bl	vPortValidateInterruptPriority
 5484              	.LVL478:
 5485              	.LBB242:
 5486              	.LBB243:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5487              		.loc 2 211 0
 5488              		.syntax unified
 5489              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5490 0026 EFF31185 			mrs r5, basepri											
 5491 002a 4FF05003 		mov r3, #80												
 5492 002e 83F31188 		msr basepri, r3											
 5493 0032 BFF36F8F 		isb														
 5494 0036 BFF34F8F 		dsb														
 5495              	
 5496              	@ 0 "" 2
 5497              		.thumb
 5498              		.syntax unified
 5499              	.LBE243:
 5500              	.LBE242:
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5501              		.loc 1 4694 0
 5502 003a B9F1000F 		cmp	r9, #0
 5503 003e 02D0     		beq	.L511
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5504              		.loc 1 4696 0
 5505 0040 636D     		ldr	r3, [r4, #84]
 5506 0042 C9F80030 		str	r3, [r9]
 5507              	.L511:
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5508              		.loc 1 4699 0
 5509 0046 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5510 004a DBB2     		uxtb	r3, r3
 5511              	.LVL479:
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5512              		.loc 1 4700 0
 5513 004c 0222     		movs	r2, #2
 5514 004e 84F85820 		strb	r2, [r4, #88]
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5515              		.loc 1 4702 0
 5516 0052 721E     		subs	r2, r6, #1
 5517 0054 032A     		cmp	r2, #3
 5518 0056 07D8     		bhi	.L512
 5519 0058 DFE802F0 		tbb	[pc, r2]
ARM GAS  /tmp/cch6Oc3v.s 			page 200


 5520              	.L514:
 5521 005c 02       		.byte	(.L513-.L514)/2
 5522 005d 0D       		.byte	(.L515-.L514)/2
 5523 005e 11       		.byte	(.L516-.L514)/2
 5524 005f 14       		.byte	(.L517-.L514)/2
 5525              		.p2align 1
 5526              	.L513:
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5527              		.loc 1 4705 0
 5528 0060 626D     		ldr	r2, [r4, #84]
 5529 0062 42EA0802 		orr	r2, r2, r8
 5530 0066 6265     		str	r2, [r4, #84]
 5531              	.L512:
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5532              		.loc 1 4738 0
 5533 0068 012B     		cmp	r3, #1
 5534 006a 10D0     		beq	.L529
 5535 006c 0120     		movs	r0, #1
 5536              	.LVL480:
 5537              	.L518:
 5538              	.LBB244:
 5539              	.LBB245:
 5540              		.loc 2 229 0
 5541              		.syntax unified
 5542              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5543 006e 85F31188 			msr basepri, r5	
 5544              	@ 0 "" 2
 5545              	.LVL481:
 5546              		.thumb
 5547              		.syntax unified
 5548              	.LBE245:
 5549              	.LBE244:
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5550              		.loc 1 4780 0
 5551 0072 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 5552              	.LVL482:
 5553              	.L515:
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5554              		.loc 1 4709 0
 5555 0076 626D     		ldr	r2, [r4, #84]
 5556 0078 0132     		adds	r2, r2, #1
 5557 007a 6265     		str	r2, [r4, #84]
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5558              		.loc 1 4710 0
 5559 007c F4E7     		b	.L512
 5560              	.L516:
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5561              		.loc 1 4713 0
 5562 007e C4F85480 		str	r8, [r4, #84]
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5563              		.loc 1 4714 0
 5564 0082 F1E7     		b	.L512
 5565              	.L517:
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5566              		.loc 1 4717 0
 5567 0084 022B     		cmp	r3, #2
 5568 0086 36D0     		beq	.L525
ARM GAS  /tmp/cch6Oc3v.s 			page 201


4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5569              		.loc 1 4719 0
 5570 0088 C4F85480 		str	r8, [r4, #84]
 5571 008c ECE7     		b	.L512
 5572              	.L529:
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5573              		.loc 1 4741 0
 5574 008e A36A     		ldr	r3, [r4, #40]
 5575              	.LVL483:
 5576 0090 43B1     		cbz	r3, .L519
 5577              	.LBB246:
 5578              	.LBB247:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5579              		.loc 2 195 0
 5580              		.syntax unified
 5581              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5582 0092 4FF05003 			mov r3, #80												
 5583 0096 83F31188 		msr basepri, r3											
 5584 009a BFF36F8F 		isb														
 5585 009e BFF34F8F 		dsb														
 5586              	
 5587              	@ 0 "" 2
 5588              	.LVL484:
 5589              		.thumb
 5590              		.syntax unified
 5591              	.L520:
 5592 00a2 FEE7     		b	.L520
 5593              	.L519:
 5594              	.LBE247:
 5595              	.LBE246:
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5596              		.loc 1 4743 0
 5597 00a4 164B     		ldr	r3, .L530
 5598 00a6 1B68     		ldr	r3, [r3]
 5599 00a8 DBB9     		cbnz	r3, .L521
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5600              		.loc 1 4745 0
 5601 00aa 261D     		adds	r6, r4, #4
 5602 00ac 3046     		mov	r0, r6
 5603 00ae FFF7FEFF 		bl	uxListRemove
 5604              	.LVL485:
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5605              		.loc 1 4746 0
 5606 00b2 E36A     		ldr	r3, [r4, #44]
 5607 00b4 134A     		ldr	r2, .L530+4
 5608 00b6 1268     		ldr	r2, [r2]
 5609 00b8 9342     		cmp	r3, r2
 5610 00ba 84BF     		itt	hi
 5611 00bc 114A     		ldrhi	r2, .L530+4
 5612 00be 1360     		strhi	r3, [r2]
 5613 00c0 3146     		mov	r1, r6
 5614 00c2 114A     		ldr	r2, .L530+8
 5615 00c4 1420     		movs	r0, #20
 5616 00c6 00FB0320 		mla	r0, r0, r3, r2
 5617 00ca FFF7FEFF 		bl	vListInsertEnd
 5618              	.LVL486:
 5619              	.L523:
ARM GAS  /tmp/cch6Oc3v.s 			page 202


4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5620              		.loc 1 4755 0
 5621 00ce 0F4B     		ldr	r3, .L530+12
 5622 00d0 1B68     		ldr	r3, [r3]
 5623 00d2 E26A     		ldr	r2, [r4, #44]
 5624 00d4 DB6A     		ldr	r3, [r3, #44]
 5625 00d6 9A42     		cmp	r2, r3
 5626 00d8 0FD9     		bls	.L527
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5627              		.loc 1 4759 0
 5628 00da 47B1     		cbz	r7, .L524
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5629              		.loc 1 4761 0
 5630 00dc 0120     		movs	r0, #1
 5631 00de 3860     		str	r0, [r7]
 5632 00e0 C5E7     		b	.L518
 5633              	.L521:
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5634              		.loc 1 4752 0
 5635 00e2 04F11801 		add	r1, r4, #24
 5636 00e6 0A48     		ldr	r0, .L530+16
 5637 00e8 FFF7FEFF 		bl	vListInsertEnd
 5638              	.LVL487:
 5639 00ec EFE7     		b	.L523
 5640              	.L524:
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5641              		.loc 1 4768 0
 5642 00ee 0120     		movs	r0, #1
 5643 00f0 084B     		ldr	r3, .L530+20
 5644 00f2 1860     		str	r0, [r3]
 5645 00f4 BBE7     		b	.L518
 5646              	.LVL488:
 5647              	.L525:
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5648              		.loc 1 4724 0
 5649 00f6 0020     		movs	r0, #0
 5650 00f8 B9E7     		b	.L518
 5651              	.LVL489:
 5652              	.L527:
 5653 00fa 0120     		movs	r0, #1
 5654 00fc B7E7     		b	.L518
 5655              	.L531:
 5656 00fe 00BF     		.align	2
 5657              	.L530:
 5658 0100 00000000 		.word	.LANCHOR16
 5659 0104 00000000 		.word	.LANCHOR13
 5660 0108 00000000 		.word	.LANCHOR6
 5661 010c 00000000 		.word	.LANCHOR5
 5662 0110 00000000 		.word	.LANCHOR1
 5663 0114 00000000 		.word	.LANCHOR19
 5664              		.cfi_endproc
 5665              	.LFE60:
 5667              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5668              		.align	1
 5669              		.global	vTaskNotifyGiveFromISR
 5670              		.syntax unified
 5671              		.thumb
ARM GAS  /tmp/cch6Oc3v.s 			page 203


 5672              		.thumb_func
 5673              		.fpu fpv4-sp-d16
 5675              	vTaskNotifyGiveFromISR:
 5676              	.LFB61:
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5677              		.loc 1 4788 0
 5678              		.cfi_startproc
 5679              		@ args = 0, pretend = 0, frame = 0
 5680              		@ frame_needed = 0, uses_anonymous_args = 0
 5681              	.LVL490:
 5682 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5683              	.LCFI54:
 5684              		.cfi_def_cfa_offset 24
 5685              		.cfi_offset 3, -24
 5686              		.cfi_offset 4, -20
 5687              		.cfi_offset 5, -16
 5688              		.cfi_offset 6, -12
 5689              		.cfi_offset 7, -8
 5690              		.cfi_offset 14, -4
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5691              		.loc 1 4793 0
 5692 0002 40B9     		cbnz	r0, .L533
 5693              	.LBB248:
 5694              	.LBB249:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5695              		.loc 2 195 0
 5696              		.syntax unified
 5697              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5698 0004 4FF05003 			mov r3, #80												
 5699 0008 83F31188 		msr basepri, r3											
 5700 000c BFF36F8F 		isb														
 5701 0010 BFF34F8F 		dsb														
 5702              	
 5703              	@ 0 "" 2
 5704              	.LVL491:
 5705              		.thumb
 5706              		.syntax unified
 5707              	.L534:
 5708 0014 FEE7     		b	.L534
 5709              	.L533:
 5710 0016 0446     		mov	r4, r0
 5711 0018 0D46     		mov	r5, r1
 5712              	.LBE249:
 5713              	.LBE248:
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5714              		.loc 1 4811 0
 5715 001a FFF7FEFF 		bl	vPortValidateInterruptPriority
 5716              	.LVL492:
 5717              	.LBB250:
 5718              	.LBB251:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5719              		.loc 2 211 0
 5720              		.syntax unified
 5721              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5722 001e EFF31186 			mrs r6, basepri											
 5723 0022 4FF05003 		mov r3, #80												
 5724 0026 83F31188 		msr basepri, r3											
ARM GAS  /tmp/cch6Oc3v.s 			page 204


 5725 002a BFF36F8F 		isb														
 5726 002e BFF34F8F 		dsb														
 5727              	
 5728              	@ 0 "" 2
 5729              		.thumb
 5730              		.syntax unified
 5731              	.LBE251:
 5732              	.LBE250:
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5733              		.loc 1 4817 0
 5734 0032 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5735 0036 DBB2     		uxtb	r3, r3
 5736              	.LVL493:
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5737              		.loc 1 4818 0
 5738 0038 0222     		movs	r2, #2
 5739 003a 84F85820 		strb	r2, [r4, #88]
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5740              		.loc 1 4822 0
 5741 003e 626D     		ldr	r2, [r4, #84]
 5742 0040 0132     		adds	r2, r2, #1
 5743 0042 6265     		str	r2, [r4, #84]
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5744              		.loc 1 4828 0
 5745 0044 012B     		cmp	r3, #1
 5746 0046 02D0     		beq	.L543
 5747              	.LVL494:
 5748              	.L535:
 5749              	.LBB252:
 5750              	.LBB253:
 5751              		.loc 2 229 0
 5752              		.syntax unified
 5753              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5754 0048 86F31188 			msr basepri, r6	
 5755              	@ 0 "" 2
 5756              	.LVL495:
 5757              		.thumb
 5758              		.syntax unified
 5759              	.LBE253:
 5760              	.LBE252:
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5761              		.loc 1 4868 0
 5762 004c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5763              	.LVL496:
 5764              	.L543:
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5765              		.loc 1 4831 0
 5766 004e A36A     		ldr	r3, [r4, #40]
 5767              	.LVL497:
 5768 0050 43B1     		cbz	r3, .L536
 5769              	.LBB254:
 5770              	.LBB255:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5771              		.loc 2 195 0
 5772              		.syntax unified
 5773              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5774 0052 4FF05003 			mov r3, #80												
ARM GAS  /tmp/cch6Oc3v.s 			page 205


 5775 0056 83F31188 		msr basepri, r3											
 5776 005a BFF36F8F 		isb														
 5777 005e BFF34F8F 		dsb														
 5778              	
 5779              	@ 0 "" 2
 5780              	.LVL498:
 5781              		.thumb
 5782              		.syntax unified
 5783              	.L537:
 5784 0062 FEE7     		b	.L537
 5785              	.L536:
 5786              	.LBE255:
 5787              	.LBE254:
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5788              		.loc 1 4833 0
 5789 0064 144B     		ldr	r3, .L544
 5790 0066 1B68     		ldr	r3, [r3]
 5791 0068 DBB9     		cbnz	r3, .L538
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5792              		.loc 1 4835 0
 5793 006a 271D     		adds	r7, r4, #4
 5794 006c 3846     		mov	r0, r7
 5795 006e FFF7FEFF 		bl	uxListRemove
 5796              	.LVL499:
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5797              		.loc 1 4836 0
 5798 0072 E36A     		ldr	r3, [r4, #44]
 5799 0074 114A     		ldr	r2, .L544+4
 5800 0076 1268     		ldr	r2, [r2]
 5801 0078 9342     		cmp	r3, r2
 5802 007a 84BF     		itt	hi
 5803 007c 0F4A     		ldrhi	r2, .L544+4
 5804 007e 1360     		strhi	r3, [r2]
 5805 0080 3946     		mov	r1, r7
 5806 0082 0F4A     		ldr	r2, .L544+8
 5807 0084 1420     		movs	r0, #20
 5808 0086 00FB0320 		mla	r0, r0, r3, r2
 5809 008a FFF7FEFF 		bl	vListInsertEnd
 5810              	.LVL500:
 5811              	.L540:
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5812              		.loc 1 4845 0
 5813 008e 0D4B     		ldr	r3, .L544+12
 5814 0090 1B68     		ldr	r3, [r3]
 5815 0092 E26A     		ldr	r2, [r4, #44]
 5816 0094 DB6A     		ldr	r3, [r3, #44]
 5817 0096 9A42     		cmp	r2, r3
 5818 0098 D6D9     		bls	.L535
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5819              		.loc 1 4849 0
 5820 009a 45B1     		cbz	r5, .L541
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5821              		.loc 1 4851 0
 5822 009c 0123     		movs	r3, #1
 5823 009e 2B60     		str	r3, [r5]
 5824 00a0 D2E7     		b	.L535
 5825              	.L538:
ARM GAS  /tmp/cch6Oc3v.s 			page 206


4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5826              		.loc 1 4842 0
 5827 00a2 04F11801 		add	r1, r4, #24
 5828 00a6 0848     		ldr	r0, .L544+16
 5829 00a8 FFF7FEFF 		bl	vListInsertEnd
 5830              	.LVL501:
 5831 00ac EFE7     		b	.L540
 5832              	.L541:
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5833              		.loc 1 4858 0
 5834 00ae 074B     		ldr	r3, .L544+20
 5835 00b0 0122     		movs	r2, #1
 5836 00b2 1A60     		str	r2, [r3]
 5837 00b4 C8E7     		b	.L535
 5838              	.L545:
 5839 00b6 00BF     		.align	2
 5840              	.L544:
 5841 00b8 00000000 		.word	.LANCHOR16
 5842 00bc 00000000 		.word	.LANCHOR13
 5843 00c0 00000000 		.word	.LANCHOR6
 5844 00c4 00000000 		.word	.LANCHOR5
 5845 00c8 00000000 		.word	.LANCHOR1
 5846 00cc 00000000 		.word	.LANCHOR19
 5847              		.cfi_endproc
 5848              	.LFE61:
 5850              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 5851              		.align	1
 5852              		.global	xTaskNotifyStateClear
 5853              		.syntax unified
 5854              		.thumb
 5855              		.thumb_func
 5856              		.fpu fpv4-sp-d16
 5858              	xTaskNotifyStateClear:
 5859              	.LFB62:
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 5860              		.loc 1 4877 0
 5861              		.cfi_startproc
 5862              		@ args = 0, pretend = 0, frame = 0
 5863              		@ frame_needed = 0, uses_anonymous_args = 0
 5864              	.LVL502:
 5865 0000 10B5     		push	{r4, lr}
 5866              	.LCFI55:
 5867              		.cfi_def_cfa_offset 8
 5868              		.cfi_offset 4, -8
 5869              		.cfi_offset 14, -4
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5870              		.loc 1 4883 0
 5871 0002 0446     		mov	r4, r0
 5872 0004 78B1     		cbz	r0, .L551
 5873              	.LVL503:
 5874              	.L547:
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5875              		.loc 1 4885 0 discriminator 4
 5876 0006 FFF7FEFF 		bl	vPortEnterCritical
 5877              	.LVL504:
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5878              		.loc 1 4887 0 discriminator 4
ARM GAS  /tmp/cch6Oc3v.s 			page 207


 5879 000a 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5880 000e DBB2     		uxtb	r3, r3
 5881 0010 022B     		cmp	r3, #2
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 5882              		.loc 1 4889 0 discriminator 4
 5883 0012 03BF     		ittte	eq
 5884 0014 0023     		moveq	r3, #0
 5885 0016 84F85830 		strbeq	r3, [r4, #88]
 5886              	.LVL505:
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5887              		.loc 1 4890 0 discriminator 4
 5888 001a 0124     		moveq	r4, #1
 5889              	.LVL506:
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5890              		.loc 1 4894 0 discriminator 4
 5891 001c 0024     		movne	r4, #0
 5892              	.LVL507:
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5893              		.loc 1 4897 0 discriminator 4
 5894 001e FFF7FEFF 		bl	vPortExitCritical
 5895              	.LVL508:
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5896              		.loc 1 4900 0 discriminator 4
 5897 0022 2046     		mov	r0, r4
 5898 0024 10BD     		pop	{r4, pc}
 5899              	.LVL509:
 5900              	.L551:
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5901              		.loc 1 4883 0 discriminator 1
 5902 0026 014B     		ldr	r3, .L552
 5903 0028 1C68     		ldr	r4, [r3]
 5904              	.LVL510:
 5905 002a ECE7     		b	.L547
 5906              	.L553:
 5907              		.align	2
 5908              	.L552:
 5909 002c 00000000 		.word	.LANCHOR5
 5910              		.cfi_endproc
 5911              	.LFE62:
 5913              		.global	pxCurrentTCB
 5914              		.section	.bss.pxCurrentTCB,"aw",%nobits
 5915              		.align	2
 5916              		.set	.LANCHOR5,. + 0
 5919              	pxCurrentTCB:
 5920 0000 00000000 		.space	4
 5921              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 5922              		.align	2
 5923              		.set	.LANCHOR2,. + 0
 5926              	pxDelayedTaskList:
 5927 0000 00000000 		.space	4
 5928              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 5929              		.align	2
 5930              		.set	.LANCHOR10,. + 0
 5933              	pxOverflowDelayedTaskList:
 5934 0000 00000000 		.space	4
 5935              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 5936              		.align	2
ARM GAS  /tmp/cch6Oc3v.s 			page 208


 5937              		.set	.LANCHOR6,. + 0
 5940              	pxReadyTasksLists:
 5941 0000 00000000 		.space	1120
 5941      00000000 
 5941      00000000 
 5941      00000000 
 5941      00000000 
 5942              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 5943              		.align	2
 5944              		.set	.LANCHOR4,. + 0
 5947              	uxCurrentNumberOfTasks:
 5948 0000 00000000 		.space	4
 5949              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 5950              		.align	2
 5951              		.set	.LANCHOR14,. + 0
 5954              	uxDeletedTasksWaitingCleanUp:
 5955 0000 00000000 		.space	4
 5956              		.section	.bss.uxPendedTicks,"aw",%nobits
 5957              		.align	2
 5958              		.set	.LANCHOR18,. + 0
 5961              	uxPendedTicks:
 5962 0000 00000000 		.space	4
 5963              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 5964              		.align	2
 5965              		.set	.LANCHOR16,. + 0
 5968              	uxSchedulerSuspended:
 5969 0000 00000000 		.space	4
 5970              		.section	.bss.uxTaskNumber,"aw",%nobits
 5971              		.align	2
 5972              		.set	.LANCHOR12,. + 0
 5975              	uxTaskNumber:
 5976 0000 00000000 		.space	4
 5977              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 5978              		.align	2
 5979              		.set	.LANCHOR13,. + 0
 5982              	uxTopReadyPriority:
 5983 0000 00000000 		.space	4
 5984              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 5985              		.align	2
 5986              		.set	.LANCHOR7,. + 0
 5989              	xDelayedTaskList1:
 5990 0000 00000000 		.space	20
 5990      00000000 
 5990      00000000 
 5990      00000000 
 5990      00000000 
 5991              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 5992              		.align	2
 5993              		.set	.LANCHOR8,. + 0
 5996              	xDelayedTaskList2:
 5997 0000 00000000 		.space	20
 5997      00000000 
 5997      00000000 
 5997      00000000 
 5997      00000000 
 5998              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 5999              		.align	2
ARM GAS  /tmp/cch6Oc3v.s 			page 209


 6000              		.set	.LANCHOR3,. + 0
 6003              	xNextTaskUnblockTime:
 6004 0000 00000000 		.space	4
 6005              		.section	.bss.xNumOfOverflows,"aw",%nobits
 6006              		.align	2
 6007              		.set	.LANCHOR17,. + 0
 6010              	xNumOfOverflows:
 6011 0000 00000000 		.space	4
 6012              		.section	.bss.xPendingReadyList,"aw",%nobits
 6013              		.align	2
 6014              		.set	.LANCHOR1,. + 0
 6017              	xPendingReadyList:
 6018 0000 00000000 		.space	20
 6018      00000000 
 6018      00000000 
 6018      00000000 
 6018      00000000 
 6019              		.section	.bss.xSchedulerRunning,"aw",%nobits
 6020              		.align	2
 6021              		.set	.LANCHOR11,. + 0
 6024              	xSchedulerRunning:
 6025 0000 00000000 		.space	4
 6026              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 6027              		.align	2
 6028              		.set	.LANCHOR0,. + 0
 6031              	xSuspendedTaskList:
 6032 0000 00000000 		.space	20
 6032      00000000 
 6032      00000000 
 6032      00000000 
 6032      00000000 
 6033              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 6034              		.align	2
 6035              		.set	.LANCHOR9,. + 0
 6038              	xTasksWaitingTermination:
 6039 0000 00000000 		.space	20
 6039      00000000 
 6039      00000000 
 6039      00000000 
 6039      00000000 
 6040              		.section	.bss.xTickCount,"aw",%nobits
 6041              		.align	2
 6042              		.set	.LANCHOR15,. + 0
 6045              	xTickCount:
 6046 0000 00000000 		.space	4
 6047              		.section	.bss.xYieldPending,"aw",%nobits
 6048              		.align	2
 6049              		.set	.LANCHOR19,. + 0
 6052              	xYieldPending:
 6053 0000 00000000 		.space	4
 6054              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 6055              		.align	2
 6056              	.LC0:
 6057 0000 49444C45 		.ascii	"IDLE\000"
 6057      00
 6058              		.text
 6059              	.Letext0:
ARM GAS  /tmp/cch6Oc3v.s 			page 210


 6060              		.file 3 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 6061              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 6062              		.file 5 "/usr/include/newlib/sys/lock.h"
 6063              		.file 6 "/usr/include/newlib/sys/_types.h"
 6064              		.file 7 "/usr/include/newlib/sys/reent.h"
 6065              		.file 8 "/usr/include/newlib/stdlib.h"
 6066              		.file 9 "/usr/include/newlib/sys/_stdint.h"
 6067              		.file 10 "Inc/FreeRTOSConfig.h"
 6068              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 6069              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 6070              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 6071              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 6072              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
 6073              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/timers.h"
 6074              		.file 17 "/usr/include/newlib/string.h"
ARM GAS  /tmp/cch6Oc3v.s 			page 211


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/cch6Oc3v.s:18     .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/cch6Oc3v.s:24     .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/cch6Oc3v.s:83     .text.prvTaskIsTaskSuspended:0000000000000034 $d
     /tmp/cch6Oc3v.s:89     .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/cch6Oc3v.s:95     .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/cch6Oc3v.s:131    .text.prvResetNextTaskUnblockTime:0000000000000024 $d
     /tmp/cch6Oc3v.s:137    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/cch6Oc3v.s:143    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/cch6Oc3v.s:261    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/cch6Oc3v.s:267    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/cch6Oc3v.s:415    .text.prvAddNewTaskToReadyList:00000000000000c8 $d
     /tmp/cch6Oc3v.s:435    .text.prvDeleteTCB:0000000000000000 $t
     /tmp/cch6Oc3v.s:441    .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
     /tmp/cch6Oc3v.s:504    .text.prvIdleTask:0000000000000000 $t
     /tmp/cch6Oc3v.s:510    .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/cch6Oc3v.s:598    .text.prvIdleTask:0000000000000054 $d
     /tmp/cch6Oc3v.s:607    .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/cch6Oc3v.s:613    .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/cch6Oc3v.s:701    .text.prvAddCurrentTaskToDelayedList:0000000000000064 $d
     /tmp/cch6Oc3v.s:711    .text.xTaskCreateStatic:0000000000000000 $t
     /tmp/cch6Oc3v.s:718    .text.xTaskCreateStatic:0000000000000000 xTaskCreateStatic
     /tmp/cch6Oc3v.s:840    .text.xTaskCreate:0000000000000000 $t
     /tmp/cch6Oc3v.s:847    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/cch6Oc3v.s:947    .text.vTaskDelete:0000000000000000 $t
     /tmp/cch6Oc3v.s:954    .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/cch6Oc3v.s:1089   .text.vTaskDelete:0000000000000098 $d
     /tmp/cch6Oc3v.s:1101   .text.eTaskGetState:0000000000000000 $t
     /tmp/cch6Oc3v.s:1108   .text.eTaskGetState:0000000000000000 eTaskGetState
     /tmp/cch6Oc3v.s:1218   .text.eTaskGetState:000000000000006c $d
     /tmp/cch6Oc3v.s:1227   .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/cch6Oc3v.s:1234   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/cch6Oc3v.s:1273   .text.uxTaskPriorityGet:000000000000001c $d
     /tmp/cch6Oc3v.s:1278   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/cch6Oc3v.s:1285   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/cch6Oc3v.s:1348   .text.uxTaskPriorityGetFromISR:000000000000002c $d
     /tmp/cch6Oc3v.s:1353   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/cch6Oc3v.s:1360   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/cch6Oc3v.s:1519   .text.vTaskPrioritySet:00000000000000b8 $d
     /tmp/cch6Oc3v.s:1527   .text.vTaskResume:0000000000000000 $t
     /tmp/cch6Oc3v.s:1534   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/cch6Oc3v.s:1637   .text.vTaskResume:0000000000000074 $d
     /tmp/cch6Oc3v.s:1645   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/cch6Oc3v.s:1652   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/cch6Oc3v.s:1780   .text.xTaskResumeFromISR:000000000000008c $d
     /tmp/cch6Oc3v.s:1789   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/cch6Oc3v.s:1796   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/cch6Oc3v.s:1907   .text.vTaskStartScheduler:0000000000000078 $d
     /tmp/cch6Oc3v.s:1918   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/cch6Oc3v.s:1925   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/cch6Oc3v.s:1963   .text.vTaskEndScheduler:0000000000000020 $d
     /tmp/cch6Oc3v.s:1968   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/cch6Oc3v.s:1975   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/cch6Oc3v.s:1992   .text.vTaskSuspendAll:000000000000000c $d
     /tmp/cch6Oc3v.s:1997   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/cch6Oc3v.s:2004   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
ARM GAS  /tmp/cch6Oc3v.s 			page 212


     /tmp/cch6Oc3v.s:2020   .text.xTaskGetTickCount:0000000000000008 $d
     /tmp/cch6Oc3v.s:2025   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/cch6Oc3v.s:2032   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/cch6Oc3v.s:2055   .text.xTaskGetTickCountFromISR:000000000000000c $d
     /tmp/cch6Oc3v.s:2060   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/cch6Oc3v.s:2067   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/cch6Oc3v.s:2082   .text.uxTaskGetNumberOfTasks:0000000000000008 $d
     /tmp/cch6Oc3v.s:2087   .text.pcTaskGetName:0000000000000000 $t
     /tmp/cch6Oc3v.s:2094   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/cch6Oc3v.s:2138   .text.pcTaskGetName:0000000000000024 $d
     /tmp/cch6Oc3v.s:2145   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/cch6Oc3v.s:2152   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/cch6Oc3v.s:2358   .text.xTaskIncrementTick:00000000000000fc $d
     /tmp/cch6Oc3v.s:2373   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/cch6Oc3v.s:2380   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/cch6Oc3v.s:2568   .text.xTaskResumeAll:00000000000000d4 $d
     /tmp/cch6Oc3v.s:2581   .text.vTaskDelayUntil:0000000000000000 $t
     /tmp/cch6Oc3v.s:2588   .text.vTaskDelayUntil:0000000000000000 vTaskDelayUntil
     /tmp/cch6Oc3v.s:2753   .text.vTaskDelayUntil:0000000000000098 $d
     /tmp/cch6Oc3v.s:2761   .text.vTaskDelay:0000000000000000 $t
     /tmp/cch6Oc3v.s:2768   .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/cch6Oc3v.s:2841   .text.vTaskDelay:0000000000000044 $d
     /tmp/cch6Oc3v.s:2847   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/cch6Oc3v.s:2854   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/cch6Oc3v.s:2974   .text.vTaskSwitchContext:0000000000000090 $d
     /tmp/cch6Oc3v.s:2985   .text.vTaskSuspend:0000000000000000 $t
     /tmp/cch6Oc3v.s:2992   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/cch6Oc3v.s:3139   .text.vTaskSuspend:00000000000000a8 $d
     /tmp/cch6Oc3v.s:3149   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/cch6Oc3v.s:3156   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/cch6Oc3v.s:3209   .text.vTaskPlaceOnEventList:000000000000002c $d
     /tmp/cch6Oc3v.s:3214   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/cch6Oc3v.s:3221   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/cch6Oc3v.s:3309   .text.vTaskPlaceOnUnorderedEventList:0000000000000054 $d
     /tmp/cch6Oc3v.s:3315   .text.vTaskPlaceOnEventListRestricted:0000000000000000 $t
     /tmp/cch6Oc3v.s:3322   .text.vTaskPlaceOnEventListRestricted:0000000000000000 vTaskPlaceOnEventListRestricted
     /tmp/cch6Oc3v.s:3382   .text.vTaskPlaceOnEventListRestricted:0000000000000038 $d
     /tmp/cch6Oc3v.s:3387   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/cch6Oc3v.s:3394   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/cch6Oc3v.s:3491   .text.xTaskRemoveFromEventList:0000000000000070 $d
     /tmp/cch6Oc3v.s:3501   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/cch6Oc3v.s:3508   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 vTaskRemoveFromUnorderedEventList
     /tmp/cch6Oc3v.s:3611   .text.vTaskRemoveFromUnorderedEventList:0000000000000074 $d
     /tmp/cch6Oc3v.s:3622   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/cch6Oc3v.s:3629   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/cch6Oc3v.s:3684   .text.vTaskSetTimeOutState:0000000000000030 $d
     /tmp/cch6Oc3v.s:3690   .text.vTaskInternalSetTimeOutState:0000000000000000 $t
     /tmp/cch6Oc3v.s:3697   .text.vTaskInternalSetTimeOutState:0000000000000000 vTaskInternalSetTimeOutState
     /tmp/cch6Oc3v.s:3718   .text.vTaskInternalSetTimeOutState:0000000000000010 $d
     /tmp/cch6Oc3v.s:3724   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/cch6Oc3v.s:3731   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/cch6Oc3v.s:3863   .text.xTaskCheckForTimeOut:0000000000000078 $d
     /tmp/cch6Oc3v.s:3870   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/cch6Oc3v.s:3877   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/cch6Oc3v.s:3893   .text.vTaskMissedYield:0000000000000008 $d
     /tmp/cch6Oc3v.s:3898   .text.uxTaskGetTaskNumber:0000000000000000 $t
     /tmp/cch6Oc3v.s:3905   .text.uxTaskGetTaskNumber:0000000000000000 uxTaskGetTaskNumber
ARM GAS  /tmp/cch6Oc3v.s 			page 213


     /tmp/cch6Oc3v.s:3931   .text.vTaskSetTaskNumber:0000000000000000 $t
     /tmp/cch6Oc3v.s:3938   .text.vTaskSetTaskNumber:0000000000000000 vTaskSetTaskNumber
     /tmp/cch6Oc3v.s:3959   .text.vTaskGetInfo:0000000000000000 $t
     /tmp/cch6Oc3v.s:3966   .text.vTaskGetInfo:0000000000000000 vTaskGetInfo
     /tmp/cch6Oc3v.s:4107   .text.vTaskGetInfo:0000000000000088 $d
     /tmp/cch6Oc3v.s:4114   .text.prvListTasksWithinSingleList:0000000000000000 $t
     /tmp/cch6Oc3v.s:4120   .text.prvListTasksWithinSingleList:0000000000000000 prvListTasksWithinSingleList
     /tmp/cch6Oc3v.s:4210   .text.uxTaskGetSystemState:0000000000000000 $t
     /tmp/cch6Oc3v.s:4217   .text.uxTaskGetSystemState:0000000000000000 uxTaskGetSystemState
     /tmp/cch6Oc3v.s:4330   .text.uxTaskGetSystemState:00000000000000a0 $d
     /tmp/cch6Oc3v.s:4340   .text.uxTaskGetStackHighWaterMark:0000000000000000 $t
     /tmp/cch6Oc3v.s:4347   .text.uxTaskGetStackHighWaterMark:0000000000000000 uxTaskGetStackHighWaterMark
     /tmp/cch6Oc3v.s:4405   .text.uxTaskGetStackHighWaterMark:0000000000000028 $d
     /tmp/cch6Oc3v.s:4412   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/cch6Oc3v.s:4419   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/cch6Oc3v.s:4435   .text.xTaskGetCurrentTaskHandle:0000000000000008 $d
     /tmp/cch6Oc3v.s:4440   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/cch6Oc3v.s:4447   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/cch6Oc3v.s:4475   .text.xTaskGetSchedulerState:0000000000000018 $d
     /tmp/cch6Oc3v.s:4481   .text.xTaskPriorityInherit:0000000000000000 $t
     /tmp/cch6Oc3v.s:4488   .text.xTaskPriorityInherit:0000000000000000 xTaskPriorityInherit
     /tmp/cch6Oc3v.s:4604   .text.xTaskPriorityInherit:0000000000000088 $d
     /tmp/cch6Oc3v.s:4611   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/cch6Oc3v.s:4618   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/cch6Oc3v.s:4755   .text.xTaskPriorityDisinherit:0000000000000084 $d
     /tmp/cch6Oc3v.s:4762   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 $t
     /tmp/cch6Oc3v.s:4769   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 vTaskPriorityDisinheritAfterTimeout
     /tmp/cch6Oc3v.s:4906   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000090 $d
     /tmp/cch6Oc3v.s:4913   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/cch6Oc3v.s:4920   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/cch6Oc3v.s:4943   .text.uxTaskResetEventItemValue:0000000000000014 $d
     /tmp/cch6Oc3v.s:4948   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/cch6Oc3v.s:4955   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/cch6Oc3v.s:4981   .text.pvTaskIncrementMutexHeldCount:0000000000000018 $d
     /tmp/cch6Oc3v.s:4986   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/cch6Oc3v.s:4993   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/cch6Oc3v.s:5089   .text.ulTaskNotifyTake:0000000000000070 $d
     /tmp/cch6Oc3v.s:5095   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/cch6Oc3v.s:5102   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/cch6Oc3v.s:5218   .text.xTaskNotifyWait:0000000000000090 $d
     /tmp/cch6Oc3v.s:5224   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/cch6Oc3v.s:5231   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/cch6Oc3v.s:5297   .text.xTaskGenericNotify:000000000000003e $d
     /tmp/cch6Oc3v.s:5301   .text.xTaskGenericNotify:0000000000000042 $t
     /tmp/cch6Oc3v.s:5421   .text.xTaskGenericNotify:00000000000000cc $d
     /tmp/cch6Oc3v.s:5429   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/cch6Oc3v.s:5436   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/cch6Oc3v.s:5521   .text.xTaskGenericNotifyFromISR:000000000000005c $d
     /tmp/cch6Oc3v.s:5525   .text.xTaskGenericNotifyFromISR:0000000000000060 $t
     /tmp/cch6Oc3v.s:5658   .text.xTaskGenericNotifyFromISR:0000000000000100 $d
     /tmp/cch6Oc3v.s:5668   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
     /tmp/cch6Oc3v.s:5675   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/cch6Oc3v.s:5841   .text.vTaskNotifyGiveFromISR:00000000000000b8 $d
     /tmp/cch6Oc3v.s:5851   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/cch6Oc3v.s:5858   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/cch6Oc3v.s:5909   .text.xTaskNotifyStateClear:000000000000002c $d
     /tmp/cch6Oc3v.s:5919   .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
ARM GAS  /tmp/cch6Oc3v.s 			page 214


     /tmp/cch6Oc3v.s:5915   .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/cch6Oc3v.s:5922   .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/cch6Oc3v.s:5926   .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/cch6Oc3v.s:5929   .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/cch6Oc3v.s:5933   .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/cch6Oc3v.s:5936   .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/cch6Oc3v.s:5940   .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/cch6Oc3v.s:5943   .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/cch6Oc3v.s:5947   .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/cch6Oc3v.s:5950   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/cch6Oc3v.s:5954   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/cch6Oc3v.s:5957   .bss.uxPendedTicks:0000000000000000 $d
     /tmp/cch6Oc3v.s:5961   .bss.uxPendedTicks:0000000000000000 uxPendedTicks
     /tmp/cch6Oc3v.s:5964   .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/cch6Oc3v.s:5968   .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/cch6Oc3v.s:5971   .bss.uxTaskNumber:0000000000000000 $d
     /tmp/cch6Oc3v.s:5975   .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/cch6Oc3v.s:5978   .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/cch6Oc3v.s:5982   .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/cch6Oc3v.s:5985   .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/cch6Oc3v.s:5989   .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/cch6Oc3v.s:5992   .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/cch6Oc3v.s:5996   .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/cch6Oc3v.s:5999   .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/cch6Oc3v.s:6003   .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/cch6Oc3v.s:6006   .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/cch6Oc3v.s:6010   .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/cch6Oc3v.s:6013   .bss.xPendingReadyList:0000000000000000 $d
     /tmp/cch6Oc3v.s:6017   .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/cch6Oc3v.s:6020   .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/cch6Oc3v.s:6024   .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/cch6Oc3v.s:6027   .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/cch6Oc3v.s:6031   .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/cch6Oc3v.s:6034   .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/cch6Oc3v.s:6038   .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/cch6Oc3v.s:6041   .bss.xTickCount:0000000000000000 $d
     /tmp/cch6Oc3v.s:6045   .bss.xTickCount:0000000000000000 xTickCount
     /tmp/cch6Oc3v.s:6048   .bss.xYieldPending:0000000000000000 $d
     /tmp/cch6Oc3v.s:6052   .bss.xYieldPending:0000000000000000 xYieldPending
     /tmp/cch6Oc3v.s:6055   .rodata.vTaskStartScheduler.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
memset
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
vListInitialise
vPortFree
uxListRemove
vListInsert
pvPortMalloc
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xTimerCreateTimerTask
xPortStartScheduler
ARM GAS  /tmp/cch6Oc3v.s 			page 215


vPortEndScheduler
