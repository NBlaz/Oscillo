ARM GAS  /tmp/ccChCE5Q.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.StartDefaultTask,"ax",%progbits
  18              		.align	1
  19              		.global	StartDefaultTask
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	StartDefaultTask:
  26              	.LFB139:
  27              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/main.c    ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/main.c    ****   * the License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                             www.st.com/SLA0044
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "cmsis_os.h"
  24:Src/main.c    **** 
  25:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  26:Src/main.c    **** /* USER CODE BEGIN Includes */
  27:Src/main.c    **** 
  28:Src/main.c    **** /* USER CODE END Includes */
  29:Src/main.c    **** 
  30:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  31:Src/main.c    **** /* USER CODE BEGIN PTD */
ARM GAS  /tmp/ccChCE5Q.s 			page 2


  32:Src/main.c    **** 
  33:Src/main.c    **** /* USER CODE END PTD */
  34:Src/main.c    **** 
  35:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  36:Src/main.c    **** /* USER CODE BEGIN PD */
  37:Src/main.c    **** /* USER CODE END PD */
  38:Src/main.c    **** 
  39:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  40:Src/main.c    **** /* USER CODE BEGIN PM */
  41:Src/main.c    **** 
  42:Src/main.c    **** /* USER CODE END PM */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  45:Src/main.c    **** SPI_HandleTypeDef hspi1;
  46:Src/main.c    **** DMA_HandleTypeDef hdma_spi1_rx;
  47:Src/main.c    **** DMA_HandleTypeDef hdma_spi1_tx;
  48:Src/main.c    **** 
  49:Src/main.c    **** typedef StaticTask_t osStaticThreadDef_t;
  50:Src/main.c    **** osThreadId_t defaultTaskHandle;
  51:Src/main.c    **** uint32_t defaultTaskBuffer[ 128 ];
  52:Src/main.c    **** osStaticThreadDef_t defaultTaskControlBlock;
  53:Src/main.c    **** osThreadId_t myTask02Handle;
  54:Src/main.c    **** uint32_t myTask02Buffer[ 128 ];
  55:Src/main.c    **** osStaticThreadDef_t myTask02ControlBlock;
  56:Src/main.c    **** /* USER CODE BEGIN PV */
  57:Src/main.c    **** 
  58:Src/main.c    **** /* USER CODE END PV */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  61:Src/main.c    **** void SystemClock_Config(void);
  62:Src/main.c    **** static void MX_GPIO_Init(void);
  63:Src/main.c    **** static void MX_DMA_Init(void);
  64:Src/main.c    **** static void MX_SPI1_Init(void);
  65:Src/main.c    **** void StartDefaultTask(void *argument);
  66:Src/main.c    **** void StartTask02(void *argument);
  67:Src/main.c    **** 
  68:Src/main.c    **** /* USER CODE BEGIN PFP */
  69:Src/main.c    **** 
  70:Src/main.c    **** /* USER CODE END PFP */
  71:Src/main.c    **** 
  72:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  73:Src/main.c    **** /* USER CODE BEGIN 0 */
  74:Src/main.c    **** 
  75:Src/main.c    **** /* USER CODE END 0 */
  76:Src/main.c    **** 
  77:Src/main.c    **** /**
  78:Src/main.c    ****   * @brief  The application entry point.
  79:Src/main.c    ****   * @retval int
  80:Src/main.c    ****   */
  81:Src/main.c    **** int main(void)
  82:Src/main.c    **** {
  83:Src/main.c    ****   /* USER CODE BEGIN 1 */
  84:Src/main.c    **** 
  85:Src/main.c    ****   /* USER CODE END 1 */
  86:Src/main.c    ****   
  87:Src/main.c    **** 
  88:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
ARM GAS  /tmp/ccChCE5Q.s 			page 3


  89:Src/main.c    **** 
  90:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  91:Src/main.c    ****   HAL_Init();
  92:Src/main.c    **** 
  93:Src/main.c    ****   /* USER CODE BEGIN Init */
  94:Src/main.c    **** 
  95:Src/main.c    ****   /* USER CODE END Init */
  96:Src/main.c    **** 
  97:Src/main.c    ****   /* Configure the system clock */
  98:Src/main.c    ****   SystemClock_Config();
  99:Src/main.c    **** 
 100:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 101:Src/main.c    **** 
 102:Src/main.c    ****   /* USER CODE END SysInit */
 103:Src/main.c    **** 
 104:Src/main.c    ****   /* Initialize all configured peripherals */
 105:Src/main.c    ****   MX_GPIO_Init();
 106:Src/main.c    ****   MX_DMA_Init();
 107:Src/main.c    ****   MX_SPI1_Init();
 108:Src/main.c    **** 
 109:Src/main.c    ****   TM_ILI9341_Init(&hspi1);
 110:Src/main.c    ****   //TM_ILI9341_Fill(ILI9341_COLOR_BLACK);
 111:Src/main.c    ****   //TM_ILI9341_Fill(ILI9341_COLOR_RED);
 112:Src/main.c    ****   /* USER CODE BEGIN 2 */
 113:Src/main.c    **** 
 114:Src/main.c    ****   /* USER CODE END 2 */
 115:Src/main.c    **** 
 116:Src/main.c    ****   osKernelInitialize();
 117:Src/main.c    **** 
 118:Src/main.c    ****   /* USER CODE BEGIN RTOS_MUTEX */
 119:Src/main.c    ****   /* add mutexes, ... */
 120:Src/main.c    ****   /* USER CODE END RTOS_MUTEX */
 121:Src/main.c    **** 
 122:Src/main.c    ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 123:Src/main.c    ****   /* add semaphores, ... */
 124:Src/main.c    ****   /* USER CODE END RTOS_SEMAPHORES */
 125:Src/main.c    **** 
 126:Src/main.c    ****   /* USER CODE BEGIN RTOS_TIMERS */
 127:Src/main.c    ****   /* start timers, add new ones, ... */
 128:Src/main.c    ****   /* USER CODE END RTOS_TIMERS */
 129:Src/main.c    **** 
 130:Src/main.c    ****   /* USER CODE BEGIN RTOS_QUEUES */
 131:Src/main.c    ****   /* add queues, ... */
 132:Src/main.c    ****   /* USER CODE END RTOS_QUEUES */
 133:Src/main.c    **** 
 134:Src/main.c    ****   /* Create the thread(s) */
 135:Src/main.c    ****   /* definition and creation of defaultTask */
 136:Src/main.c    ****   const osThreadAttr_t defaultTask_attributes = {
 137:Src/main.c    ****     .name = "defaultTask",
 138:Src/main.c    ****     .stack_mem = &defaultTaskBuffer[0],
 139:Src/main.c    ****     .stack_size = sizeof(defaultTaskBuffer),
 140:Src/main.c    ****     .cb_mem = &defaultTaskControlBlock,
 141:Src/main.c    ****     .cb_size = sizeof(defaultTaskControlBlock),
 142:Src/main.c    ****     .priority = (osPriority_t) osPriorityNormal,
 143:Src/main.c    ****   };
 144:Src/main.c    ****   defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 145:Src/main.c    **** 
ARM GAS  /tmp/ccChCE5Q.s 			page 4


 146:Src/main.c    ****   /* definition and creation of myTask02 */
 147:Src/main.c    ****   const osThreadAttr_t myTask02_attributes = {
 148:Src/main.c    ****     .name = "myTask02",
 149:Src/main.c    ****     .stack_mem = &myTask02Buffer[0],
 150:Src/main.c    ****     .stack_size = sizeof(myTask02Buffer),
 151:Src/main.c    ****     .cb_mem = &myTask02ControlBlock,
 152:Src/main.c    ****     .cb_size = sizeof(myTask02ControlBlock),
 153:Src/main.c    ****     .priority = (osPriority_t) osPriorityLow,
 154:Src/main.c    ****   };
 155:Src/main.c    ****   myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 156:Src/main.c    **** 
 157:Src/main.c    ****   /* USER CODE BEGIN RTOS_THREADS */
 158:Src/main.c    ****   /* add threads, ... */
 159:Src/main.c    ****   /* USER CODE END RTOS_THREADS */
 160:Src/main.c    **** 
 161:Src/main.c    ****   /* Start scheduler */
 162:Src/main.c    ****   osKernelStart();
 163:Src/main.c    ****   
 164:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
 165:Src/main.c    **** 
 166:Src/main.c    ****   /* Infinite loop */
 167:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 168:Src/main.c    ****   while (1)
 169:Src/main.c    ****   {
 170:Src/main.c    ****     /* USER CODE END WHILE */
 171:Src/main.c    **** 
 172:Src/main.c    ****     /* USER CODE BEGIN 3 */
 173:Src/main.c    ****   }
 174:Src/main.c    ****   /* USER CODE END 3 */
 175:Src/main.c    **** }
 176:Src/main.c    **** 
 177:Src/main.c    **** /**
 178:Src/main.c    ****   * @brief System Clock Configuration
 179:Src/main.c    ****   * @retval None
 180:Src/main.c    ****   */
 181:Src/main.c    **** void SystemClock_Config(void)
 182:Src/main.c    **** {
 183:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 184:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 185:Src/main.c    **** 
 186:Src/main.c    ****   /** Configure the main internal regulator output voltage 
 187:Src/main.c    ****   */
 188:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 189:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 190:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 191:Src/main.c    ****   */
 192:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 193:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 194:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 195:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 196:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 197:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 198:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 360;
 199:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 200:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 201:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = 2;
 202:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
ARM GAS  /tmp/ccChCE5Q.s 			page 5


 203:Src/main.c    ****   {
 204:Src/main.c    ****     Error_Handler();
 205:Src/main.c    ****   }
 206:Src/main.c    ****   /** Activate the Over-Drive mode 
 207:Src/main.c    ****   */
 208:Src/main.c    ****   if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 209:Src/main.c    ****   {
 210:Src/main.c    ****     Error_Handler();
 211:Src/main.c    ****   }
 212:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 213:Src/main.c    ****   */
 214:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 215:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 216:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 217:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 218:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 219:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 220:Src/main.c    **** 
 221:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 222:Src/main.c    ****   {
 223:Src/main.c    ****     Error_Handler();
 224:Src/main.c    ****   }
 225:Src/main.c    **** }
 226:Src/main.c    **** 
 227:Src/main.c    **** /**
 228:Src/main.c    ****   * @brief SPI1 Initialization Function
 229:Src/main.c    ****   * @param None
 230:Src/main.c    ****   * @retval None
 231:Src/main.c    ****   */
 232:Src/main.c    **** static void MX_SPI1_Init(void)
 233:Src/main.c    **** {
 234:Src/main.c    **** 
 235:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 0 */
 236:Src/main.c    **** 
 237:Src/main.c    ****   /* USER CODE END SPI1_Init 0 */
 238:Src/main.c    **** 
 239:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 1 */
 240:Src/main.c    **** 
 241:Src/main.c    ****   /* USER CODE END SPI1_Init 1 */
 242:Src/main.c    ****   /* SPI1 parameter configuration*/
 243:Src/main.c    ****   hspi1.Instance = SPI1;
 244:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 245:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 246:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 247:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 248:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 249:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 250:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 251:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 252:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 253:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 254:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 255:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 256:Src/main.c    ****   {
 257:Src/main.c    ****     Error_Handler();
 258:Src/main.c    ****   }
 259:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 2 */
ARM GAS  /tmp/ccChCE5Q.s 			page 6


 260:Src/main.c    **** 
 261:Src/main.c    ****   /* USER CODE END SPI1_Init 2 */
 262:Src/main.c    **** 
 263:Src/main.c    **** }
 264:Src/main.c    **** 
 265:Src/main.c    **** /** 
 266:Src/main.c    ****   * Enable DMA controller clock
 267:Src/main.c    ****   */
 268:Src/main.c    **** static void MX_DMA_Init(void) 
 269:Src/main.c    **** {
 270:Src/main.c    **** 
 271:Src/main.c    ****   /* DMA controller clock enable */
 272:Src/main.c    ****   __HAL_RCC_DMA2_CLK_ENABLE();
 273:Src/main.c    **** 
 274:Src/main.c    ****   /* DMA interrupt init */
 275:Src/main.c    ****   /* DMA2_Stream0_IRQn interrupt configuration */
 276:Src/main.c    ****   HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 277:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 278:Src/main.c    ****   /* DMA2_Stream3_IRQn interrupt configuration */
 279:Src/main.c    ****   HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 280:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 281:Src/main.c    **** 
 282:Src/main.c    **** }
 283:Src/main.c    **** 
 284:Src/main.c    **** /**
 285:Src/main.c    ****   * @brief GPIO Initialization Function
 286:Src/main.c    ****   * @param None
 287:Src/main.c    ****   * @retval None
 288:Src/main.c    ****   */
 289:Src/main.c    **** static void MX_GPIO_Init(void)
 290:Src/main.c    **** {
 291:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 292:Src/main.c    **** 
 293:Src/main.c    ****   /* GPIO Ports Clock Enable */
 294:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 295:Src/main.c    ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 296:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 297:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 298:Src/main.c    **** 
 299:Src/main.c    ****   /*Configure GPIO pin : B1_Pin */
 300:Src/main.c    ****   GPIO_InitStruct.Pin = B1_Pin;
 301:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 302:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 303:Src/main.c    ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 304:Src/main.c    **** 
 305:Src/main.c    **** }
 306:Src/main.c    **** 
 307:Src/main.c    **** /* USER CODE BEGIN 4 */
 308:Src/main.c    **** 
 309:Src/main.c    **** /* USER CODE END 4 */
 310:Src/main.c    **** 
 311:Src/main.c    **** /* USER CODE BEGIN Header_StartDefaultTask */
 312:Src/main.c    **** /**
 313:Src/main.c    ****   * @brief  Function implementing the defaultTask thread.
 314:Src/main.c    ****   * @param  argument: Not used 
 315:Src/main.c    ****   * @retval None
 316:Src/main.c    ****   */
ARM GAS  /tmp/ccChCE5Q.s 			page 7


 317:Src/main.c    **** /* USER CODE END Header_StartDefaultTask */
 318:Src/main.c    **** 
 319:Src/main.c    **** void StartDefaultTask(void *argument)
 320:Src/main.c    **** {
  28              		.loc 1 320 0
  29              		.cfi_startproc
  30              		@ Volatile: function does not return.
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 08B5     		push	{r3, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
 321:Src/main.c    ****   /* USER CODE BEGIN 5 */
 322:Src/main.c    ****   /* Infinite loop */
 323:Src/main.c    ****   for(;;)
 324:Src/main.c    ****   {
 325:Src/main.c    ****     osDelay(1);
  39              		.loc 1 325 0
  40 0002 0124     		movs	r4, #1
  41              	.LVL1:
  42              	.L2:
  43              		.loc 1 325 0 is_stmt 0 discriminator 1
  44 0004 2046     		mov	r0, r4
  45 0006 FFF7FEFF 		bl	osDelay
  46              	.LVL2:
  47 000a FBE7     		b	.L2
  48              		.cfi_endproc
  49              	.LFE139:
  51              		.section	.text.StartTask02,"ax",%progbits
  52              		.align	1
  53              		.global	StartTask02
  54              		.syntax unified
  55              		.thumb
  56              		.thumb_func
  57              		.fpu fpv4-sp-d16
  59              	StartTask02:
  60              	.LFB140:
 326:Src/main.c    ****     //TM_ILI9341_Fill(ILI9341_COLOR_RED);
 327:Src/main.c    ****   }
 328:Src/main.c    ****   /* USER CODE END 5 */ 
 329:Src/main.c    **** }
 330:Src/main.c    **** 
 331:Src/main.c    **** /* USER CODE BEGIN Header_StartTask02 */
 332:Src/main.c    **** /**
 333:Src/main.c    **** * @brief Function implementing the myTask02 thread.
 334:Src/main.c    **** * @param argument: Not used
 335:Src/main.c    **** * @retval None
 336:Src/main.c    **** */
 337:Src/main.c    **** /* USER CODE END Header_StartTask02 */
 338:Src/main.c    **** void StartTask02(void *argument)
 339:Src/main.c    **** {
  61              		.loc 1 339 0 is_stmt 1
  62              		.cfi_startproc
  63              		@ Volatile: function does not return.
ARM GAS  /tmp/ccChCE5Q.s 			page 8


  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              	.LVL3:
  67 0000 08B5     		push	{r3, lr}
  68              	.LCFI1:
  69              		.cfi_def_cfa_offset 8
  70              		.cfi_offset 3, -8
  71              		.cfi_offset 14, -4
 340:Src/main.c    ****   /* USER CODE BEGIN StartTask02 */
 341:Src/main.c    ****   /* Infinite loop */
 342:Src/main.c    ****   for(;;)
 343:Src/main.c    ****   {
 344:Src/main.c    ****     osDelay(1);
  72              		.loc 1 344 0
  73 0002 0124     		movs	r4, #1
  74              	.LVL4:
  75              	.L5:
  76              		.loc 1 344 0 is_stmt 0 discriminator 1
  77 0004 2046     		mov	r0, r4
  78 0006 FFF7FEFF 		bl	osDelay
  79              	.LVL5:
  80 000a FBE7     		b	.L5
  81              		.cfi_endproc
  82              	.LFE140:
  84              		.section	.text.SystemClock_Config,"ax",%progbits
  85              		.align	1
  86              		.global	SystemClock_Config
  87              		.syntax unified
  88              		.thumb
  89              		.thumb_func
  90              		.fpu fpv4-sp-d16
  92              	SystemClock_Config:
  93              	.LFB135:
 182:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  94              		.loc 1 182 0 is_stmt 1
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 80
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98 0000 30B5     		push	{r4, r5, lr}
  99              	.LCFI2:
 100              		.cfi_def_cfa_offset 12
 101              		.cfi_offset 4, -12
 102              		.cfi_offset 5, -8
 103              		.cfi_offset 14, -4
 104 0002 95B0     		sub	sp, sp, #84
 105              	.LCFI3:
 106              		.cfi_def_cfa_offset 96
 183:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 107              		.loc 1 183 0
 108 0004 3422     		movs	r2, #52
 109 0006 0021     		movs	r1, #0
 110 0008 07A8     		add	r0, sp, #28
 111 000a FFF7FEFF 		bl	memset
 112              	.LVL6:
 184:Src/main.c    **** 
 113              		.loc 1 184 0
 114 000e 0024     		movs	r4, #0
ARM GAS  /tmp/ccChCE5Q.s 			page 9


 115 0010 0294     		str	r4, [sp, #8]
 116 0012 0394     		str	r4, [sp, #12]
 117 0014 0494     		str	r4, [sp, #16]
 118 0016 0594     		str	r4, [sp, #20]
 119 0018 0694     		str	r4, [sp, #24]
 120              	.LBB2:
 188:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 121              		.loc 1 188 0
 122 001a 0094     		str	r4, [sp]
 123 001c 1B4B     		ldr	r3, .L9
 124 001e 1A6C     		ldr	r2, [r3, #64]
 125 0020 42F08052 		orr	r2, r2, #268435456
 126 0024 1A64     		str	r2, [r3, #64]
 127 0026 1B6C     		ldr	r3, [r3, #64]
 128 0028 03F08053 		and	r3, r3, #268435456
 129 002c 0093     		str	r3, [sp]
 130 002e 009B     		ldr	r3, [sp]
 131              	.LBE2:
 132              	.LBB3:
 189:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 133              		.loc 1 189 0
 134 0030 0194     		str	r4, [sp, #4]
 135 0032 174B     		ldr	r3, .L9+4
 136 0034 1A68     		ldr	r2, [r3]
 137 0036 42F44042 		orr	r2, r2, #49152
 138 003a 1A60     		str	r2, [r3]
 139 003c 1B68     		ldr	r3, [r3]
 140 003e 03F44043 		and	r3, r3, #49152
 141 0042 0193     		str	r3, [sp, #4]
 142 0044 019B     		ldr	r3, [sp, #4]
 143              	.LBE3:
 192:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 144              		.loc 1 192 0
 145 0046 0225     		movs	r5, #2
 146 0048 0795     		str	r5, [sp, #28]
 193:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 147              		.loc 1 193 0
 148 004a 0123     		movs	r3, #1
 149 004c 0A93     		str	r3, [sp, #40]
 194:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 150              		.loc 1 194 0
 151 004e 1023     		movs	r3, #16
 152 0050 0B93     		str	r3, [sp, #44]
 195:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 153              		.loc 1 195 0
 154 0052 0D95     		str	r5, [sp, #52]
 196:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 155              		.loc 1 196 0
 156 0054 0E94     		str	r4, [sp, #56]
 197:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 360;
 157              		.loc 1 197 0
 158 0056 0F93     		str	r3, [sp, #60]
 198:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 159              		.loc 1 198 0
 160 0058 4FF4B473 		mov	r3, #360
 161 005c 1093     		str	r3, [sp, #64]
 199:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 2;
ARM GAS  /tmp/ccChCE5Q.s 			page 10


 162              		.loc 1 199 0
 163 005e 1195     		str	r5, [sp, #68]
 200:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = 2;
 164              		.loc 1 200 0
 165 0060 1295     		str	r5, [sp, #72]
 201:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 166              		.loc 1 201 0
 167 0062 1395     		str	r5, [sp, #76]
 202:Src/main.c    ****   {
 168              		.loc 1 202 0
 169 0064 07A8     		add	r0, sp, #28
 170 0066 FFF7FEFF 		bl	HAL_RCC_OscConfig
 171              	.LVL7:
 208:Src/main.c    ****   {
 172              		.loc 1 208 0
 173 006a FFF7FEFF 		bl	HAL_PWREx_EnableOverDrive
 174              	.LVL8:
 214:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 175              		.loc 1 214 0
 176 006e 0F23     		movs	r3, #15
 177 0070 0293     		str	r3, [sp, #8]
 216:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 178              		.loc 1 216 0
 179 0072 0395     		str	r5, [sp, #12]
 217:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 180              		.loc 1 217 0
 181 0074 0494     		str	r4, [sp, #16]
 218:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 182              		.loc 1 218 0
 183 0076 4FF4A053 		mov	r3, #5120
 184 007a 0593     		str	r3, [sp, #20]
 219:Src/main.c    **** 
 185              		.loc 1 219 0
 186 007c 0693     		str	r3, [sp, #24]
 221:Src/main.c    ****   {
 187              		.loc 1 221 0
 188 007e 0521     		movs	r1, #5
 189 0080 02A8     		add	r0, sp, #8
 190 0082 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 191              	.LVL9:
 225:Src/main.c    **** 
 192              		.loc 1 225 0
 193 0086 15B0     		add	sp, sp, #84
 194              	.LCFI4:
 195              		.cfi_def_cfa_offset 12
 196              		@ sp needed
 197 0088 30BD     		pop	{r4, r5, pc}
 198              	.L10:
 199 008a 00BF     		.align	2
 200              	.L9:
 201 008c 00380240 		.word	1073887232
 202 0090 00700040 		.word	1073770496
 203              		.cfi_endproc
 204              	.LFE135:
 206              		.section	.text.main,"ax",%progbits
 207              		.align	1
 208              		.global	main
ARM GAS  /tmp/ccChCE5Q.s 			page 11


 209              		.syntax unified
 210              		.thumb
 211              		.thumb_func
 212              		.fpu fpv4-sp-d16
 214              	main:
 215              	.LFB134:
  82:Src/main.c    ****   /* USER CODE BEGIN 1 */
 216              		.loc 1 82 0
 217              		.cfi_startproc
 218              		@ Volatile: function does not return.
 219              		@ args = 0, pretend = 0, frame = 112
 220              		@ frame_needed = 0, uses_anonymous_args = 0
 221 0000 80B5     		push	{r7, lr}
 222              	.LCFI5:
 223              		.cfi_def_cfa_offset 8
 224              		.cfi_offset 7, -8
 225              		.cfi_offset 14, -4
 226 0002 9CB0     		sub	sp, sp, #112
 227              	.LCFI6:
 228              		.cfi_def_cfa_offset 120
  91:Src/main.c    **** 
 229              		.loc 1 91 0
 230 0004 FFF7FEFF 		bl	HAL_Init
 231              	.LVL10:
  98:Src/main.c    **** 
 232              		.loc 1 98 0
 233 0008 FFF7FEFF 		bl	SystemClock_Config
 234              	.LVL11:
 235              	.LBB15:
 236              	.LBB16:
 291:Src/main.c    **** 
 237              		.loc 1 291 0
 238 000c 0024     		movs	r4, #0
 239 000e 0794     		str	r4, [sp, #28]
 240 0010 0894     		str	r4, [sp, #32]
 241 0012 0994     		str	r4, [sp, #36]
 242              	.LBB17:
 294:Src/main.c    ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 243              		.loc 1 294 0
 244 0014 0194     		str	r4, [sp, #4]
 245 0016 4B4D     		ldr	r5, .L14
 246 0018 2B6B     		ldr	r3, [r5, #48]
 247 001a 43F00403 		orr	r3, r3, #4
 248 001e 2B63     		str	r3, [r5, #48]
 249 0020 2B6B     		ldr	r3, [r5, #48]
 250 0022 03F00403 		and	r3, r3, #4
 251 0026 0193     		str	r3, [sp, #4]
 252 0028 019B     		ldr	r3, [sp, #4]
 253              	.LBE17:
 254              	.LBB18:
 295:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 255              		.loc 1 295 0
 256 002a 0294     		str	r4, [sp, #8]
 257 002c 2B6B     		ldr	r3, [r5, #48]
 258 002e 43F08003 		orr	r3, r3, #128
 259 0032 2B63     		str	r3, [r5, #48]
 260 0034 2B6B     		ldr	r3, [r5, #48]
ARM GAS  /tmp/ccChCE5Q.s 			page 12


 261 0036 03F08003 		and	r3, r3, #128
 262 003a 0293     		str	r3, [sp, #8]
 263 003c 029B     		ldr	r3, [sp, #8]
 264              	.LBE18:
 265              	.LBB19:
 296:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 266              		.loc 1 296 0
 267 003e 0394     		str	r4, [sp, #12]
 268 0040 2B6B     		ldr	r3, [r5, #48]
 269 0042 43F00103 		orr	r3, r3, #1
 270 0046 2B63     		str	r3, [r5, #48]
 271 0048 2B6B     		ldr	r3, [r5, #48]
 272 004a 03F00103 		and	r3, r3, #1
 273 004e 0393     		str	r3, [sp, #12]
 274 0050 039B     		ldr	r3, [sp, #12]
 275              	.LBE19:
 276              	.LBB20:
 297:Src/main.c    **** 
 277              		.loc 1 297 0
 278 0052 0494     		str	r4, [sp, #16]
 279 0054 2B6B     		ldr	r3, [r5, #48]
 280 0056 43F00203 		orr	r3, r3, #2
 281 005a 2B63     		str	r3, [r5, #48]
 282 005c 2B6B     		ldr	r3, [r5, #48]
 283 005e 03F00203 		and	r3, r3, #2
 284 0062 0493     		str	r3, [sp, #16]
 285 0064 049B     		ldr	r3, [sp, #16]
 286              	.LBE20:
 300:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 287              		.loc 1 300 0
 288 0066 4FF40053 		mov	r3, #8192
 289 006a 0593     		str	r3, [sp, #20]
 301:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 290              		.loc 1 301 0
 291 006c 364B     		ldr	r3, .L14+4
 292 006e 0693     		str	r3, [sp, #24]
 303:Src/main.c    **** 
 293              		.loc 1 303 0
 294 0070 05A9     		add	r1, sp, #20
 295 0072 3648     		ldr	r0, .L14+8
 296 0074 FFF7FEFF 		bl	HAL_GPIO_Init
 297              	.LVL12:
 298              	.LBE16:
 299              	.LBE15:
 300              	.LBB21:
 301              	.LBB22:
 302              	.LBB23:
 272:Src/main.c    **** 
 303              		.loc 1 272 0
 304 0078 0594     		str	r4, [sp, #20]
 305 007a 2B6B     		ldr	r3, [r5, #48]
 306 007c 43F48003 		orr	r3, r3, #4194304
 307 0080 2B63     		str	r3, [r5, #48]
 308 0082 2B6B     		ldr	r3, [r5, #48]
 309 0084 03F48003 		and	r3, r3, #4194304
 310 0088 0593     		str	r3, [sp, #20]
 311 008a 059B     		ldr	r3, [sp, #20]
ARM GAS  /tmp/ccChCE5Q.s 			page 13


 312              	.LBE23:
 276:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 313              		.loc 1 276 0
 314 008c 2246     		mov	r2, r4
 315 008e 0521     		movs	r1, #5
 316 0090 3820     		movs	r0, #56
 317 0092 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 318              	.LVL13:
 277:Src/main.c    ****   /* DMA2_Stream3_IRQn interrupt configuration */
 319              		.loc 1 277 0
 320 0096 3820     		movs	r0, #56
 321 0098 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 322              	.LVL14:
 279:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 323              		.loc 1 279 0
 324 009c 2246     		mov	r2, r4
 325 009e 0521     		movs	r1, #5
 326 00a0 3B20     		movs	r0, #59
 327 00a2 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 328              	.LVL15:
 280:Src/main.c    **** 
 329              		.loc 1 280 0
 330 00a6 3B20     		movs	r0, #59
 331 00a8 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 332              	.LVL16:
 333              	.LBE22:
 334              	.LBE21:
 335              	.LBB24:
 336              	.LBB25:
 243:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 337              		.loc 1 243 0
 338 00ac 284D     		ldr	r5, .L14+12
 339 00ae 294B     		ldr	r3, .L14+16
 340 00b0 2B60     		str	r3, [r5]
 244:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 341              		.loc 1 244 0
 342 00b2 4FF48273 		mov	r3, #260
 343 00b6 6B60     		str	r3, [r5, #4]
 245:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 344              		.loc 1 245 0
 345 00b8 AC60     		str	r4, [r5, #8]
 246:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 346              		.loc 1 246 0
 347 00ba EC60     		str	r4, [r5, #12]
 247:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 348              		.loc 1 247 0
 349 00bc 2C61     		str	r4, [r5, #16]
 248:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 350              		.loc 1 248 0
 351 00be 6C61     		str	r4, [r5, #20]
 249:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 352              		.loc 1 249 0
 353 00c0 4FF40076 		mov	r6, #512
 354 00c4 AE61     		str	r6, [r5, #24]
 250:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 355              		.loc 1 250 0
 356 00c6 EC61     		str	r4, [r5, #28]
ARM GAS  /tmp/ccChCE5Q.s 			page 14


 251:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 357              		.loc 1 251 0
 358 00c8 2C62     		str	r4, [r5, #32]
 252:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 359              		.loc 1 252 0
 360 00ca 6C62     		str	r4, [r5, #36]
 253:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 361              		.loc 1 253 0
 362 00cc AC62     		str	r4, [r5, #40]
 254:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 363              		.loc 1 254 0
 364 00ce 0A23     		movs	r3, #10
 365 00d0 EB62     		str	r3, [r5, #44]
 255:Src/main.c    ****   {
 366              		.loc 1 255 0
 367 00d2 2846     		mov	r0, r5
 368 00d4 FFF7FEFF 		bl	HAL_SPI_Init
 369              	.LVL17:
 370              	.LBE25:
 371              	.LBE24:
 109:Src/main.c    ****   //TM_ILI9341_Fill(ILI9341_COLOR_BLACK);
 372              		.loc 1 109 0
 373 00d8 2846     		mov	r0, r5
 374 00da FFF7FEFF 		bl	TM_ILI9341_Init
 375              	.LVL18:
 116:Src/main.c    **** 
 376              		.loc 1 116 0
 377 00de FFF7FEFF 		bl	osKernelInitialize
 378              	.LVL19:
 136:Src/main.c    ****     .name = "defaultTask",
 379              		.loc 1 136 0
 380 00e2 2027     		movs	r7, #32
 381 00e4 3A46     		mov	r2, r7
 382 00e6 2146     		mov	r1, r4
 383 00e8 14A8     		add	r0, sp, #80
 384 00ea FFF7FEFF 		bl	memset
 385              	.LVL20:
 386 00ee 1A4B     		ldr	r3, .L14+20
 387 00f0 1393     		str	r3, [sp, #76]
 388 00f2 1A4B     		ldr	r3, .L14+24
 389 00f4 1593     		str	r3, [sp, #84]
 390 00f6 5C25     		movs	r5, #92
 391 00f8 1695     		str	r5, [sp, #88]
 392 00fa 194B     		ldr	r3, .L14+28
 393 00fc 1793     		str	r3, [sp, #92]
 394 00fe 1896     		str	r6, [sp, #96]
 395 0100 1823     		movs	r3, #24
 396 0102 1993     		str	r3, [sp, #100]
 144:Src/main.c    **** 
 397              		.loc 1 144 0
 398 0104 13AA     		add	r2, sp, #76
 399 0106 2146     		mov	r1, r4
 400 0108 1648     		ldr	r0, .L14+32
 401 010a FFF7FEFF 		bl	osThreadNew
 402              	.LVL21:
 403 010e 164B     		ldr	r3, .L14+36
 404 0110 1860     		str	r0, [r3]
ARM GAS  /tmp/ccChCE5Q.s 			page 15


 147:Src/main.c    ****     .name = "myTask02",
 405              		.loc 1 147 0
 406 0112 3A46     		mov	r2, r7
 407 0114 2146     		mov	r1, r4
 408 0116 0BA8     		add	r0, sp, #44
 409 0118 FFF7FEFF 		bl	memset
 410              	.LVL22:
 411 011c 134B     		ldr	r3, .L14+40
 412 011e 0A93     		str	r3, [sp, #40]
 413 0120 134B     		ldr	r3, .L14+44
 414 0122 0C93     		str	r3, [sp, #48]
 415 0124 0D95     		str	r5, [sp, #52]
 416 0126 134B     		ldr	r3, .L14+48
 417 0128 0E93     		str	r3, [sp, #56]
 418 012a 0F96     		str	r6, [sp, #60]
 419 012c 0823     		movs	r3, #8
 420 012e 1093     		str	r3, [sp, #64]
 155:Src/main.c    **** 
 421              		.loc 1 155 0
 422 0130 0AAA     		add	r2, sp, #40
 423 0132 2146     		mov	r1, r4
 424 0134 1048     		ldr	r0, .L14+52
 425 0136 FFF7FEFF 		bl	osThreadNew
 426              	.LVL23:
 427 013a 104B     		ldr	r3, .L14+56
 428 013c 1860     		str	r0, [r3]
 162:Src/main.c    ****   
 429              		.loc 1 162 0
 430 013e FFF7FEFF 		bl	osKernelStart
 431              	.LVL24:
 432              	.L12:
 433 0142 FEE7     		b	.L12
 434              	.L15:
 435              		.align	2
 436              	.L14:
 437 0144 00380240 		.word	1073887232
 438 0148 00002110 		.word	270598144
 439 014c 00080240 		.word	1073874944
 440 0150 00000000 		.word	hspi1
 441 0154 00300140 		.word	1073819648
 442 0158 00000000 		.word	.LC0
 443 015c 00000000 		.word	defaultTaskControlBlock
 444 0160 00000000 		.word	defaultTaskBuffer
 445 0164 00000000 		.word	StartDefaultTask
 446 0168 00000000 		.word	defaultTaskHandle
 447 016c 0C000000 		.word	.LC1
 448 0170 00000000 		.word	myTask02ControlBlock
 449 0174 00000000 		.word	myTask02Buffer
 450 0178 00000000 		.word	StartTask02
 451 017c 00000000 		.word	myTask02Handle
 452              		.cfi_endproc
 453              	.LFE134:
 455              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 456              		.align	1
 457              		.global	HAL_TIM_PeriodElapsedCallback
 458              		.syntax unified
 459              		.thumb
ARM GAS  /tmp/ccChCE5Q.s 			page 16


 460              		.thumb_func
 461              		.fpu fpv4-sp-d16
 463              	HAL_TIM_PeriodElapsedCallback:
 464              	.LFB141:
 345:Src/main.c    ****     //TM_ILI9341_Fill(ILI9341_COLOR_BLUE);
 346:Src/main.c    ****   }
 347:Src/main.c    ****   /* USER CODE END StartTask02 */
 348:Src/main.c    **** }
 349:Src/main.c    **** 
 350:Src/main.c    **** /**
 351:Src/main.c    ****   * @brief  Period elapsed callback in non blocking mode
 352:Src/main.c    ****   * @note   This function is called  when TIM1 interrupt took place, inside
 353:Src/main.c    ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 354:Src/main.c    ****   * a global variable "uwTick" used as application time base.
 355:Src/main.c    ****   * @param  htim : TIM handle
 356:Src/main.c    ****   * @retval None
 357:Src/main.c    ****   */
 358:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 359:Src/main.c    **** {
 465              		.loc 1 359 0
 466              		.cfi_startproc
 467              		@ args = 0, pretend = 0, frame = 0
 468              		@ frame_needed = 0, uses_anonymous_args = 0
 469              	.LVL25:
 470 0000 08B5     		push	{r3, lr}
 471              	.LCFI7:
 472              		.cfi_def_cfa_offset 8
 473              		.cfi_offset 3, -8
 474              		.cfi_offset 14, -4
 360:Src/main.c    ****   /* USER CODE BEGIN Callback 0 */
 361:Src/main.c    **** 
 362:Src/main.c    ****   /* USER CODE END Callback 0 */
 363:Src/main.c    ****   if (htim->Instance == TIM1) {
 475              		.loc 1 363 0
 476 0002 0268     		ldr	r2, [r0]
 477 0004 034B     		ldr	r3, .L20
 478 0006 9A42     		cmp	r2, r3
 479 0008 00D0     		beq	.L19
 480              	.LVL26:
 481              	.L16:
 364:Src/main.c    ****     HAL_IncTick();
 365:Src/main.c    ****   }
 366:Src/main.c    ****   /* USER CODE BEGIN Callback 1 */
 367:Src/main.c    **** 
 368:Src/main.c    ****   /* USER CODE END Callback 1 */
 369:Src/main.c    **** }
 482              		.loc 1 369 0
 483 000a 08BD     		pop	{r3, pc}
 484              	.LVL27:
 485              	.L19:
 364:Src/main.c    ****     HAL_IncTick();
 486              		.loc 1 364 0
 487 000c FFF7FEFF 		bl	HAL_IncTick
 488              	.LVL28:
 489              		.loc 1 369 0
 490 0010 FBE7     		b	.L16
 491              	.L21:
ARM GAS  /tmp/ccChCE5Q.s 			page 17


 492 0012 00BF     		.align	2
 493              	.L20:
 494 0014 00000140 		.word	1073807360
 495              		.cfi_endproc
 496              	.LFE141:
 498              		.section	.text.Error_Handler,"ax",%progbits
 499              		.align	1
 500              		.global	Error_Handler
 501              		.syntax unified
 502              		.thumb
 503              		.thumb_func
 504              		.fpu fpv4-sp-d16
 506              	Error_Handler:
 507              	.LFB142:
 370:Src/main.c    **** 
 371:Src/main.c    **** /**
 372:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 373:Src/main.c    ****   * @retval None
 374:Src/main.c    ****   */
 375:Src/main.c    **** void Error_Handler(void)
 376:Src/main.c    **** {
 508              		.loc 1 376 0
 509              		.cfi_startproc
 510              		@ args = 0, pretend = 0, frame = 0
 511              		@ frame_needed = 0, uses_anonymous_args = 0
 512              		@ link register save eliminated.
 377:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 378:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 379:Src/main.c    **** 
 380:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 381:Src/main.c    **** }
 513              		.loc 1 381 0
 514 0000 7047     		bx	lr
 515              		.cfi_endproc
 516              	.LFE142:
 518              		.comm	myTask02ControlBlock,92,4
 519              		.comm	myTask02Buffer,512,4
 520              		.comm	myTask02Handle,4,4
 521              		.comm	defaultTaskControlBlock,92,4
 522              		.comm	defaultTaskBuffer,512,4
 523              		.comm	defaultTaskHandle,4,4
 524              		.comm	hdma_spi1_tx,96,4
 525              		.comm	hdma_spi1_rx,96,4
 526              		.comm	hspi1,88,4
 527              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 528              		.align	2
 529              	.LC0:
 530 0000 64656661 		.ascii	"defaultTask\000"
 530      756C7454 
 530      61736B00 
 531              	.LC1:
 532 000c 6D795461 		.ascii	"myTask02\000"
 532      736B3032 
 532      00
 533              		.text
 534              	.Letext0:
 535              		.file 2 "/usr/include/newlib/machine/_default_types.h"
ARM GAS  /tmp/ccChCE5Q.s 			page 18


 536              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 537              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 538              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 539              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 540              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 541              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 542              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 543              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 544              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 545              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 546              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 547              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 548              		.file 15 "Src/tm_stm32f4_ili9341/tm_stm32f4_fonts.h"
 549              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 550              		.file 17 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 551              		.file 18 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 552              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_pwr_ex.h"
 553              		.file 20 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 554              		.file 21 "Src/tm_stm32f4_ili9341/tm_stm32f4_ili9341.h"
 555              		.file 22 "<built-in>"
ARM GAS  /tmp/ccChCE5Q.s 			page 19


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccChCE5Q.s:18     .text.StartDefaultTask:0000000000000000 $t
     /tmp/ccChCE5Q.s:25     .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/ccChCE5Q.s:52     .text.StartTask02:0000000000000000 $t
     /tmp/ccChCE5Q.s:59     .text.StartTask02:0000000000000000 StartTask02
     /tmp/ccChCE5Q.s:85     .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccChCE5Q.s:92     .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccChCE5Q.s:201    .text.SystemClock_Config:000000000000008c $d
     /tmp/ccChCE5Q.s:207    .text.main:0000000000000000 $t
     /tmp/ccChCE5Q.s:214    .text.main:0000000000000000 main
     /tmp/ccChCE5Q.s:437    .text.main:0000000000000144 $d
                            *COM*:0000000000000058 hspi1
                            *COM*:000000000000005c defaultTaskControlBlock
                            *COM*:0000000000000200 defaultTaskBuffer
                            *COM*:0000000000000004 defaultTaskHandle
                            *COM*:000000000000005c myTask02ControlBlock
                            *COM*:0000000000000200 myTask02Buffer
                            *COM*:0000000000000004 myTask02Handle
     /tmp/ccChCE5Q.s:456    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccChCE5Q.s:463    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccChCE5Q.s:494    .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/ccChCE5Q.s:499    .text.Error_Handler:0000000000000000 $t
     /tmp/ccChCE5Q.s:506    .text.Error_Handler:0000000000000000 Error_Handler
                            *COM*:0000000000000060 hdma_spi1_tx
                            *COM*:0000000000000060 hdma_spi1_rx
     /tmp/ccChCE5Q.s:528    .rodata.main.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
osDelay
memset
HAL_RCC_OscConfig
HAL_PWREx_EnableOverDrive
HAL_RCC_ClockConfig
HAL_Init
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_SPI_Init
TM_ILI9341_Init
osKernelInitialize
osThreadNew
osKernelStart
HAL_IncTick
